<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->

<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>QoS Ingress Port Classification</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">
 
var help_page = "/help/help_qcl_v2.htm";

var num_columns = 0; // Initialized at runtime

var allPorts = configPortMin + "-" + configNormalPortMax;

var processUpdate;    // forward declaration

// indexes in values array:
var idx = 0;
var idx_usid       = idx++;
var idx_qce_id     = idx++;
var idx_ports      = idx++;
var idx_key_dmac   = idx++;
var idx_key_smac   = idx++;
var idx_key_tag    = idx++;
var idx_key_vid    = idx++;
var idx_key_pcp    = idx++;
var idx_key_dei    = idx++;
var idx_frame_type = idx++;
var idx_act_cos    = idx++;
var idx_act_dpl    = idx++;
var idx_act_dscp   = idx++;
var idx_act_pcp    = idx++;
var idx_act_dei    = idx++;
var idx_act_policy = idx++;

var qceIdMapTbl; // array of qceIds in each row (zero based) 
var usidMapTbl;  // array of present switches indexed by usid

var pageArgs = searchArgs(window.location.search);
if (pageArgs.error && parseInt(pageArgs.error, 10) == 1) {
    alert("QCE Entry Add Failed!");
}

function requestUpdate() {
    loadXMLDoc("/config/qcl_v2", processUpdate, "qclData");
}

function qceDelete() {
    if (!confirm("Do you want to delete this entry?")) {
        return false;
    } 
    loadXMLDoc("/config/qcl_v2?qceConfigFlag=1&qce_id=" + this.value, processUpdate, 'qclData');
    return true;
}

function qceMoveUp() {
    loadXMLDoc("/config/qcl_v2?qceConfigFlag=2&qce_id=" + this.value, processUpdate, 'qclData');
}

function qceMoveDown() {
    loadXMLDoc("/config/qcl_v2?qceConfigFlag=2&qce_id=" + this.value, processUpdate, 'qclData');
}

function qceEdit() {
    document.location.href="qcl_v2_edit.htm?qceConfigFlag=3&qce_id=" + this.value;
}

function qceInsert() {
    document.location.href="qcl_v2_edit.htm?qceConfigFlag=4&qce_id=" + this.value;
}

function qceAddLast() {
    document.location.href="qcl_v2_edit.htm?qceConfigFlag=4&qce_id=0";
}

function addImageInline(frag, style, src, text, idx, value, click)
{
    var field = document.createElement('img');
    field.id = text.split(" ").join("") + "_" + idx;
    field.src = src;
    field.border = 0;
    field.value = value;
    if (click) {
        field.onclick = click;
    }
    field.title = field.alt = text;
    frag.appendChild(field);
    return field;
}

function addRowControlCol(tr, idx, first, last) {
    var container = document.createElement("td");

    addImageInline(container, "cl", "images/add.gif", "Insert new QCE before this QCE", idx, qceIdMapTbl[idx], qceInsert);
  
    if (first) {
        addImageInline(container, "cl", "images/up_gray.gif", "Move QCE up", idx, -1);
    } else {
        addImageInline(container, "cl", "images/up.gif", "Move QCE up", idx, qceIdMapTbl[idx - 1], qceMoveUp);
    }

    container.appendChild(document.createElement("br"));
    
    addImageInline(container, "cl", "images/edit.gif", "Edit QCE", idx, qceIdMapTbl[idx], qceEdit);
    
    if (last) {
        addImageInline(container, "cl", "images/down_gray.gif", "Move QCE down", idx, -1);
    }  else {
        addImageInline(container, "cl", "images/down.gif", "Move QCE down", idx, qceIdMapTbl[idx], qceMoveDown);
    }
    
    addImageInline(container, "cl", "images/del.gif", "Delete QCE", idx, qceIdMapTbl[idx], qceDelete);
    
    tr.appendChild(container);
}


function addRow(frag, values, idx, first, last) {
    var tr = CreateStyledElement("tr", idx % 2 ? "config_odd" : "config_even");
    var usid;
    var macTxt;
    var splitpcp;

    qceIdMapTbl[idx] = values[idx_qce_id];

    addTextCell(tr, values[idx_qce_id], "cl");
    
    if (configStackable) { // only if stacking
        usid = (parseInt(values[idx_usid], 10));
        if (usid == -1) {
            addTextCell(tr, "Any", "cl");
        } else if (usidMapTbl[usid]) {
            addTextCell(tr, usid, "cl");
        } else {
            addTextCell(tr, usid + " (not present)", "cl");
        }
    }
    
    if (values[idx_ports] !== "") {
        if (allPorts == values[idx_ports]) {
            addTextCell(tr, "All", "cl");
        } else {
            addTextCell(tr, values[idx_ports], "cl");
        }
    } else {
        addTextCell(tr, "None", "cl");
    }
    
    addTextCell(tr, values[idx_key_dmac], "cl");
    addTextCell(tr, values[idx_key_smac], "cl");
    addTextCell(tr, values[idx_key_tag], "cl");
    addTextCell(tr, values[idx_key_vid], "cl");
    addTextCell(tr, values[idx_key_pcp], "cl");

    if (parseInt(values[idx_key_dei], 10)) {
        addTextCell(tr, parseInt(values[idx_key_dei], 10) - 1, "cl");
    } else {
        addTextCell(tr, "Any", "cl");
    }

    switch (parseInt(values[idx_frame_type], 10)){
    case 0:
        addTextCell(tr, "Ethernet", "cl");
        break;
    case 1:
        addTextCell(tr, "Any", "cl");
        break;
    case 2:
        addTextCell(tr, "LLC", "cl");
        break;
    case 3:
        addTextCell(tr, "SNAP", "cl");
        break;
    case 4:
        addTextCell(tr, "IPv4", "cl");
        break;
    case 5:
        addTextCell(tr, "IPv6", "cl");
        break;
    default:
        addTextCell(tr, "????", "cl");
        alert("Unexpected frame type " + values[idx_frame_type]);
        break;
    }

    if (parseInt(values[idx_act_cos], 10) != -1) {
        addTextCell(tr, values[idx_act_cos], "cl");
    } else {
        addTextCell(tr, "Default", "cl");
    }

    if (parseInt(values[idx_act_dpl], 10) != -1) {
        addTextCell(tr, values[idx_act_dpl], "cl");
    } else {
        addTextCell(tr, "Default", "cl");
    }

    if (parseInt(values[idx_act_dscp], 10) != -1) {
        addTextCell(tr, configQosDscpNames[parseInt(values[idx_act_dscp], 10)], "cl");
    } else {
        addTextCell(tr, "Default", "cl");
    }

    if (configArchServal) {
        if (parseInt(values[idx_act_pcp], 10) != -1) {
            addTextCell(tr, values[idx_act_pcp], "cl");
        } else {
            addTextCell(tr, "Default", "cl");
        }
        if (parseInt(values[idx_act_dei], 10) != -1) {
            addTextCell(tr, values[idx_act_dei], "cl");
        } else {
            addTextCell(tr, "Default", "cl");
        }
        if (parseInt(values[idx_act_policy], 10) != -1) {
            addTextCell(tr, values[idx_act_policy], "cl");
        } else {
            addTextCell(tr, "Default", "cl");
        }
    }

    addRowControlCol(tr, idx, first, last);
    frag.appendChild(tr);
}

processUpdate = function processUpdate(req, ref) {
    var tbody;
    var frag;
    var data;
    var usid_list;
    var qce_list;
    var values;
    var i;
    var tr;
    var td;

/* Format:
 * <usid_list>#<qce_list>
 *
 * usid_list :== <usid l>;<usid m>;<usid n> // List of present (active) switches in usid order.
 *
 * qce_list  :== <qce 1>;<qce 2>;<qce 3>;...<qce n> // List of currently defined QCEs (might be empty).
 *   qce  x  :== <usid>/<qce_id>/<ports>/<key_dmac>/<key_smac>/<key_tag>/<key_vid>/<key_pcp>/<key_dei>/<frame_type>/<act_cos>/<act_dpl>/<act_dscp>/<act_pcp>/<act_dei>/<act_policy>
 *     usid       :== 1..16 or -1 for all switches
 *     qce_id     :== 1..256
 *     ports      :== String  // List of ports e.g. "1,3,5,7,9-53"
 *     key_dmac   :== String  // "Any", "Unicast", "Multicast", "Broadcast" or "xx-xx-xx-xx-xx-xx" (Serval1 only)
 *     key_smac   :== String  // "Any", "xx-xx-xx" (Jag1 only) or "xx-xx-xx-xx-xx-xx" (all other)
 *     key_tag    :== String  // "Any", "Untagged", "Tagged", "C-Tagged" (Serval1 only) or "S-Tagged" (Serval1 only)
 *     key_vid    :== String  // "Any" or vid or vid-vid
 *     key_pcp    :== String  // "Any" or pcp or pcp-pcp
 *     key_dei    :== 0..2    // 0: Any, 1: 0, 2: 1
 *     frame_type :== 0..5    // One of vtss_qce_type_t
 *     act_cos    :== -1..7   // -1 is no action, else classify to selected value
 *     act_dpl    :== -1..3   // -1 is no action, else classify to selected value
 *     act_dscp   :== -1..63  // -1 is no action, else classify to selected value
 *     act_pcp    :== -1..7   // -1 is no action, else classify to selected value
 *     act_dei    :== -1..1   // -1 is no action, else classify to selected value
 *     act_policy :== -1..63  // -1 is no action, else classify to selected value
 *
 */
    qceIdMapTbl = [];
    usidMapTbl = [];
    frag = document.createDocumentFragment();

    if (req.responseText) {
        data = req.responseText.split("#");
        if (data[0]) {
            usid_list = data[0].split(";");
            for (i = 0; i < usid_list.length; i++) {
                usidMapTbl[usid_list[i]] = true;
            }
        }

        i = 0; // i must be reset to zero here as qce_list might be empty
        if (data[1]) {
            qce_list  = data[1].split(";");
            for (i = 0; i < qce_list.length; i++) {
                values = qce_list[i].split("/");
                addRow(frag, values, i, (i === 0), (i === (qce_list.length - 1)));
            }
        }
    }
    
    // Always create a row with an AddLast button
    tr = CreateStyledElement("tr", i % 2 ? "config_odd" : "config_even");

    // Spans all columns - 1
    td = document.createElement("td");
    td.setAttribute("colSpan", num_columns);
    tr.appendChild(td);

    // Spans last columns
    td = document.createElement("td");
    addImageInline(td, "cl", "images/add.gif", "Add QCE to end of list", i, 0, qceAddLast);
    tr.appendChild(td);

    frag.appendChild(tr);

    tbody = document.getElementById(ref);
    clearChildNodes(tbody);
    tbody.appendChild(frag);
};

// Create table header
function addHeader() {
    var frag;
    var tr;
    var td;
    var elem;

    num_columns = 12; // Default number of columns
    frag = document.createDocumentFragment();

    tr = document.createElement("tr");
    addTextHeaderCell(tr, "QCE", "c", 1, 2);
    if (configStackable) {
        addTextHeaderCell(tr, "Switch", "c", 1, 2);
        num_columns++; // Increase for stacking
    }
    addTextHeaderCell(tr, "Port", "c", 1, 2);
    addTextHeaderCell(tr, "DMAC", "c", 1, 2);
    addTextHeaderCell(tr, "SMAC", "c", 1, 2);
    td = addTextHeaderCell(tr, "Tag", "c", 1, 2);
    td.appendChild(document.createElement("br"));
    td.appendChild(document.createTextNode("Type"));
    addTextHeaderCell(tr, "VID", "c", 1, 2);
    addTextHeaderCell(tr, "PCP", "c", 1, 2);
    addTextHeaderCell(tr, "DEI", "c", 1, 2);
    td = addTextHeaderCell(tr, "Frame", "c", 1, 2);
    td.appendChild(document.createElement("br"));
    td.appendChild(document.createTextNode("Type"));
    addTextHeaderCell(tr, "Action", "c", (configArchServal) ? 6 : 3, 1);
    addTextHeaderCell(tr, "", "c", 1, 2);
    frag.appendChild(tr);

    tr = document.createElement("tr");
    addTextHeaderCell(tr, "CoS", "c");
    addTextHeaderCell(tr, "DPL", "c");
    addTextHeaderCell(tr, "DSCP", "c");
    if (configArchServal) {
        addTextHeaderCell(tr, "PCP", "c");
        addTextHeaderCell(tr, "DEI", "c");
        addTextHeaderCell(tr, "Policy", "c");
        num_columns += 3; // Add the 3 extra actions
    }
    frag.appendChild(tr);

    elem = document.getElementById("qclHeader");
    clearChildNodes(elem);
    elem.appendChild(frag);
}

function docLoad() {
    addHeader();
    requestUpdate();
}

 </script>
</head>

<body class="content" onload="docLoad();">

<h1>QoS Control List Configuration</h1>

<table summary="QoS Control List" class="config">
 <thead id="qclHeader">
 </thead>
 <tbody id="qclData">
 </tbody>
</table>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
