<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 
 Vitesse Switch Software.
 
 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>MSTI Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_mstp_msti_map_config.htm";

function checkForm(form)
{
    var f = document.getElementById("name");
    if(f.value.length === 0 &&
       !confirm("Leave 'Configuration Name' empty?")) {
        return false;
    }
    if(!isWithinRange("revision", 0, 0xffff, "'Configuration revision'", "")) {
        return false;
    }
    var i, map = new Array(4096);
    for(i = 0; i < map.length; i++) {
        map[i] = 0;
    }
    for(i = 1; i <= 7; i++) {
        var fld = document.getElementById("map_" + i);
        var elms = fld.value.split(/\s*,+\s*|\s+/);
        for(var j = 0; j < elms.length; j++) {
            var elm = elms[j];
            if(elm.length) {
                var parts = elm.match(/^(\d+)(-(\d+))?$/);
                if(!parts) {
                    return GiveAlert("MST" + i + ": VLAN '" + elm + "' should be either a single VLAN or a range", fld); 
                }
                var vlan = parseInt(parts[1], 10);
                if(vlan === 0 || vlan >= 4095) {
                    return GiveAlert("MST" + i + ": VLAN '" + parts[1] + "' is invalid", fld); 
                }
                var vlan_end;
                if(parts[3]) {
                    vlan_end = parseInt(parts[3], 10);
                    if(vlan_end === 0 || vlan_end >= 4095) {
                        return GiveAlert("MST" + i + ": VLAN '" + parts[3] + "' is invalid", fld);
                    }
                } else {
                    vlan_end = vlan;
                }
                if(vlan > vlan_end) {
                    return GiveAlert("MST" + i + ": VLAN range '" + elm + "' is invalid", fld);
                }
                for(var v = vlan; v <= vlan_end; v++) {
                    if(map[v] != "undefined" && map[v] !== 0) {
                        return GiveAlert("MST" + i + ": VLAN '" + v + "' is already mapped to MST" + map[v], fld);
                    }
                    map[v] = i;
                }
            }
        }
        fld.value = elms.join(",");
    }
    return true;
}

function addRow(index, frag, values)
{
    var mstino = parseInt(values[0], 10);
    var msti = values[1];
    var vlan = values[2];

    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");

    addTextCell(tr, msti, "cl");
    addInputAreaCell(tr, vlan, "cl", "map_" + mstino, 70, 2);

    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref)
{
    var frag_msti = document.createDocumentFragment();
    var msticonfig = req.responseText.split("|");

    UpdateIdValue('name', unescape(msticonfig.shift()));
    UpdateIdValue('revision', msticonfig.shift());

    for(var i = 0; i < msticonfig.length; i++) {
        if(msticonfig[i]) {
            var pval = msticonfig[i].split("/");
            addRow(i, frag_msti, pval);
        }
    }
    var tbody;
    tbody = document.getElementById('mstiData');
    clearChildNodes(tbody);
    tbody.appendChild(frag_msti);
}

function requestUpdate() {
    loadXMLDoc("/config/rstp_msti_map", processUpdate, null);
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<h1>MSTI Configuration</h1>

<p>Add VLANs separated by spaces or comma.</p>

<p><strong>Unmapped VLANs are mapped to the CIST</strong>. (The default bridge instance).</p>

<form method="POST" action="/config/rstp_msti_map" onsubmit="return checkForm(this);">

<fieldset>
<legend>Configuration Identification</legend>

<table summary="Configuration Identification" class="config">
 <tr class="config">
  <td class="param_label"><label for="name">Configuration Name</label></td>
  <td class="cl"><input type="text" id="name" name="name" maxlength="32"></td>
 </tr>
 <tr class="config">
  <td class="param_label"><label for="revision">Configuration Revision</label></td>
  <td class="cl"><input type="text" id="revision" name="revision" maxlength="5"></td>
 </tr>
</table>

</fieldset>

<fieldset>

<legend>MSTI Mapping</legend>

<table id="mstiConfig" summary="MSTI Mapping" class="config">
 <thead>
  <tr class="config_header">
   <th>MSTI</th>
   <th>VLANs Mapped</th>
  </tr>
 </thead>
 <tbody id="mstiData">
 </tbody>
</table>

</fieldset>

<p>
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>

</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
