<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Protocol based VLAN protocol to Group mapping</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">
 var help_page = "/help/help_vcl_protocol_2_grp_map.htm";
var timerID;
var timeOut = settingsRefreshInterval();

var oVftypeChoice = genArrayInt(1,3);
var ftypeChoices = Array("Ethernet","SNAP", "LLC");
var maxEntriesNum = configVCLProto2GrpMax - configVCLProto2GrpMin + 1;
var entryIdxArray = Array();
var originalEntriesNum, newEntriesNum;

var staticGrpNameArray = Array();
var staticFrmTypeArray = Array();
var staticValueArray = Array();

function addEntryIdx()
{
    var fld;

    for (var i = 1; i <= maxEntriesNum; i++) {
        fld = document.getElementById("delEntryIdx_" + i);
        if (!fld) {
            entryIdxArray[newEntriesNum++] = i;
            return i;
        }
    }
    return 0;
}

function delEntryIdx(id, tr)
{
    var values = id.split("_");
    var idx = parseInt(values[1]);

    for (var i = 0; i < newEntriesNum; i++) {
        if (idx == entryIdxArray[i]) {
            for (var j = i; j < newEntriesNum; j++) {
                entryIdxArray[j] = entryIdxArray[j + 1];
            }
            break;
        }
    }

    newEntriesNum--;
    document.getElementById('vlanData').deleteRow(tr.rowIndex);

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tbody = document.getElementById("vlanData");

    if (originalEntriesNum ==0 && newEntriesNum == 0) {
       clearChildNodes(tbody);
       addTblHeader(frag);
       // no entries found - Display that in the table
           tr = CreateStyledElement("tr","config_even");
           addTextCell(tr, "", "c");
           addTextCell(tr, "No Group entry found!", "c");
           addTextCell(tr, "", "c");
           addTextCell(tr, "", "c");
           frag.appendChild(tr);       // Add row to fragment
       tbody.appendChild(frag);
    }
}

function AddNewRow()
{
    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tbody = document.getElementById("vlanData");

    if (originalEntriesNum ==0 && newEntriesNum == 0) {
       clearChildNodes(tbody);
       addTblHeader(frag);
       tbody.appendChild(frag);
    }

    var entryIdx = addEntryIdx();
    if (entryIdx == 0) {
        alert("The maximum number of entries is " + maxEntriesNum);
        return;
    }
    if ((originalEntriesNum + newEntriesNum) > maxEntriesNum) {
        newEntriesNum--;
        alert("The maximum number of entries is " + maxEntriesNum);
        return;
    }

    var tr = CreateStyledElement("tr", (originalEntriesNum + entryIdx) % 2 ? "config_even" : "config_odd");

    var button = document.createElement('input');
    button.onclick = function() { delEntryIdx(this.id, tr); };
    button.id = "delEntryIdx_" + entryIdx;
    button.type = "button";
    button.value = " Delete ";
    var td = CreateTd("c");
    addCell(tr, td, button);

    //Frame type
    var sel = addSelectCell(tr, ftypeChoices, oVftypeChoice, 0, "cl", "Ftype_new_" +  entryIdx);
    sel.onchange = changeFilter;

    addValues (tr, frag, "E", entryIdx, "0800", "", "4", "", " Etype: 0x", "", "2", "1");
    addValues (tr, frag, "L", entryIdx, "FF", "FF", "2", "2", " DSAP: 0x", " SSAP: 0x", "1", "1");
    addValues (tr, frag, "S", entryIdx, "00-E0-2B", "0001", "8", "4", " OUI: 0x", " PID: 0x", "6", "2");

    var edit_ctrl_name = addInputCell(tr, "", "cr has_vlan_naming", "name_new_" + entryIdx, 16);
    edit_ctrl_name.setAttribute("maxLength", 16);

    frag.appendChild(tr);       // Add row to fragment

    if (!tbody.appendChild(frag)) { // Add Frag to table body
      alert("This browser doesn't support dynamic tables.");
    }
}

function addValues (tr, frag, Ftype_suffix, index, def_val_1, def_val_2, length_1, length_2, txt1, txt2, size1, size2) {
    //display this if Range is selected
    var td = CreateTd("cl");
    td.id="ValueTDFldID_" + Ftype_suffix + "_" + index;
    if (Ftype_suffix != "E")
        td.style.display="none";
    td.setAttribute("nowrap","nowrap");
    td.align="left";

    var value1_txt = document.createTextNode(txt1);
    td.appendChild(value1_txt);
    var input_value1 = document.createElement('input');
    input_value1.id = input_value1.name = "value1_" + Ftype_suffix + "_" + index;
    input_value1.setAttribute("size", size1);
    input_value1.setAttribute("maxLength", length_1);
    input_value1.value = def_val_1;
    td.appendChild(input_value1);
    td.setAttribute("nowrap","nowrap");
    if (def_val_2 != "" || length_2 != "" || txt2 != "") {
         var value2_txt = document.createTextNode(txt2);
         td.appendChild(value2_txt);
         var input_value2 = document.createElement('input');
         input_value2.id = input_value2.name = "value2_" + Ftype_suffix + "_" + index;
         input_value2.setAttribute("size", size2);
     input_value2.setAttribute("maxLength", length_2);
     input_value2.value = def_val_2;
         td.appendChild(input_value2);
    }
    tr.appendChild(td);
    frag.appendChild(tr);
}

function addRow(index, frag, values)
{
  staticFrmTypeArray[originalEntriesNum] = values[0];
  staticValueArray[originalEntriesNum] = values[1].toUpperCase();
  staticGrpNameArray[originalEntriesNum] = values[2];

  originalEntriesNum++;
  var frametype = values[0];
  var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
  //Delete checkbox
  addCheckBoxCell(tr, 0, "c", "delete_" + index);
  //Frame type
  var frmIdx = parseInt(frametype) - 1;
  var txt = addTextCell(tr, ftypeChoices[frmIdx], "");
  //Value

  var txt = addTextCell(tr, values[1].toUpperCase(), "");
  //Group ID
  var txt = addTextCell(tr, values[2], "cl");

  //var form_var = document.getElementById("vcl_protocol_2_grp_form");
  addHiddenParam(tr, "hiddenvalue_"+index, values[1]);

  frag.appendChild(tr);       // Add row to fragment
 }

 function isEthType(str, extra) {
    var myReg;

    if (!str) {
        return false;
    }

    myReg = /^[A-Fa-f0-9]{1,4}$/;

    var result = myReg.test(str);
    if (extra != "") {
     if (result) {
        var intFormat = parseInt("0x"+str);
        if (intFormat<0x600) {
            return false;
        }
     }
    }
    return result;
}


function changeFilter () { /* td.id="ValueTDFldID_" + Ftype_suffix + "_" + index; */
    var tempAry = this.id.split("_");
    var index = tempAry[1];
    if (index != "new")
        alert (index);
    else {
        index = tempAry[2];
    }

        var ele_ref1 = document.getElementById("ValueTDFldID_E_" + index);
        var ele_ref2 = document.getElementById("ValueTDFldID_L_" + index);
    var ele_ref3 = document.getElementById("ValueTDFldID_S_" + index);
        ele_ref1.style.display = "none";
        ele_ref2.style.display = "none";
        ele_ref3.style.display = "none";

    if (this.value == "1") {
                ele_ref1.style.display = "";
    } else if (this.value == "3") {
         ele_ref2.style.display = "";
    } else if (this.value == "2") {
                 ele_ref3.style.display = "";
    } else {
               alert ("Error: Wrong value of Frame type");
    }
}

var prev_req = "";
function processUpdate(req, ref)
{
 if (req != "" && req.responseText) {
  var len = entryIdxArray.length;
  if (len > 0) {
      entryIdxArray.splice(0, len);
  }
  /* take backup of previous req object */
  prev_req = req;
 //var valuesdommy = "Ethernet#LLC#SNAP,Ethernet/0800/ABC|LLC/FE-EE/CDE|SNAP/00-E0-2B-0001/FGH|";
 var ftypeAry = req.responseText.split(",");
 //var ftypeAry = valuesdommy.split(",");
 var portconfig = ftypeAry[1].split("|");
 // create holder for accumulated tbody elements and text nodes
 var frag = document.createDocumentFragment();
 addTblHeader(frag);
 originalEntriesNum = newEntriesNum = 0;
 if (portconfig != "") {
  for(var i = 0; i < portconfig.length; i++) {
    if(portconfig[i]) {
        var pval = portconfig[i].split("/");
    addRow(i, frag, pval);
    }
  }
 } else {
// no entries found - Display that in the table
        var tr = CreateStyledElement("tr","config_even");
        addTextCell(tr, "", "c");
        addTextCell(tr, "No Group entry found!", "c");
        addTextCell(tr, "", "c");
        addTextCell(tr, "", "c");
        frag.appendChild(tr);       // Add row to fragment

}
 var tbody = document.getElementById(ref);
 clearChildNodes(tbody);
 if (!tbody.appendChild(frag)) { // Add Frag to table body
    alert("This browser doesn't support dynamic tables.");
 }
 var autorefresh = document.getElementById('autorefresh');
 if (autorefresh.checked) {
    if (timerID) {
        clearTimeout(timerID);
    }
    timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
 }
 updateFuncBar(1);
 } else {
     SpomHandleError();
 }
}

function addTblHeader(fragment) {
    var tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr, "Delete", "param_label");
    var elem = addTextHeaderCell(tr, "Frame Type", "param_label");
    elem = addTextHeaderCell(tr, "Value", "param_label");
    elem = addTextHeaderCell(tr, "Group Name", "param_label");
    fragment.appendChild(tr);
}

function chkRefresh(fld) {
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate(0);
    }
}

function requestUpdate() {
    if(SpomNavigationLoading())
        return;         // Bail out, navigation will trigger update
    updateFuncBar(0);
    loadXMLDoc(SpomAddSidArg("/config/vcl_proto_2_grp_map"), processUpdate, 'vlanData');
    //SpomUpdateDisplaySid("display_sid");/* not required for global configuration */
    SpomUpdateFormSid("submit_sid");



}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

function checkName(sText)
{
    var ValidChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var ValidDigits = "0123456789";
    var IsValid = 0;
    var NumDigits = 0;
    var Char;

    for (var i = 0; i < sText.length; i++)
    {
        Char = sText.charAt(i);
        if (ValidDigits.indexOf(Char) == -1 || Char == "")
        {
            if (ValidChars.indexOf(Char) == -1 || Char == "")
            {
                return IsValid;
            }
        } else {
            NumDigits = NumDigits + 1;
        }
    }
    if (NumDigits != i) {
        IsValid = 1;
    }
    return IsValid;
}

function checkForm()
{
    //check new entries's
    var frmTypefld;
    var Valuefld1;
    var Valuefld2;
    var fullValueStrn;
    var GrpNamefld;
    for (var i = 1; i <= newEntriesNum; i++) {
        frmTypefld = document.getElementById("Ftype_new_" + entryIdxArray[i-1]);
        GrpNamefld = document.getElementById("name_new_" + entryIdxArray[i-1]);
        if (frmTypefld.value == "1") {// i.e. frame type == Ethernet

        Valuefld1 = document.getElementById("value1_E_" + entryIdxArray[i-1]);
        fullValueStrn = Valuefld1.value.toUpperCase();

        if (!isEthType(Valuefld1.value, "extra")) {
                      GiveAlert("The format of 'Ethernet Type Value' is '0x0600-0xFFFF'");
                      Valuefld1.select();
                      return false;
                }
        } else if (frmTypefld.value == "3") { /* format: DSAP-SSAP*/

                Valuefld1 = document.getElementById("value1_L_" + entryIdxArray[i-1]);
            Valuefld2 = document.getElementById("value2_L_" + entryIdxArray[i-1]);
                    fullValueStrn = Valuefld1.value.toUpperCase() + "-" + Valuefld2.value.toUpperCase();

                    /* Validate DSAP value */
                    if (!isEthType("FF" + Valuefld1.value, "")) {
                GiveAlert("The format of 'DSAP Address Value' is '0x00-0xFF' in DSAP-SSAP value pair");
                Valuefld1.select();
                            return false;
            }
            /* Validate SSAP value */
            if (!isEthType("FF" + Valuefld2.value, "")) {
                            GiveAlert("The format of 'SSAP Address Value' is '0x00-0xFF' in DSAP-SSAP value pair");
                Valuefld2.select();
                            return false;
            }

        } else if (frmTypefld.value == "2") {/* format: OUI-PID */

            Valuefld1 = document.getElementById("value1_S_" + entryIdxArray[i-1]);
            Valuefld2 = document.getElementById("value2_S_" + entryIdxArray[i-1]);
            fullValueStrn = Valuefld1.value.toUpperCase() + "-" + Valuefld2.value.toUpperCase();

            /* Validate OUI substring */
                    if (!isMacStr(Valuefld1.value + "-00-00-00")) {
                GiveAlert("The format of 'SMAC OUI Value' is 'xx-xx-xx'", Valuefld1);
                Valuefld1.select();
                            return false;
            }
            /* Validate PID substring 1*/
                    if (Valuefld1.value == "00-00-00") {
                       if (!isEthType(Valuefld2.value, "extra")) {
                            GiveAlert("The format of 'PID Value' is '0x0600-0xFFFF'");
                            Valuefld2.select();
                            return false;
                        }
                    } else {
                        if (!isEthType(Valuefld2.value, "")) {
                            GiveAlert("The format of 'PID Value' is '0x0000-0xFFFF'");
                            Valuefld2.select();
                            return false;
                }
                    }
        } else {
            alert ("wrong choice");
        }

        //Validate Group Name fields
        if (GrpNamefld.value != "") {
                  if (!checkName(GrpNamefld.value)) {
              GiveAlert("Invalid characters found. Please check help page for correct Group name format.");
              GrpNamefld.select();
                          return false;
          }
        } else {
            GiveAlert("Group Name field can not be empty. Please check help page for correct Group name format.");
            GrpNamefld.select();
                    return false;
        }

        //Check whether current Group id is existing in already stored static entries
            for (var js = 0; js < originalEntriesNum; js++) {
            if (frmTypefld.value == staticFrmTypeArray[js] && fullValueStrn == staticValueArray[js]) {
                          GiveAlert("Frame type: " + frmTypefld.value +" and value: "+ fullValueStrn + " is already mapped to Group ID: \'"+staticGrpNameArray[js]+"\'!");
                          Valuefld1.select();
                          return false;
                    }
            }
        //check the entry exist in new entries
        var nextValueStrn;
        for (var jn = i + 1; jn <= newEntriesNum; jn++) {
         var nextGrpName = document.getElementById("name_new_"+ entryIdxArray[jn-1]).value;
         var nextFrmType = document.getElementById("Ftype_new_"+entryIdxArray[jn-1]).value;

         if (nextFrmType == "1") {// i.e. frame type == Ethernet
                     nextValueStrn = document.getElementById("value1_E_" + entryIdxArray[jn-1]).value.toUpperCase();
         } else if (nextFrmType == "2") {
                    Valuefld1 = document.getElementById("value1_S_" + entryIdxArray[jn-1]);
            Valuefld2 = document.getElementById("value2_S_" + entryIdxArray[jn-1]);
            nextValueStrn = Valuefld1.value.toUpperCase() + "-" + Valuefld2.value.toUpperCase();
         } else if (nextFrmType == "3") {
                    var nextValuefld1 = document.getElementById("value1_L_" + entryIdxArray[jn-1]);
            var nextValuefld2 = document.getElementById("value2_L_" + entryIdxArray[jn-1]);
            nextValueStrn = nextValuefld1.value.toUpperCase() + "-" + nextValuefld2.value.toUpperCase();
         } else {
             alert ("invalid frame type");
         }
                 if (frmTypefld.value == nextFrmType && nextValueStrn == fullValueStrn) {
                     GiveAlert("You can not create more than one new Entries with same values of:- Frame type: " + frmTypefld.value +" and Value: "+ fullValueStrn + " !");
                     Valuefld1.select();
                     return false;
                 }
            }

        }//Main for loop
}

function updateFuncBar(enable)
{
    if (enable) {
        document.getElementById("refresh").style.visibility = "visible";
        document.getElementById("update").style.visibility = "hidden";
    } else {
        document.getElementById("refresh").style.visibility = "hidden";
        document.getElementById("update").style.visibility = "visible";
    }
}

</script>
</head>

<body class="content" onload="requestUpdate();">
<div class="refreshbar">
<form action="#">
<label for="autorefresh">Auto-refresh</label>
<input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
 <input type="button" id="refresh" value="Refresh" onClick="requestUpdate(); this.blur(); " style="visibility:hidden">
  <span id="update">&nbsp;Updating...</span>
 </form>
</div>

<h1>Protocol to Group Mapping Table <span id="display_sid"></span></h1>

<form id="vcl_protocol_2_grp_form" method="POST" action="/config/vcl_proto_2_grp_map" onsubmit="return checkForm();">

<table id="vclConfig" summary="VCL Protocol to Group Configuration" class="config">
 <tbody id="vlanData">
 </tbody>
</table>
<p>
<input type="button" id="addNewEntry" value="Add New Entry" onclick="AddNewRow()">
</p>
<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="submit" value="Save">
<input type="reset" value="Reset" onClick="processUpdate(prev_req, 'vlanData'); this.blur(); ">
</p>

</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
