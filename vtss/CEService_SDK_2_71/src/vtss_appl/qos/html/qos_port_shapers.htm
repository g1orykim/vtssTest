<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>QoS Egress Port Shapers</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_qos_port_shapers.htm";

function shaperToText(values) {
  var s = values.split("|");

  if (parseInt(s[0], 10) === 0) {
    return "disabled";
  }

  var rate = parseInt(s[1], 10);
  if (rate < 10000) {
    return rate + " kbps";
  }
  else {
    return Math.floor(rate/1000) + " Mbps";
  }
}

function addRow(index, frag, values) {
  var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
  var config  = values.split("#");

  if (config.length > 2) {
    var portno        = parseInt(config[0], 10);
    var queue_shapers = config[1].split("/"); 
    var port_shaper   = config[2]; 

    if (queue_shapers.length > 1) {
      var td = CreateStyledElement("td", "cr");
      var txt = document.createTextNode(configPortName(portno, 0));
      var link = document.createElement("a");
      link.href = "qos_port_scheduler_edit.htm?port=" + portno;
      link.appendChild(txt); // Add text to link
      td.appendChild(link);  // Add link to cell
      tr.appendChild(td);    // Add cell to row

      for (var i = 0; i < queue_shapers.length; i++) {
        addTextCell(tr, shaperToText(queue_shapers[i]), "cr");
      }
      addTextCell(tr, shaperToText(port_shaper), "cr");

      frag.appendChild(tr);    // Add row to fragment
    }
  }
}

/*
 * Format:
 * <port 1>,<port 2>,<port 3>,...<port n>
 * 
 * port x          :== <port_no>#<queue_shapers>#<port_shaper>
 *   port_no       :== 1..max
 *   queue_shapers :== <shaper_1>/<shaper_2>/...<shaper_n>                 // n is 8.
 *     shaper_x    :== <enable|rate>
 *       enable    :== 0..1           // 0: Shaper is disabled, 1: Shaper is disabled
 *       rate      :== 0..0xffffffff  // Actual bit rate in kbps
 *   port_shaper   :== <enable|rate>
 *     enable      :== 0..1           // 0: Shaper is disabled, 1: Shaper is disabled
 *     rate        :== 0..0xffffffff  // Actual bit rate in kbps
 */
function processUpdate(req, ref)
{
  var frag;
  var tr;
  var elem;

  if (redirectOnError(req)) {
    return;
  }

  if (req.responseText) {
    var input = req.responseText;
    var values = input.split(",");
    var nrOfQueueShapers = values[0].split("#")[1].split("/").length; // determine the number of queue shapers from the first port
    var i;

    // Create Port QoS Table Header
    frag = document.createDocumentFragment();

    tr = document.createElement("tr");
    elem = addTextHeaderCell(tr, "Port", "cl");
    elem.setAttribute("rowSpan", "2");
    elem = addTextHeaderCell(tr, "Shapers", "cl", nrOfQueueShapers + 1); // Add one extra for the port shaper
    frag.appendChild(tr);

    tr = document.createElement("tr");
    for (i = 0; i < nrOfQueueShapers; i++) {
      addTextHeaderCell(tr, "Q" + i, "cl");
    }
    elem = addTextHeaderCell(tr, "Port", "cl");
    frag.appendChild(tr);

    elem = document.getElementById("qos_thead");
    clearChildNodes(elem);
    elem.appendChild(frag);

    // Create Port QoS Table Body
    frag = document.createDocumentFragment();
    for (i = 0; i < values.length; i++) {
      addRow(i, frag, values[i]);
    }
    elem = document.getElementById(ref);
    clearChildNodes(elem);
    elem.appendChild(frag);
  } else {
    SpomHandleError();
  }
}

function requestUpdate() {
  if (SpomNavigationLoading()) {
    return;                 // Bail out, navigation will trigger update
  }
  loadXMLDoc(SpomAddSidArg("/config/qos_port_shapers"), processUpdate, "qos_tbody");
  SpomUpdateDisplaySid("display_sid");
}

function SpomSidSelectorUpdate(sid)
{
  SpomSetCurrentSid(sid);     // Save current SID
  requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<h1>QoS Egress Port Shapers <span id="display_sid"></span></h1>

<table summary="QoS Port Shaper Configuration" cellspacing="0" class="config">
 <thead id="qos_thead">
 </thead>
 <tbody id="qos_tbody">
 </tbody>
</table>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
