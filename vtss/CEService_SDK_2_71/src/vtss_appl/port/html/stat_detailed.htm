<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 
 Vitesse Switch Software.
 
 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Detailed Port Statistics</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

var timerID;

// Help page magic
var help_page = "/help/help_stat_detailed.htm";

var selectedPort = configPortMin;
var pageArgs = searchArgs(window.location.search);
if(pageArgs['port'])
    selectedPort = parseInt(pageArgs['port']);

function contentUpdate(req, ref)
{
    // Format: 1,24,1/0/2/0/128/0/0/0/0|2/0/0/0/0/0/2|3/0/0|4/0/2/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0|5/0/0
    var input = req.responseText;
    var values = input.split(",");
    if(values.length == 3) {
        var port = parseInt(values[0]);
        var maxport = parseInt(values[1]);
        var statdata = values[2].split("|");
        UpdateSelect(maxport);
        for(var i = 0; i < statdata.length; i++) {
            var counters = statdata[i].split("/");
            var group = counters[0];
            for(var j = 1; j < counters.length; j++) {
                var id = "T" + "_" + group + "_" + j;
                UpdateId(id, counters[j]);
            }
        }
        var portid = document.getElementById("port");
        if(portid)
            portid.innerHTML = configPortName(port, 1);
        var autorefresh = document.getElementById('autorefresh');
        if(autorefresh && autorefresh.checked) {
            if(timerID)
                clearTimeout(timerID);
            timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
        }
    } else {
        SpomHandleError();
    }
    document.getElementById("update").style.visibility = "hidden";
}

function requestUpdate() {
    document.getElementById("update").style.visibility = "visible";
    if(SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update
    loadXMLDoc(SpomAddSidArg("/stat/port?port=" + selectedPort), contentUpdate, null);
    SpomUpdateDisplaySid("sid_display");
}

function requestClear() {
    document.getElementById("update").style.visibility = "visible";
    loadXMLDoc(SpomAddSidArg("/stat/port?clear=1&port=" + selectedPort), contentUpdate, null);
}

function PortSelect(sel)
{
    selectedPort = sel.options[sel.selectedIndex].value; 
    requestUpdate();
}

function chkRefresh(fld)
{
    if(!fld.checked) {
        if(timerID)
            clearTimeout(timerID);
        timerID = null;
    } else
        requestUpdate();
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    selectedPort = SpomUpdatePortSelector("portselect", selectedPort);
    requestUpdate();            // Update page to reflect selector
}

function addRxTxRow(index, frag, txt, rxId, txId)
{
    var tr = CreateStyledElement("tr", index % 2 ? "display_odd" : "display_even");
    addTextCell(tr, "Rx " + txt, "displaytext");
    var elem = addTextCell(tr, "0", "cr");
    elem.id = rxId;
    addTextCell(tr, "Tx " + txt, "displaytext");
    elem = addTextCell(tr, "0", "cr");
    elem.id = txId;
    frag.appendChild(tr);
}

function UpdateSelect(unitMax)
{
    selectedPort = SpomUpdatePortSelector("portselect", selectedPort, true);
}

function docLoad()
{
    UpdateSelect(configNormalPortMax);
    if (typeof(configQosClassMax) != 'undefined') {
        // Create the QoS counter rows dynamically - they are platform dependent
        frag = document.createDocumentFragment();
        var tr = CreateStyledElement("tr", "display_header");
        var elem = addTextHeaderCell(tr, "Receive Queue Counters", "hdrc");
        elem.setAttribute("colSpan", 2);
        elem = addTextHeaderCell(tr, "Transmit Queue Counters", "hdrc");
        elem.setAttribute("colSpan", 2);
        frag.appendChild(tr);

        if (configQosClassMax == 4) {
            addRxTxRow(0, frag, "Low",    "T_7_1", "T_7_2");
            addRxTxRow(1, frag, "Normal", "T_7_3", "T_7_4");
            addRxTxRow(2, frag, "Medium", "T_7_5", "T_7_6");
            addRxTxRow(3, frag, "High",   "T_7_7", "T_7_8");
        }
        else {
            for (var i = 0; i < configQosClassMax; i++) {
                addRxTxRow(i, frag, "Q" + i, "T_7_" + ((i*2) + 1), "T_7_" + ((i*2) + 2));
            }
        }
        addFragment(frag, "qos_counters", 1);
    }

    requestUpdate();
}

</script>

</head>

<body class="content" onload="docLoad();">

<h1>Detailed Port Statistics <span id="sid_display"></span><span>&nbsp;</span><span id="port"></span></h1>

<div class="refreshbar">
 <form action="#">
  <select id="portselect" onchange="PortSelect(this);">
    <option value="1">Port 1</option>
    <option value="99">Port 99</option>
   </select>
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
  <input type="button" value="Refresh" onClick="requestUpdate(); this.blur();">
  <input type="button" value="Clear"   onClick="requestClear();  this.blur();">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

  <table summary="Detailed Switch Port Counters" width="90%" class="display">
    <tbody>
      <tr class="display_header">
        <th colspan="2" class="hdrc">Receive Total</th>
        <th colspan="2" class="hdrc">Transmit Total</th>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Packets</td>
        <td class="cr" id="T_1_1">0</td>
        <td class="displaytext">Tx Packets</td>
        <td class="cr" id="T_1_2">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx Octets</td>
        <td class="cr" id="T_1_3">0</td>
        <td class="displaytext">Tx Octets</td>
        <td class="cr" id="T_1_4">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Unicast</td>
        <td class="cr" id="T_2_1">0</td>
        <td class="displaytext">Tx Unicast</td>
        <td class="cr" id="T_2_2">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx Multicast</td>
        <td class="cr" id="T_2_3">0</td>
        <td class="displaytext">Tx Multicast</td>
        <td class="cr" id="T_2_4">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Broadcast</td>
        <td class="cr" id="T_2_5">0</td>
        <td class="displaytext">Tx Broadcast</td>
        <td class="cr" id="T_2_6">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx Pause</td>
        <td class="cr" id="T_3_1">0</td>
        <td class="displaytext">Tx Pause</td>
        <td class="cr" id="T_3_2">0</td>
      </tr>

      <tr class="display_header">
        <th colspan="2" class="hdrc">Receive Size Counters</th>
        <th colspan="2" class="hdrc">Transmit Size Counters</th>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx 64 Bytes</td>
        <td class="cr" id="T_4_1">0</td>
        <td class="displaytext">Tx 64 Bytes</td>
        <td class="cr" id="T_4_2">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx 65-127 Bytes</td>
        <td class="cr" id="T_4_3">0</td>
        <td class="displaytext">Tx 65-127 Bytes</td>
        <td class="cr" id="T_4_4">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx 128-255 Bytes</td>
        <td class="cr" id="T_4_5">0</td>
        <td class="displaytext">Tx 128-255 Bytes</td>
        <td class="cr" id="T_4_6">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx 256-511 Bytes</td>
        <td class="cr" id="T_4_7">0</td>
        <td class="displaytext">Tx 256-511 Bytes</td>
        <td class="cr" id="T_4_8">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx 512-1023 Bytes</td>
        <td class="cr" id="T_4_9">0</td>
        <td class="displaytext">Tx 512-1023 Bytes</td>
        <td class="cr" id="T_4_10">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx 1024-1526 Bytes</td>
        <td class="cr" id="T_4_11">0</td>
        <td class="displaytext">Tx 1024-1526 Bytes</td>
        <td class="cr" id="T_4_12">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx 1527- Bytes</td>
        <td class="cr" id="T_5_1">0</td>
        <td class="displaytext">Tx 1527- Bytes</td>
        <td class="cr" id="T_5_2">0</td>
      </tr>

    </tbody>

    <tbody class="has_qos" id="qos_counters">
    </tbody>

    <tbody>
      <tr class="display_header">
        <th colspan="2" class="hdrc">Receive Error Counters</th>
        <th colspan="2" class="hdrc">Transmit Error Counters</th>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Drops</td>
        <td class="cr" id="T_1_5">0</td>
        <td class="displaytext">Tx Drops</td>
        <td class="cr" id="T_1_6">0</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx CRC/Alignment</td>
        <td class="cr" id="T_4_13">0</td>
        <td class="displaytext">Tx Late/Exc. Coll.</td>
        <td class="cr" id="T_1_8">0</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Undersize</td>
        <td class="cr" id="T_4_15">0</td>
        <td class="cr">&nbsp;</td>
        <td class="cr">&nbsp;</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx Oversize</td>
        <td class="cr" id="T_4_16">0</td>
        <td class="cr">&nbsp;</td>
        <td class="cr">&nbsp;</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Fragments</td>
        <td class="cr" id="T_4_17">0</td>
        <td class="cr">&nbsp;</td>
        <td class="cr">&nbsp;</td>
      </tr>

      <tr class="display_odd">
        <td class="displaytext">Rx Jabber</td>
        <td class="cr" id="T_4_18">0</td>
        <td class="cr">&nbsp;</td>
        <td class="cr">&nbsp;</td>
      </tr>

      <tr class="display_even">
        <td class="displaytext">Rx Filtered</td>
        <td class="cr" id="T_8_1">0</td>
        <td class="cr">&nbsp;</td>
        <td class="cr">&nbsp;</td>
      </tr>

    </tbody>
  </table>
</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
