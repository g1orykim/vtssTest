<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2014 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Port Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/MasterControl.js"></script>
 <script type="text/javascript">



// Help page magic
var help_page = "/help/help_port_power_savings_config.htm";
var queue_cnt = 0;

var eee_supported  = false;

// Add a row to the port configuration table
function addRow(index, frag, values)
{
    // Format: port_no/eee/capable/eee_enabled/fast_queue_mask
    var pval            = values.split("/");
    var port_no         =          pval[0];
    var eee_capable     = parseInt(pval[1], 10);
    var eee_enabled     =          pval[2];
    var fast_queue_mask = parseInt(pval[3], 10);
    var actiPhyCapable  = parseInt(pval[4], 10);
    var actiPhy         =          pval[5];
    var perfectReachCapable = parseInt(pval[6], 10);
    var perfectReach    =          pval[7];

    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");

    if (!eee_capable) {
        eee_enabled = 0;
        fast_queue_mask = 0;
    }

    // Add port to table
    addTextCell(tr, port_no, "cr");


    // Add ActiPHY checkbox
    var checkbox = addCheckBoxCell(tr, parseInt(actiPhy, 10), "c", "actiPhy_" + port_no);
    if (!actiPhyCapable) {
        checkbox.disabled = true;
    }


    // Add PerfectReach checkbox
    checkbox = addCheckBoxCell(tr, parseInt(perfectReach, 10), "c", "perfectReach_" + port_no);
    if (!perfectReachCapable) {
        checkbox.disabled = true;
    }

    if (eee_supported) {
        // Add enable checkbox
        checkbox = addCheckBoxCell(tr, parseInt(eee_enabled, 10), "c", "eee_enabled_" + port_no);
        if (!eee_capable) {
            checkbox.disabled = true;
        }
        
        // Added eee urgent  queues checkboxes
        for (var queue = 0; queue < queue_cnt; queue++) {
            checkbox = addCheckBoxCell(tr, fast_queue_mask & (1 << queue), "c", "queue_" + queue + "_" + port_no);
            if (!eee_capable) {
                checkbox.disabled = true;
            }
        }
    }
    frag.appendChild(tr);       // Add row to fragment
}
    
// Create table header for the port configuration table.
function CreatePortsTableHeader(frag)
{
    var tr;
    clearChildNodes(document.getElementById('port_head')); // Delete table if it already exists

    if (eee_supported) {
        if (queue_cnt > 0) {
            tr = CreateStyledElement("tr", "config_header");
            addTextHeaderCell(tr, "", "hdrc", 4);
            addTextHeaderCell(tr, "EEE Urgent Queues", "hdrc", queue_cnt);
            frag.appendChild(tr);       // Add row to fragment
        }
    }

    tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr,"Port","hdrc", 1);
    addTextHeaderCell(tr,"ActiPHY","hdrc", 1);
    addTextHeaderCell(tr,"PerfectReach","hdrc", 1);
    
    if (eee_supported) {
        addTextHeaderCell(tr,"EEE","hdrc",1);
        if (queue_cnt > 0) {
            // Add the queue numbers
            for(var queue = 1; queue <= queue_cnt; queue++) {
                addTextHeaderCell(tr, queue, "hdrc", 1);
            }
        }
    }

    frag.appendChild(tr);
}

// Update the port configuration table
function UpdateTable(config)
{
    // Create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    CreatePortsTableHeader(frag);
    FinishTable(frag, 'port_head');
    frag = document.createDocumentFragment();
    var pval = config.split("&");
    for (var i = 0; i < pval.length; i++) {
        if (pval[i].length) {
            addRow(i, frag, pval[i]);
        }
    }
    FinishTable(frag, 'port_body');
}

// Update when web page is loaded
function processUpdate(req)
{
    // The data is split like this: err_msg|queue_cnt|port_1_configuration&port_2_configuration&......&port_n_configuration
    // The port configuration data is split like this: port_no/eee_capable/eee_enabled/fast_queue_mask

    if (redirectOnError(req)) {
        return;
    }

    if (req.responseText) {
        // Get and set configurations settings
        var config = req.responseText.split("|");


        // Error message
        var err_msg = config[0];
        if (err_msg !== "") {
            alert(err_msg);
        }

        eee_supported = parseInt(config[1],10);

        queue_cnt = config[2]; // Get number of queues (queue_cnt is a global variable)
        document.getElementById("OptimizeForPower").value = parseInt(config[3], 10);
        
        // Create the table
        UpdateTable(config[4]);

        // Insert the Global config row.
        var cBar = new MasterControlBar([{text: "*", className: "cr"}]);

        cBar.extend([{name: "actiPhy_"}]);
        cBar.extend([{name: "perfectReach_"}]);

        if (eee_supported) {
            cBar.extend([{name: "eee_enabled_"}]);
            
            for (var queue = 0; queue < queue_cnt; queue++) {
                cBar.extend([{name: "queue_" + queue}]);
            }
            
        }
        
        cBar.construct('port_body', 'config_odd');
    } else {
        SpomHandleError();
    }
}

// Check all input when "save" button is pressed.
function checkForm(form)
{
    return true;                // Feed the chickens and go home
}

// Request update
function requestUpdate()
{
    if (SpomNavigationLoading()) {
        return;                 // Bail out, navigation will trigger update
    }
    loadXMLDoc(SpomAddSidArg("/config/port_power_savings_config"), processUpdate);
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

// Check if the switch in the stack is changed.
function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}
 </script>
</head>

<body class="content" onload="requestUpdate();">
<h1>Port Power Savings Configuration</h1>

<form name="ConfigForm" method="POST" action="/config/port_power_savings_config" onsubmit="if (!checkForm()) { return false; } changeForm('grayOut');">


<table id="qconfig" summary="Switch Default Class Configuration" class="config EEE_OPTIMIZE_SUPPORT">
 <tbody>
  <tr class="config">
   <td class="param_label"><label accesskey="P" for="OptimizeForPower">Optimize EEE for</label></td>
   <td>
    <select id="OptimizeForPower" name="OptimizeForPower" style="width: 7em;">
       <option value="1">Power</option>
       <option value="0">Latency</option>
    </select>
   </td>
  </tr>
 </tbody>
</table>

<h2>Port Configuration<span id="display_sid"></span></h2>

<table id="config" summary="Switch Port Configuration" class="config">
  <tbody id="port_head"></tbody>
  <tbody id="port_body"></tbody>
</table>
<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="submit" value="Save">
<input type="reset" value="Reset">
<!-- Avoid both checkedbox are none checked -->
<!-- <input type="hidden" name="dummy"> -->
</p>
</form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
