<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>System Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_dst_config.htm";

var reqObject;
var global_offset_value = 1;
var oTMode = Array("Disabled", "Recurring", "Non-Recurring");
var oVMode = Array(0, 1, 2);
var oTWeek = genArrayStr(1, 5);
var oVWeek = genArrayInt(1, 5);
var oTDay = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");
var oVDay = genArrayInt(1, 7);
var oTMon = Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
var oVMon = genArrayInt(1, 12);
var oTHours = genArrayStr(0, 23);
var oVHours = genArrayInt(0, 23);
var oTMinutes = genArrayStr(0, 59);
var oVMinutes = genArrayInt(0, 59);
var oTDate = genArrayStr(1, 31);
var oVDate = genArrayInt(1, 31);
var oTYear = genArrayStr(2000, 2097);
var oVYear = genArrayInt(2000, 2097);

var trIDs  = Array("trWeekS", "trDayS", "trMonthS", "trDateS", "trYearS", "trHoursS", "trMinutesS", "trWeekE", "trDayE", "trMonthE", "trDateE", "trYearE", "trHoursE", "trMinutesE", "trOffset");
var tdIDs  = Array("week_s",  "day_s",  "month_s",  "date_s",  "year_s",  "hours_s",  "minutes_s",  "week_e",  "day_e",  "month_e",  "date_e",  "year_e",  "hours_e",  "minutes_e",  "offset");

var oTTimeZone = Array("None",
"(GMT-12:00) International Date Line West",
"(GMT-11:00) Midway Island, Samoa",
"(GMT-10:00) Hawaii",
"(GMT-09:00) Alaska",
"(GMT-08:00) Pacific Time (US and Canada)",
"(GMT-08:00) Tijuana, Baja California",
"(GMT-07:00) Arizona",
"(GMT-07:00) Chihuahua, La Paz, Mazatlan - New",
"(GMT-07:00) Chihuahua, La Paz, Mazatlan - Old",
"(GMT-07:00) Mountain Time (US and Canada)",
"(GMT-06:00) Central America",
"(GMT-06:00) Central Time (US and Canada)",
"(GMT-06:00) Guadalajara, Mexico City, Monterrey - New",
"(GMT-06:00) Guadalajara, Mexico City, Monterrey - Old",
"(GMT-06:00) Saskatchewan",
"(GMT-05:00) Bogota, Lima, Quito, Rio Branco",
"(GMT-05:00) Eastern Time (US and Canada)",
"(GMT-05:00) Indiana (East)",
"(GMT-04:30) Caracas",
"(GMT-04:00) Atlantic Time (Canada)",
"(GMT-04:00) La Paz",
"(GMT-04:00) Manaus",
"(GMT-04:00) Santiago",
"(GMT-03:30) Newfoundland",
"(GMT-03:00) Brasilia",
"(GMT-03:00) Buenos Aires",
"(GMT-03:00) Georgetown",
"(GMT-03:00) Greenland",
"(GMT-03:00) Montevideo",
"(GMT-02:00) Mid-Atlantic",
"(GMT-01:00) Azores",
"(GMT-01:00) Cape Verde Is.",
"(GMT) Casablanca",
"(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London",
"(GMT) Monrovia, Reykjavik",
"(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
"(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
"(GMT+01:00) Brussels, Copenhagen, Madrid, Paris",
"(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
"(GMT+01:00) West Central Africa",
"(GMT+02:00) Amman",
"(GMT+02:00) Athens, Bucharest, Istanbul",
"(GMT+02:00) Beirut",
"(GMT+02:00) Cairo",
"(GMT+02:00) Harare, Pretoria",
"(GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius",
"(GMT+02:00) Jerusalem",
"(GMT+02:00) Minsk",
"(GMT+02:00) Windhoek",
"(GMT+03:00) Baghdad",
"(GMT+03:00) Kuwait, Riyadh",
"(GMT+03:00) Moscow, St. Petersburg, Volgograd",
"(GMT+03:00) Nairobi",
"(GMT+03:00) Tbilisi",
"(GMT+03:30) Tehran",
"(GMT+04:00) Abu Dhabi, Muscat",
"(GMT+04:00) Baku",
"(GMT+04:00) Caucasus Standard Time",
"(GMT+04:00) Port Louis",
"(GMT+04:00) Yerevan",
"(GMT+04:30) Kabul",
"(GMT+05:00) Ekaterinburg",
"(GMT+05:00) Islamabad, Karachi",
"(GMT+05:00) Tashkent",
"(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
"(GMT+05:30) Sri Jayawardenepura",
"(GMT+05:45) Kathmandu",
"(GMT+06:00) Almaty, Novosibirsk",
"(GMT+06:00) Astana, Dhaka",
"(GMT+06:30) Yangon (Rangoon)",
"(GMT+07:00) Bangkok, Hanoi, Jakarta",
"(GMT+07:00) Krasnoyarsk",
"(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
"(GMT+08:00) Irkutsk, Ulaan Bataar",
"(GMT+08:00) Kuala Lumpur, Singapore",
"(GMT+08:00) Perth",
"(GMT+08:00) Taipei",
"(GMT+09:00) Osaka, Sapporo, Tokyo",
"(GMT+09:00) Seoul",
"(GMT+09:00) Yakutsk",
"(GMT+09:30) Adelaide",
"(GMT+09:30) Darwin",
"(GMT+10:00) Brisbane",
"(GMT+10:00) Canberra, Melbourne, Sydney",
"(GMT+10:00) Guam, Port Moresby",
"(GMT+10:00) Hobart",
"(GMT+10:00) Vladivostok",
"(GMT+11:00) Magadan, Solomon Is., New Caledonia",
"(GMT+12:00) Auckland, Wellington",
"(GMT+12:00) Fiji, Kamchatka, Marshall Is.");
//"(GMT+13:00) Nuku'alofa"

var oVTimeZone = Array(0,
-7200, /* (GMT-12:00) International Date Line West                         */
-6600, /* (GMT-11:00) Midway Island, Samoa                                 */
-6000, /* (GMT-10:00) Hawaii                                               */
-5400, /* (GMT-09:00) Alaska                                               */
-4800, /* (GMT-08:00) Pacific Time (US and Canada)                         */
-4801, /* (GMT-08:00) Tijuana, Baja California                             */
-4200, /* (GMT-07:00) Arizona                                              */
-4201, /* (GMT-07:00) Chihuahua, La Paz, Mazatlan - New                    */
-4202, /* (GMT-07:00) Chihuahua, La Paz, Mazatlan - Old                    */
-4203, /* (GMT-07:00) Mountain Time (US and Canada)                        */
-3600, /* (GMT-06:00) Central America                                      */
-3601, /* (GMT-06:00) Central Time (US and Canada)                         */
-3602, /* (GMT-06:00) Guadalajara, Mexico City, Monterrey - New            */
-3603, /* (GMT-06:00) Guadalajara, Mexico City, Monterrey - Old            */
-3604, /* (GMT-06:00) Saskatchewan                                         */
-3000, /* (GMT-05:00) Bogota, Lima, Quito, Rio Branco                      */
-3001, /* (GMT-05:00) Eastern Time (US and Canada)                         */
-3002, /* (GMT-05:00) Indiana (East)                                       */
-2700, /* (GMT-04:30) Caracas                                              */
-2400, /* (GMT-04:00) Atlantic Time (Canada)                               */
-2401, /* (GMT-04:00) La Paz                                               */
-2402, /* (GMT-04:00) Manaus                                               */
-2403, /* (GMT-04:00) Santiago                                             */
-2100, /* (GMT-03:30) Newfoundland                                         */
-1800, /* (GMT-03:00) Brasilia                                             */
-1801, /* (GMT-03:00) Buenos Aires                                         */
-1802, /* (GMT-03:00) Georgetown                                           */
-1803, /* (GMT-03:00) Greenland                                            */
-1804, /* (GMT-03:00) Montevideo                                           */
-1805, /* (GMT-02:00) Mid-Atlantic                                         */
 -600, /* (GMT-01:00) Azores                                               */
 -601, /* (GMT-01:00) Cape Verde Is.                                       */
    1, /* (GMT) Casablanca                                                 */
    2, /* (GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London    */
    3, /* (GMT) Monrovia, Reykjavik                                        */
  600, /* (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna     */
  601, /* (GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague    */
  602, /* (GMT+01:00) Brussels, Copenhagen, Madrid, Paris                  */
  603, /* (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb                     */
  604, /* (GMT+01:00) West Central Africa                                  */
 1200, /* (GMT+02:00) Amman                                                */
 1201, /* (GMT+02:00) Athens, Bucharest, Istanbul                          */
 1202, /* (GMT+02:00) Beirut                                               */
 1203, /* (GMT+02:00) Cairo                                                */
 1204, /* (GMT+02:00) Harare, Pretoria                                     */
 1205, /* (GMT+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius        */
 1206, /* (GMT+02:00) Jerusalem                                            */
 1207, /* (GMT+02:00) Minsk                                                */
 1208, /* (GMT+02:00) Windhoek                                             */
 1800, /* (GMT+03:00) Baghdad                                              */
 1801, /* (GMT+03:00) Kuwait, Riyadh                                       */
 1802, /* (GMT+03:00) Moscow, St. Petersburg, Volgograd                    */
 1803, /* (GMT+03:00) Nairobi                                              */
 1804, /* (GMT+03:00) Tbilisi                                              */
 2100, /* (GMT+03:30) Tehran                                               */
 2400, /* (GMT+04:00) Abu Dhabi, Muscat                                    */
 2401, /* (GMT+04:00) Baku                                                 */
 2402, /* (GMT+04:00) Caucasus Standard Time                               */
 2403, /* (GMT+04:00) Port Louis                                           */
 2404, /* (GMT+04:00) Yerevan                                              */
 2700, /* (GMT+04:30) Kabul                                                */
 3000, /* (GMT+05:00) Ekaterinburg                                         */
 3001, /* (GMT+05:00) Islamabad, Karachi                                   */
 3002, /* (GMT+05:00) Tashkent                                             */
 3300, /* (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi                  */
 3301, /* (GMT+05:30) Sri Jayawardenepura                                  */
 3455, /* (GMT+05:45) Kathmandu                                            */
 3600, /* (GMT+06:00) Almaty, Novosibirsk                                  */
 3601, /* (GMT+06:00) Astana, Dhaka                                        */
 3600, /* (GMT+06:30) Yangon (Rangoon)                                     */
 4200, /* (GMT+07:00) Bangkok, Hanoi, Jakarta                              */
 4201, /* (GMT+07:00) Krasnoyarsk                                          */
 4800, /* (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi                */
 4801, /* (GMT+08:00) Irkutsk, Ulaan Bataar                                */
 4802, /* (GMT+08:00) Kuala Lumpur, Singapore                              */
 4803, /* (GMT+08:00) Perth                                                */
 4804, /* (GMT+08:00) Taipei                                               */
 5400, /* (GMT+09:00) Osaka, Sapporo, Tokyo                                */
 5401, /* (GMT+09:00) Seoul                                                */
 5402, /* (GMT+09:00) Yakutsk                                              */
 5700, /* (GMT+09:30) Adelaide                                             */
 5701, /* (GMT+09:30) Darwin                                               */
 6000, /* (GMT+10:00) Brisbane                                             */
 6001, /* (GMT+10:00) Canberra, Melbourne, Sydney                          */
 6002, /* (GMT+10:00) Guam, Port Moresby                                   */
 6003, /* (GMT+10:00) Hobart                                               */
 6004, /* (GMT+10:00) Vladivostok                                          */
 6600, /* (GMT+11:00) Magadan, Solomon Is., New Caledonia                  */
 7200, /* (GMT+12:00) Auckland, Wellington                                 */
 7201  /* (GMT+12:00) Fiji, Kamchatka, Marshall Is.                        */);

/*
function isAcronymStr(str)
{
    if (!str) {
        return true;
    }

    var myReg = /^[A-Za-z0-9\-\.]{0,}$/;
    return myReg.test(str);
}
*/

function checkForm()
{

    var fld = document.getElementById("acronym");
    if (fld) {
        if (fld.value.length > 16) {
            GiveAlert("Error! Invalid String:Unable to set 'Acronym' more than 16 characters.", fld);
            return false;
        }
/*
        if (!isAcronymStr(fld.value)) {
            GiveAlert("Error! Invalid input for 'Acronym'. It is restricted to 16 alpha-numeric characters and can contain '-' or '.'.", fld);
            return false;
        }
*/
    }

    if(!isWithinRange("offset", 1, 1440, "'Offset setting'")) {
            return false;
    }

    return true;
}

function createModeTblHeader(frag, id, header_str)
{
    var tr = CreateStyledElement("tr", "config_header");
    tr.id = tr.name = id;
    addTextHeaderCell(tr, header_str, "hdrl", 2);
    frag.appendChild(tr);
}

function onchangeMode()
{
    var fld_value = document.getElementById("mode").value;

    //mode: 0/disabled, 1/recurring, 2/non-recurring
    for (var i = 0; i < trIDs.length; i++) {
        if (parseInt(fld_value, 10) === 0) {
            if (i <= 1 || i == 7 || i == 8) {
                document.getElementById(trIDs[i]).style.display = "none";
            } else {
                document.getElementById(trIDs[i]).style.display = "";
            }
            document.getElementById(tdIDs[i]).disabled = true;
        } else {
            document.getElementById(trIDs[i]).style.display = "";
            document.getElementById(tdIDs[i]).disabled = false;
        }
    }

    switch (parseInt(fld_value, 10)) {
        case (0): //disabled
            //document.getElementById("header_start_time").style.display = "none";
            //document.getElementById("header_end_time").style.display = "none";
            //document.getElementById("header_offset").style.display = "none";

            //document.getElementById("offset").value = "1";
            document.getElementById("offset").value = global_offset_value;
            break;
        case (1): //recurring
            document.getElementById("header_start_time").style.display = "";
            document.getElementById("header_end_time").style.display = "";
            document.getElementById("header_offset").style.display = "";

            document.getElementById("trDateS").style.display = "none";
            document.getElementById("date_s").disabled = true;
            document.getElementById("trYearS").style.display = "none";
            document.getElementById("year_s").disabled = true;

            document.getElementById("trDateE").style.display = "none";
            document.getElementById("date_e").disabled = true;
            document.getElementById("trYearE").style.display = "none";
            document.getElementById("year_e").disabled = true;
            break;
        case (2): //non-recurring
            document.getElementById("header_start_time").style.display = "";
            document.getElementById("header_end_time").style.display = "";
            document.getElementById("header_offset").style.display = "";

            document.getElementById("trWeekS").style.display = "none";
            document.getElementById("week_s").disabled = true;
            document.getElementById("trDayS").style.display = "none";
            document.getElementById("day_s").disabled = true;

            document.getElementById("trWeekE").style.display = "none";
            document.getElementById("week_e").disabled = true;
            document.getElementById("trDayE").style.display = "none";
            document.getElementById("day_e").disabled = true;
            break;
        default:
            document.getElementById("offset").value = global_offset_value;
            break;
    }
}

function processUpdate(req, ref)
{
    var frag, tbody, td, tr;
    var values = req.responseText.split(",");

    //Format: <time_zone>,<acronym>

    frag = document.createDocumentFragment();
    createModeTblHeader(frag, "header_timezone", "Time Zone Configuration");

    if (reqObject != req) {
        reqObject = req;
    }

    if (req.responseText) {

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Time Zone", "param_label");
        td.style.width = "10em";
        addSelectCell(tr, oTTimeZone, oVTimeZone, parseInt(values[0], 10), "cl", "time_zone");
        frag.appendChild(tr);

        tr = CreateStyledElement("tr", "config");
        td = addTextCell(tr, "Acronym", "param_label");
        td.style.width = "10em";
        addInputCellWithText(tr, values[1] === null ? "" : unescape(values[1]), "cl", "acronym", 18, 16, "", "", " ( 0 - 16 characters )");
        frag.appendChild(tr);
    }

    tbody = document.getElementById("tzTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }


    //Daylight Saving Time

    frag = document.createDocumentFragment();
    createModeTblHeader(frag, "header_daylight_saving_time", "Daylight Saving Time Mode");

    if (req.responseText) {

        tr = CreateStyledElement("tr", "config");
        addTextCell(tr, "Daylight Saving Time", "param_label");
        td = addSelectCell(tr, oTMode, oVMode, parseInt(values[2], 10), "cl", "mode");
        td.onchange = onchangeMode;
        td.style.width = "16em";
        frag.appendChild(tr);
    }

    tbody = document.getElementById("modeTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }

    // Start time
    createModeTblHeader(frag, "header_start_time" , "Start Time settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trWeekS";
    td = addTextCell(tr, "Week", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTWeek, oVWeek, parseInt(values[3], 10), "cl", "week_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDayS";
    td = addTextCell(tr, "Day", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDay, oVDay, parseInt(values[4], 10), "cl", "day_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMonthS";
    td = addTextCell(tr, "Month", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMon, oVMon, parseInt(values[5], 10), "cl", "month_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDateS";
    td = addTextCell(tr, "Date", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDate, oVDate, parseInt(values[6], 10), "cl", "date_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trYearS";
    td = addTextCell(tr, "Year", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTYear, oVYear, parseInt(values[7], 10), "cl", "year_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trHoursS";
    td = addTextCell(tr, "Hours", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTHours, oVHours, parseInt(values[8], 10), "cl", "hours_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMinutesS";
    td = addTextCell(tr, "Minutes", "param_label");
    td.style.width = "10em";
    td.id = td.name = "trMinutesSP";
    td = addSelectCell(tr, oTMinutes, oVMinutes, parseInt(values[9], 10), "cl", "minutes_s");
    td.style.width = "16em";
    frag.appendChild(tr);

    // End Time
    createModeTblHeader(frag, "header_end_time", "End Time settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trWeekE";
    td = addTextCell(tr, "Week", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTWeek, oVWeek, parseInt(values[10], 10), "cl", "week_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDayE";
    td = addTextCell(tr, "Day", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDay, oVDay, parseInt(values[11], 10), "cl", "day_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMonthE";
    td = addTextCell(tr, "Month", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMon, oVMon, parseInt(values[12], 10), "cl", "month_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trDateE";
    td = addTextCell(tr, "Date", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTDate, oVDate, parseInt(values[13], 10), "cl", "date_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trYearE";
    td = addTextCell(tr, "Year", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTYear, oVYear, parseInt(values[14], 10), "cl", "year_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trHoursE";
    td = addTextCell(tr, "Hours", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTHours, oVHours, parseInt(values[15], 10), "cl", "hours_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trMinutesE";
    td = addTextCell(tr, "Minutes", "param_label");
    td.style.width = "10em";
    td = addSelectCell(tr, oTMinutes, oVMinutes, parseInt(values[16], 10), "cl", "minutes_e");
    td.style.width = "16em";
    frag.appendChild(tr);

    //offset
    createModeTblHeader(frag, "header_offset", "Offset settings");
    tr = CreateStyledElement("tr", "config");
    tr.id = tr.name = "trOffset";
    td = addTextCell(tr, "Offset", "param_label");
    td.style.width = "10em";
    global_offset_value = parseInt(values[17], 10);
    td = addInputCellWithText(tr, global_offset_value, "cl", "offset", 12, 4, "", "", " (1 - 1440) Minutes");
    frag.appendChild(tr);

    tbody = document.getElementById("cfgTbl");
    clearChildNodes(tbody);
    if (!tbody.appendChild(frag)) {
        alert("This browser doesn't support dynamic tables.");
    }
    onchangeMode();
}

function resetForm()
{
    processUpdate(reqObject, null);
}

function requestUpdate()
{
    //var req = " www.Vitesse.com,vitesss.com,3rd floor";
    //processUpdate(req, null);
    loadXMLDoc("/config/time_dst", processUpdate, null);
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<form method="POST" action="/config/time_dst" onsubmit="return checkForm();">

<h1>Time Zone Configuration</h1>

<table id="timeZoneConfiguration" summary="Time Zone Configuration" cellspacing="0" class="config">
 <tbody id="tzTbl">
 </tbody>
</table>

<div>&nbsp;</div>
<h1>Daylight Saving Time Configuration</h1>

<table id="DstConfiguration" summary="DST Configuration" cellspacing="0" class="config">
 <tbody id="modeTbl">
 </tbody>
</table>

<div>&nbsp;</div>
<table id="RecurringConfiguration" summary="Recurring Configuration" cellspacing="0" class="config">
 <tbody id="cfgTbl">
 </tbody>
</table>

<p>
<input type="submit" value="Save">
<input type="reset" value="Reset" onclick="resetForm();">
</p>

</form>
</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
