<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>ACL Rate Limit Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/MasterControl.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page macic
var help_page = "/help/help_acl_ratelimiter.htm";

function genArrayTwo2theNthPowerStr(end)
{
    var i = 0;

    while (end) {
        end = end >> 1;
        i++;
    }

    var a = Array(i+10);
    for(i = 0; i < a.length; i++) {
        if (i < 10) {
            a[i] = String(1 << i);
        } else {
            a[i] = String(1 << (i - 10)) + "k";
        }
    }
    return a;
}

var oTRate = genArrayTwo2theNthPowerStr(configAclPktRateMax);
var oVRate = Array(1,2,4,8,16,32,64,128,256,512,1000,2000,4000,8000,16000,32000,64000,128000,256000,512000,1024000);
var oTUnit = Array("pps","kbps");
var oVUnit = Array(0,1);
var hasAclV2, hasBitRate, hasPktRateInRange;

function addRow(index, frag, values)
{
    var td, tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    var rateLimiterId = parseInt(values[0], 10);
    addTextCell(tr, rateLimiterId, "cr");

    if (hasBitRate || hasPktRateInRange) {
        if (configArchJaguar_1) {
            td = addInputCell(tr, parseInt(values[1], 10), "cr", "rate_" + rateLimiterId, 6, 6);
        } else {
            td = addInputCell(tr, parseInt(values[1], 10), "cr", "rate_" + rateLimiterId, 7, 7);
        }
        if (hasBitRate && hasPktRateInRange) {
            addSelectCell(tr, oTUnit, oVUnit, parseInt(values[2], 10), "cr", "unit_" + rateLimiterId);
        }
    } else {
        addSelectCell(tr, oTRate, oVRate, parseInt(values[1], 10), "cr", "rate_" + rateLimiterId);
    }
    frag.appendChild(tr);   // Add row to fragment
}

function CreateTableHeader(frag)
{
    tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr,"Rate Limiter ID","hdrc");
    if (hasBitRate && hasPktRateInRange) {
        addTextHeaderCell(tr,"Rate","hdrc");
        addTextHeaderCell(tr,"Unit","hdrc");
    } else {
        addTextHeaderCell(tr,"Rate (pps)","hdrc");
    }
    frag.appendChild(tr);       // Add row to fragment
    elem = document.getElementById("rateLimterHead");
    clearChildNodes(elem);
    elem.appendChild(frag);
}

function processUpdate(req, ref)
{
    if(req.responseText) {
        var rateConfig = req.responseText.split("|");
        //if (1) {
        //var rateConfig = req.split("|");

        if(typeof(configHasAclV2) == "function") {
            hasAclV2 = configHasAclV2();
        } else {
            hasAclV2 = 1;
        }

        if(typeof(configHasAclBitRate) == "function") {
            hasBitRate = configHasAclBitRate();
        } else {
            hasBitRate = 1;
        }

        if(typeof(configHasAclPktRateInRange) == "function") {
            hasPktRateInRange = configHasAclPktRateInRange();
        } else {
            hasPktRateInRange = 1;
        }

        //create holder for accumulated tbody elements and text nodes
        // Create Table Header
        var frag = document.createDocumentFragment();
        CreateTableHeader(frag);

        // Create Table Body
        frag = document.createDocumentFragment();
        for (var i = 0; i < rateConfig.length; i++) {
            if (rateConfig[i]) {
                addRow(i, frag, rateConfig[i].split("/"));
            }
        }
        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
        var cBar = new MasterControlBar([{text: "*", className: "cr"},{name: "rate_"},{name: "unit_", className: "acl_rate_unit_only"}]);
        cBar.construct('rateLimterCtrl','config_odd');
    }
}

function requestUpdate()
{
    // Format: [rate_limiter_id]/[rate]/[rate_unit]|...
    //var req="1/1|2/2|3/4|4/8|5/16|6/32|7/64|8/128|9/256|10/512|11/1000|12/2000|13/4000|14/8000|15/16000|16/32000";
    //processUpdate(req, 'rateLimterData');
    loadXMLDoc("/config/acl_ratelimiter", processUpdate, 'rateLimterData');
}

function checkForm()
{
    if (hasBitRate || hasPktRateInRange) {
        var fld, rate;
        for (var i = 1; i <= configAclRateLimitIdMax; i++) {
            if (hasBitRate && hasPktRateInRange) {
                fld = document.getElementById("unit_" + i);
                if (!fld) {
                    continue;
                }
            }

            var fld_rate = document.getElementById("rate_" + i);
            var pkt_rate = parseInt(fld_rate.value, 10);
            if ((!fld && hasPktRateInRange) || parseInt(fld.value, 10) === 0) {
                if (pkt_rate < 0 ||
                    pkt_rate > configAclPktRateMax ||
                    (configAclPktRateGranularity && pkt_rate > configAclPktRateGranularity && (pkt_rate % 100))) {
                    fld_rate.focus();
                    if (fld_rate.select && typeof(fld_rate.select) == "function") {
                        fld_rate.select();
                    }
                    if (configAclPktRateGranularity) {
                         alert("The value of 'pps' is restricted to 0 - " + (configAclPktRateGranularity - 1) + ", " + configAclPktRateGranularity + ", 2*" + configAclPktRateGranularity + ", 3*" + configAclPktRateGranularity + ", ..., " + configAclPktRateMax);
                    } else {
                        alert("The value of 'pps' is restricted to 0 - " + configAclPktRateMax);
                    }
                    return false;
                }
            } else if ((!fld && hasBitRate) || fld.value == 1) {
                if (pkt_rate < 0 || pkt_rate % configAclBitRateGranularity || pkt_rate > configAclBitRateMax) {
                    fld_rate.focus();
                    if (fld_rate.select && typeof(fld_rate.select) == "function") {
                        fld_rate.select();
                    }
                    alert("The value of 'kbps' is restricted to 0, " + configAclBitRateGranularity + ", 2*" + configAclBitRateGranularity + ", 3*" + configAclBitRateGranularity + ", ..., " + configAclBitRateMax);
                    return false;
                }
            }
        }
    }
    return true;
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<h1>ACL Rate Limiter Configuration</h1>

<form method="POST" action="/config/acl_ratelimiter" onsubmit="return checkForm();">

<table summary="ACL Rate Limiter Configuration" cellspacing="0" class="config">
 <thead id="rateLimterHead">
 </thead>
 <tbody id="rateLimterCtrl">
 </tbody>
 <tbody id="rateLimterData">
 </tbody>
</table>

<p>
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>

</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
