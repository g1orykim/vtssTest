<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>MLD Snooping Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

var mldsnpDataTable = Array("mldsnp_vlan_Data", "router_port_Data");
var timerID;

// Help page macic
var help_page = "/help/help_ipmc_mldsnp_status.htm";

function createMldVlanTableHeader()
{
    var frag = document.createDocumentFragment();
    var tr, td;
    tr = CreateStyledElement("tr", "config_header");

    td = document.createElement("th");
    td.innerHTML = "VLAN<br/>ID";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "Querier<br/>Version";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "Host<br/>Version";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "Querier<br/>Status";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "Queries<br/>Transmitted";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "Queries<br/>Received";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "V1 Reports<br/>Received";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "V2 Reports<br/>Received";
    tr.appendChild(td);
    frag.appendChild(tr);

    td = document.createElement("th");
    td.innerHTML = "V1 Leaves<br/>Received";
    tr.appendChild(td);
    frag.appendChild(tr);

    var thead = document.getElementById('mldsnp_vlan_header');
    clearChildNodes(thead);
    thead.appendChild(frag);
}

function addClonedNode(tr, val, proto)
{
    if (parseInt(val, 10)) {
        var td = CreateTd("c");
        addCell(tr, td, proto.cloneNode(1));
    } else {
        addTextCell(tr, "", "c");
    }
}

function addRow(frag, values)
{
    for (var i = 0; i < values.length; i++) {
        var Counter = values[i].split(",");
        if (Counter.length == 1) {
            return;
        }
        var tr = CreateStyledElement("tr", i % 2 ? "config_odd" : "config_even");

        addTextCell(tr, Counter[0], "c");
        addTextCell(tr, Counter[1], "c");
        addTextCell(tr, Counter[2], "c");
        if (parseInt(Counter[3], 10) === 0) {
            addTextCell(tr, "DISABLE", "c");
        } else {
            addTextCell(tr, ((parseInt(Counter[3], 10) == 2) ? "ACTIVE" : "IDLE"), "c");
        }
        addTextCell(tr, Counter[4], "c");
        addTextCell(tr, Counter[5], "c");
        addTextCell(tr, Counter[6], "c");
        addTextCell(tr, Counter[7], "c");
        addTextCell(tr, Counter[8], "c");

        frag.appendChild(tr);
    }

}

function addRouterPortHeader(frag)
{
    var tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr, "Port", "param_label");
    addTextHeaderCell(tr, "Status", "param_label");
    frag.appendChild(tr);
}

function addRouterPortRow(frag, i, values)
{
    var tr = CreateStyledElement("tr", i % 2 ? "config_odd" : "config_even");
    addTextCell(tr, configPortName(values[0], 0), "cr");
    switch ( (parseInt(values[1], 10)) ) {
    case 1:
        addTextCell(tr, "Static", "c");
        break;
    case 2:
        addTextCell(tr, "Dynamic", "c");
        break;
    case 3:
        addTextCell(tr, "Both", "c");
        break;
    case 0:
    default:
        addTextCell(tr, "-", "c");
        break;
    }
    frag.appendChild(tr);
}

function processUpdate(req, ref)
{
    if (redirectOnError(req)) {
        document.getElementById("update").style.visibility = "hidden";
        document.getElementById("autoRefresh").disabled = false;
        document.getElementById("Refresh").disabled = false;
        document.getElementById("Clear").disabled = false;

        return;
    }

    if (req.responseText) {
        var mldsnpConfig = req.responseText.split("|");

        createMldVlanTableHeader();
        for (var i = 0; i < mldsnpDataTable.length; i++) {
            var frag = document.createDocumentFragment();
            if (i === 0) {
                //counter table
                if (mldsnpConfig[i]) {
                    addRow(frag, mldsnpConfig[i].split("/"));
                }
            } else if (i == 1) {
                //router port table
                addRouterPortHeader(frag);
                var portConfig = mldsnpConfig[i].split("/");
                for (var j = 0; j < portConfig.length; j++) {
                    if (portConfig[j]) {
                        addRouterPortRow(frag, j, portConfig[j].split(","));
                    }
                }
            }

            var tbody = document.getElementById(mldsnpDataTable[i]);
            clearChildNodes(tbody);
            if (!tbody.appendChild(frag)) { // Add Frag to table body
                alert("This browser doesn't support dynamic tables.");
            }
            var autorefresh = document.getElementById('autoRefresh');
            if (autorefresh.checked) {
                if (timerID) {
                    clearTimeout(timerID);
                }
                timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
            }
        }
    } else {
        SpomHandleError();
    }

    document.getElementById("update").style.visibility = "hidden";
    document.getElementById("autoRefresh").disabled = false;
    document.getElementById("Refresh").disabled = false;
    document.getElementById("Clear").disabled = false;
}

function requestUpdate()
{
    if (SpomNavigationLoading()) {
        return; // Bail out, navigation will trigger update
    }

    document.getElementById("update").style.visibility = "visible";
    document.getElementById("autoRefresh").disabled = true;
    document.getElementById("Refresh").disabled = true;
    document.getElementById("Clear").disabled = true;

    /* get form data
       Format: [vid],[querier_ver],[host_ver],[querier_status],[querier_transmitted],[querier_received],[received_v1_reports],[received_v2_reports],[received_v1_leave]/...
               | [port_no],[status]/[port_no],[status]/...
       status 0: None     1: Static      2: Dynamic      3: Both
    */
    loadXMLDoc(SpomAddSidArg("/stat/ipmc_status?ipmc_version=2"), processUpdate, "");

    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function requestClear()
{
    document.getElementById("update").style.visibility = "visible";
    loadXMLDoc(SpomAddSidArg("/stat/ipmc_status?ipmc_version=2&clear=1"), processUpdate, 'mldsnp_vlan_Data');
}

function chkRefresh(fld)
{
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate();
    }
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<div class="refreshbar">
 <form action="#">
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" id="autoRefresh" name="autoRefresh" onclick="chkRefresh(this);">
  <input type="button" id="Refresh" value="Refresh" onclick="requestUpdate(); this.blur();">
  <input type="button" id="Clear" value="Clear" onclick="requestClear();  this.blur();">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

<h1>MLD Snooping Status <span id="display_sid"></span></h1>
<h2>Statistics</h2>

<table id="vlanstatus" summary="VLAN MLD Snooping Status" cellspacing="0" class="display">
 <thead id="mldsnp_vlan_header">
 </thead>
 <tbody id="mldsnp_vlan_Data">
 </tbody>
</table>

<h2>Router Port</h2>
<table id="router_port_Config" summary="Router Port" cellspacing="0" class="display">
 <tbody id="router_port_Data">
 </tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="hidden" id="ipmc_version" name="ipmc_version" value="2">
</p>

<!-- IE caching bug -->
<div style="visibility: hidden;">
 <!-- <div style="padding : 0 4px 0 4px; font-size: 14pt" id="bullet">&bull;</div> -->
 <img id="bullet" alt="" src="images/yes.gif">
</div>

</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
