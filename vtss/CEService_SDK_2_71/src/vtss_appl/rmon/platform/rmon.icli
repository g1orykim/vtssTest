//
// Vitesse Switch Software.
//
# Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
# Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted. Permission to
# integrate into other products, disclose, transmit and distribute the software
# in an absolute machine readable format (e.g. HEX file) is also granted.  The
# source code of the software may not be disclosed, transmitted or distributed
# without the written permission of Vitesse. The software and its source code
# may only be used in products utilizing the Vitesse switch products.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software. Vitesse retains all ownership,
# copyright, trade secret and proprietary rights in the software.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
# INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR USE AND NON-INFRINGEMENT.
//
//
// Module Segment
//   This tag value is used to decide whether all commands of this module are
//   registered or not and the generated C/H file is compiled or not.
//
MODULE_IF_FLAG = 

//
// Include Segment
//   The segment contains the include files. These include files are needed
//   for the code body, that is, all other segments. 
//   "icli_api.h" is the default include file that will be auto-generated
//   in C file. 
//   The content will be exactly pasted to the generated C file.
//
INCLUDE_BEGIN
#include "rmon_api.h"
#include "misc_api.h"   //uport2iport(), iport2uport()
#include "ifIndex_api.h"
#include "icli_porting_util.h"
#include "topo_api.h"   //topo_usid2isid(), topo_isid2usid()
INCLUDE_END

//
// Function Segment
//   The segment allows the designer writes the local functions that will be
//   used in the command Segment and also the global functions that can be
//   shared with other C files. 
//   The content will be exactly pasted to the generated C file.
//
FUNCTION_BEGIN

#define VTSS_ALLOC_MODULE_ID            VTSS_MODULE_ID_RMON
#define ICLI_SESSION_CTRL_C_CHECK_CNT   100
#define ICLI_SESSION_CTRL_C_WAIT        100     /* 0.1 secs */

static char *_oid_2_str(IN oid *name, IN int name_len, OUT char *buf)
{
    int i = 0, j = 0;

    for (i = 0; i < name_len; i++) {
        sprintf(buf + j, ".%ld", name[i]);
        j = strlen(buf);
    }
    return buf;
}

/*
    Parse raw text OID subtree string
    Return 0: successful
*/
static int _str_to_oid(IN char *str, OUT u32 *oidSubTree, INOUT u32 *oid_len)
{
    char *value_char;
    u32  num = 0;
    u32  i, mask = 0x80;

    value_char = str;

    //check if OID format .x.x.x
    if (value_char[0] != '.') {
        return 1;
    }
    for (i = 0; i < strlen(str); i++) {
        if (((value_char[i] != '.') && (value_char[i] != '*')) &&
            (value_char[i] < '0' || value_char[i] > '9')) {
            return 1;
        }
        if (value_char[i] == '*') {
            if (i == 0 || value_char[i - 1] != '.') {
                return 1;
            }
        }
        if (value_char[i] == '.') {
            if (i == strlen(str) - 1) {
                return 1;
            } else if (value_char[i + 1] == '.') {
                return 1;
            }
            num++;
            if (num > *oid_len) {
                return 1;
            }
        }
    }

    *oid_len = num;
    
    /* convert OID string (RFC1447)
       Each bit of this bit mask corresponds to the (8*i - 7)-th
       sub-identifier, and the least significant bit of the i-th
       octet of this octet string corresponding to the (8*i)-th
       sub-identifier, where i is in the range 1 through 16. */
    for (i = 0; i < num; i++) {
        if (!memcmp(value_char, ".*", 2)) {
            oidSubTree[i] = 0;
            value_char = value_char + 2;
        } else {
            sscanf(value_char++, ".%d", &oidSubTree[i]);
        }

        if (i == *oid_len - 1) {
            break; //last OID node
        }
        while (*value_char != '.') {
            value_char++;
        }

        if (mask == 1) {
            mask = 0x80;
        } else {
            mask >>= 1;
        }
    }

    return 0;
}

static BOOL _datasource_exist(IN u32 session_id, vtss_var_oid_t *data_source_p, BOOL alert)
{
    datasourceTable_info_t table_info;

    if (!get_datasource_info(data_source_p->objid[data_source_p->length - 1], &table_info)) {
        return FALSE;
    }

    return icli_cmd_switch_exist(session_id, topo_isid2usid(table_info.isid), alert, alert);
}

static vtss_rc _statistics_show(IN u32 session_id, IN u32 *id, BOOL next)
{
    vtss_rc                 rc = VTSS_RC_ERROR;
    vtss_stat_ctrl_entry_t  conf;
    char                    buf[80];

    memset(&conf, 0, sizeof(vtss_stat_ctrl_entry_t));
    conf.id = *id;
    if ((rc = rmon_mgmt_statistics_entry_get(&conf, next)) != VTSS_OK) {
        return rc;
    }
    *id = conf.id;

    (void)rmon_etherStatsTable_entry_update(&conf.data_source, &conf.eth);

    ICLI_PRINTF("\nStatistics ID : %5u\n", conf.id);
    ICLI_PRINTF("---------------------\n");
    ICLI_PRINTF("    Data Source : %s\n",  _oid_2_str(conf.data_source.objid, conf.data_source.length, buf));

    if (!_datasource_exist(session_id, &conf.data_source, TRUE)) {
        return rc;
    }

    ICLI_PRINTF("    etherStatsDropEvents          : %u\n", conf.eth.drop_events   );
    ICLI_PRINTF("    etherStatsOctets              : %u\n", conf.eth.octets        );
    ICLI_PRINTF("    etherStatsPkts                : %u\n", conf.eth.packets       );
    ICLI_PRINTF("    etherStatsBroadcastPkts       : %u\n", conf.eth.bcast_pkts    );
    ICLI_PRINTF("    etherStatsMulticastPkts       : %u\n", conf.eth.mcast_pkts    );
    ICLI_PRINTF("    etherStatsCRCAlignErrors      : %u\n", conf.eth.crc_align     );
    ICLI_PRINTF("    etherStatsUndersizePkts       : %u\n", conf.eth.undersize     );
    ICLI_PRINTF("    etherStatsOversizePkts        : %u\n", conf.eth.oversize      );
    ICLI_PRINTF("    etherStatsFragments           : %u\n", conf.eth.fragments     );
    ICLI_PRINTF("    etherStatsJabbers             : %u\n", conf.eth.jabbers       );
    ICLI_PRINTF("    etherStatsCollisions          : %u\n", conf.eth.collisions    );
    ICLI_PRINTF("    etherStatsPkts64Octets        : %u\n", conf.eth.pkts_64       );
    ICLI_PRINTF("    etherStatsPkts65to127Octets   : %u\n", conf.eth.pkts_65_127   );
    ICLI_PRINTF("    etherStatsPkts128to255Octets  : %u\n", conf.eth.pkts_128_255  );
    ICLI_PRINTF("    etherStatsPkts256to511Octets  : %u\n", conf.eth.pkts_256_511  );
    ICLI_PRINTF("    etherStatsPkts512to1023Octets : %u\n", conf.eth.pkts_512_1023 );
    ICLI_PRINTF("    etherStatsPkts1024to1518Octets: %u\n", conf.eth.pkts_1024_1518);

    return rc;
}

static vtss_rc _history_show(IN u32 session_id, IN u32 *id, BOOL next)
{
    vtss_rc                     rc = VTSS_RC_ERROR;
    vtss_history_ctrl_entry_t   conf;
    vtss_history_data_entry_t   data;
    char                        buf[80];
    u32                         entry_cnt = 0;

    memset(&conf, 0, sizeof(vtss_history_ctrl_entry_t));
    conf.id = *id;
    if ((rc = rmon_mgmt_history_entry_get(&conf, next)) != VTSS_OK) {
        return rc;
    }
    *id = conf.id;

    ICLI_PRINTF("\nHistory ID : %5u\n", conf.id);
    ICLI_PRINTF("------------------\n");
    ICLI_PRINTF("    Data Source         : %s\n",  _oid_2_str(conf.data_source.objid, conf.data_source.length, buf));
    ICLI_PRINTF("    Data Bucket Request : %lu\n", conf.scrlr.data_requested);
    ICLI_PRINTF("    Data Bucket Granted : %lu\n", conf.scrlr.data_granted);
    ICLI_PRINTF("    Data Interval       : %lu\n", conf.interval);

    if (!_datasource_exist(session_id, &conf.data_source, TRUE)) {
        return rc;
    }

    memset(&data, 0, sizeof(vtss_history_data_entry_t));
    while (rmon_mgmt_history_data_get(conf.id, &data, TRUE) == VTSS_OK) {
        ICLI_PRINTF("\n    EtherHistorySampleIndex : %lu\n", data.data_index);
        ICLI_PRINTF("        etherHistoryIntervalStart : %s(%lu)\n", misc_time2interval((data.start_interval) / 100), data.start_interval / 100);
        ICLI_PRINTF("        etherHistoryDropEvents    : %u\n", data.EthData.drop_events);
        ICLI_PRINTF("        etherHistoryOctets        : %u\n", data.EthData.octets     );
        ICLI_PRINTF("        etherHistoryPkts          : %u\n", data.EthData.packets    );
        ICLI_PRINTF("        etherHistoryBroadcastPkts : %u\n", data.EthData.bcast_pkts );
        ICLI_PRINTF("        etherHistoryMulticastPkts : %u\n", data.EthData.mcast_pkts );
        ICLI_PRINTF("        etherHistoryCRCAlignErrors: %u\n", data.EthData.crc_align  );
        ICLI_PRINTF("        etherHistoryUndersizePkts : %u\n", data.EthData.undersize  );
        ICLI_PRINTF("        etherHistoryOversizePkts  : %u\n", data.EthData.oversize   );
        ICLI_PRINTF("        etherHistoryFragments     : %u\n", data.EthData.fragments  );
        ICLI_PRINTF("        etherHistoryJabbers       : %u\n", data.EthData.jabbers    );
        ICLI_PRINTF("        etherHistoryCollisions    : %u\n", data.EthData.collisions );
        ICLI_PRINTF("        etherHistoryUtilization   : %lu\n", data.utilization       );

        /* Check if break condition (ctrl+c) occured */
        if (((++entry_cnt % ICLI_SESSION_CTRL_C_CHECK_CNT) == 0) &&
            icli_session_ctrl_c_get(session_id, ICLI_SESSION_CTRL_C_WAIT) == ICLI_RC_OK) {
            rc = VTSS_RC_ERROR;
            break;
        }
    }

    return rc;
}

static vtss_rc _alarm_show(IN u32 session_id, IN u32 *id, BOOL next)
{
    vtss_rc                     rc = VTSS_RC_ERROR;
    vtss_alarm_ctrl_entry_t     conf;
    char                        buf[80];

    memset(&conf, 0, sizeof(vtss_alarm_ctrl_entry_t));
    conf.id = *id;
    if ((rc = rmon_mgmt_alarm_entry_get(&conf, next)) != VTSS_OK) {
        return rc;
    }
    *id = conf.id;

    ICLI_PRINTF("\nAlarm ID : %5u\n", conf.id);
    ICLI_PRINTF("----------------\n");
    ICLI_PRINTF("      Interval          : %u\n", conf.interval);
    ICLI_PRINTF("      Variable          : %s\n",  _oid_2_str(conf.var_name.objid, conf.var_name.length, buf));
    ICLI_PRINTF("      SampleType        : %s\n",
        (SAMPLE_TYPE_ABSOLUTE == conf.sample_type ) ? "absoluteValue" :
        (SAMPLE_TYPE_DELTA == conf.sample_type ) ? "deltaValue" : "unKnown");
    if (_datasource_exist(session_id, &conf.var_name, FALSE)) {
        ICLI_PRINTF("      Value         : %d\n", conf.value);
    } else {
        ICLI_PRINTF("      Value         : -\n");
    }
    ICLI_PRINTF("      Startup           : %s\n",
        (ALARM_RISING == conf.startup_type ) ? "risingAlarm" : ( ALARM_FALLING == conf.startup_type ) ? "fallingAlarm" :
        (ALARM_BOTH == conf.startup_type ) ? "risingOrFallingAlarm" : "unKnown");
    ICLI_PRINTF("      RisingThrld       : %d\n", (i32)(conf.rising_threshold));
    ICLI_PRINTF("      FallingThrld      : %d\n", (i32)(conf.falling_threshold));
    ICLI_PRINTF("      RisingEventIndex  : %u\n", conf.rising_event_index);
    ICLI_PRINTF("      FallingEventIndex : %u\n", conf.falling_event_index);
    (void) _datasource_exist(session_id, &conf.var_name, TRUE);

    return rc;
}

static vtss_rc _event_show(IN u32 session_id, IN u32 *id, BOOL next)
{
    vtss_rc                 rc = VTSS_RC_ERROR;
    vtss_event_ctrl_entry_t conf;
    vtss_event_data_entry_t data;
    u32                     entry_cnt = 0;

    memset(&conf, 0, sizeof(vtss_event_ctrl_entry_t));
    conf.id = *id;
    if ((rc = rmon_mgmt_event_entry_get(&conf, next)) != VTSS_OK) {
        return rc;
    }
    *id = conf.id;

    ICLI_PRINTF("\nEvent ID : %5u\n", conf.id);
    ICLI_PRINTF("----------------\n");
    ICLI_PRINTF("      Description     : %s\n", (conf.event_description) ? conf.event_description : "");
    ICLI_PRINTF("      Type            : %s\n", (EVENT_NONE == conf.event_type) ? "none" :
            (EVENT_LOG == conf.event_type) ? "log" : (EVENT_TRAP == conf.event_type) ? "snmptrap" :
            (EVENT_LOG_AND_TRAP == conf.event_type) ? "logandtrap" : "unKnown");
    ICLI_PRINTF("      Community       : %s\n", conf.event_community);
    ICLI_PRINTF("      LastSent        : %s\n", misc_time2interval(conf.event_last_time_sent / 100));

    memset(&data, 0, sizeof(vtss_event_data_entry_t));
    while (rmon_mgmt_event_data_get(conf.id, &data, TRUE) == VTSS_OK ) {
        ICLI_PRINTF("\n      Log Index   : %5lu\n", data.data_index);
        ICLI_PRINTF("      -------------------\n");
        ICLI_PRINTF("      Time        : %s\n", misc_time2interval(data.log_time / 100));
        ICLI_PRINTF("      Description : %s\n", data.log_description);
        if (((++entry_cnt % ICLI_SESSION_CTRL_C_CHECK_CNT) == 0) &&
            icli_session_ctrl_c_get(session_id, ICLI_SESSION_CTRL_C_WAIT) == ICLI_RC_OK) {
            rc = VTSS_RC_ERROR;
            break;
        }
    }

    return rc;
}
FUNCTION_END

//
// Export Segment
//   This segment contains the API declarations of the global functions in
//   Function Segment. This will be pasted exactly to the generated H file.
//   So, others can include the H file to use the global functions.
//
EXPORT_BEGIN
EXPORT_END

HELP_SHOW_RMON = RMON statistics

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = show rmon statistics [<1~65535>]

FUNC_NAME = icli_rmon_statistics_show
FUNC_REUSE = 

PROPERTY  = ICLI_CMD_PROP_GREP
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id_list

HELP      = ##ICLI_HELP_SHOW
HELP      = ##HELP_SHOW_RMON
HELP      = Display the RMON statistics table
HELP      = Statistics entry list

CMD_MODE  = ICLI_CMD_MODE_EXEC

VARIABLE_BEGIN
    u32     i;
    u32     id;
VARIABLE_END

CODE_BEGIN
    if ( id_list ) {
        for ( i = 0; i < id_list->cnt; i++ ) {
            for ( id = id_list->range[i].min; id <= id_list->range[i].max; id++ ) {
                (void) _statistics_show(session_id, &id, FALSE);
            }
        }
    } else {
        while (_statistics_show(session_id, &id, TRUE) == VTSS_OK);
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = show rmon history [<1~65535>]

FUNC_NAME = icli_rmon_history_show
FUNC_REUSE = 

PROPERTY  = ICLI_CMD_PROP_GREP
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id_list

HELP      = ##ICLI_HELP_SHOW
HELP      = ##HELP_SHOW_RMON
HELP      = Display the RMON history table
HELP      = History entry list

CMD_MODE  = ICLI_CMD_MODE_EXEC

VARIABLE_BEGIN
    u32     i;
    u32     id = 0;
VARIABLE_END

CODE_BEGIN
    if ( id_list ) {
        for ( i = 0; i < id_list->cnt; i++ ) {
            for ( id = id_list->range[i].min; id <= id_list->range[i].max; id++ ) {
                (void) _history_show(session_id, &id, FALSE);
            }
        }
    } else {
        while (_history_show(session_id, &id, TRUE) == VTSS_OK);
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = show rmon alarm [<1~65535>]

FUNC_NAME = icli_rmon_alarm_show
FUNC_REUSE = 

PROPERTY  = ICLI_CMD_PROP_GREP
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id_list

HELP      = ##ICLI_HELP_SHOW
HELP      = ##HELP_SHOW_RMON
HELP      = Display the RMON alarm table
HELP      = Alarm entry list

CMD_MODE  = ICLI_CMD_MODE_EXEC

VARIABLE_BEGIN
    u32     i;
    u32     id;
VARIABLE_END

CODE_BEGIN
    if ( id_list ) {
        for ( i = 0; i < id_list->cnt; i++ ) {
            for ( id = id_list->range[i].min; id <= id_list->range[i].max; id++ ) {
                (void) _alarm_show(session_id, &id, FALSE);
            }
        }
    } else {
        while (_alarm_show(session_id, &id, TRUE) == VTSS_OK);
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = show rmon event [<1~65535>]

FUNC_NAME = icli_rmon_event_show
FUNC_REUSE = 

PROPERTY  = ICLI_CMD_PROP_GREP
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id_list

HELP      = ##ICLI_HELP_SHOW
HELP      = ##HELP_SHOW_RMON
HELP      = Display the RMON event table
HELP      = Event entry list

CMD_MODE  = ICLI_CMD_MODE_EXEC

VARIABLE_BEGIN
    u32     i;
    u32     id;
VARIABLE_END

CODE_BEGIN
    if ( id_list ) {
        for ( i = 0; i < id_list->cnt; i++ ) {
            for ( id = id_list->range[i].min; id <= id_list->range[i].max; id++ ) {
                (void) _event_show(session_id, &id, FALSE);
            }
        }
    } else {
        while (_event_show(session_id, &id, TRUE) == VTSS_OK);
    }
CODE_END

CMD_END

HELP_RMON     = Remote Monitoring
HELP_ALARM    = Configure an RMON alarm
HELP_ALARM_ID = Alarm entry ID

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = rmon alarm <1-65535> <word255> <1-2147483647> {absolute | delta} rising-threshold <-2147483648-2147483647> [<0-65535>] falling-threshold <-2147483648-2147483647> [<0-65535>] {[rising | falling | both]}
PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id
CMD_VAR   = oid_str
CMD_VAR   = interval
CMD_VAR   = b_absolute
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = rising_threshold
CMD_VAR   = rising_event_id
CMD_VAR   = 
CMD_VAR   = falling_threshold
CMD_VAR   = falling_event_id
CMD_VAR   = b_rising
CMD_VAR   = b_falling
CMD_VAR   = 

HELP      = ##HELP_RMON
HELP      = ##HELP_ALARM
HELP      = ##HELP_ALARM_ID
HELP      = MIB object to monitor
HELP      = Sample interval
HELP      = Test each sample directly
HELP      = Test delta between samples
HELP      = Configure the rising threshold
HELP      = rising threshold value
HELP      = Event to fire on rising threshold crossing
HELP      = Configure the falling threshold
HELP      = falling threshold value
HELP      = Event to fire on falling threshold crossing
HELP      = Trigger alarm when the first value is larger than the rising threshold 
HELP      = Trigger alarm when the first value is less than the falling threshold
HELP      = Trigger alarm when the first value is larger than the rising threshold or less than the falling threshold (default)

BYWORD    =
BYWORD    =
BYWORD    =
BYWORD    = WORD

VARIABLE_BEGIN
    vtss_alarm_ctrl_entry_t     conf;
    u32                         *alarm_oid;
    u32                         alarm_oid_len;
    iftable_info_t              table_info;
    u32                         i;
    oid                         if_entry_oid[] = IF_ENTRY_OID;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;
    (void)rmon_mgmt_alarm_entry_get(&conf, FALSE);

    alarm_oid = (u32 *)VTSS_MALLOC(4 * RMON_MAX_OID_LEN);
    if ( alarm_oid == NULL ) {
        ICLI_PRINTF("%% system memory insufficient\n");
        return ICLI_RC_ERROR;
    }
    
    alarm_oid_len = RMON_MAX_OID_LEN;
    if ( _str_to_oid(oid_str, alarm_oid, &alarm_oid_len) != 0 ) {
        ICLI_PRINTF("%% invalid OID string\n");
        VTSS_FREE( alarm_oid );
        return ICLI_RC_ERROR;
    }
    
    if ( memcmp(alarm_oid, if_entry_oid, sizeof(if_entry_oid))    ||
         alarm_oid_len != sizeof(if_entry_oid) / sizeof(oid) + 2  ||
         alarm_oid[alarm_oid_len - 2] == 0                        ||
         alarm_oid[alarm_oid_len - 1] == 0                         ) {
        ICLI_PRINTF("%% invalid OID string\n");
        VTSS_FREE( alarm_oid );
        return ICLI_RC_ERROR;
    }

    conf.var_name.length = alarm_oid_len;
    for (i = 0; i < alarm_oid_len; i ++) {
        conf.var_name.objid[i] = alarm_oid[i];
    }
    
    table_info.ifIndex = (ifIndex_id_t)alarm_oid[alarm_oid_len - 1];
    if ( ! ifIndex_get_valid(&table_info) ) {
        ICLI_PRINTF("%% Fail: ifindex doesn't exist\n");
        VTSS_FREE( alarm_oid );
        return ICLI_RC_ERROR;
    }

    VTSS_FREE( alarm_oid );
    
    if (rising_threshold <= falling_threshold) {
        ICLI_PRINTF("%% Invalid: rising threshold must be larger than falling threshold\n");
        return ICLI_RC_ERROR;
    }

    if ( b_absolute ) {
        conf.sample_type = SAMPLE_TYPE_ABSOLUTE;
    } else {
        conf.sample_type = SAMPLE_TYPE_DELTA;
    }
    
    if ( b_rising ) {
        conf.startup_type = ALARM_RISING;
    } else if ( b_falling ) {
        conf.startup_type = ALARM_FALLING;
    } else {
        conf.startup_type = ALARM_BOTH;
    }

    conf.interval            = interval;
    conf.rising_threshold    = rising_threshold;
    conf.falling_threshold   = falling_threshold;
    conf.rising_event_index  = rising_event_id;
    conf.falling_event_index = falling_event_id;

    if (rmon_mgmt_alarm_entry_add(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to add alarm entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = rmon alarm <1-65535> {ifInOctets | ifInUcastPkts | ifInNUcastPkts | ifInDiscards | ifInErrors | ifInUnknownProtos | ifOutOctets | ifOutUcastPkts | ifOutNUcastPkts | ifOutDiscards | ifOutErrors} <uint> <1-2147483647> {absolute | delta} rising-threshold <-2147483648-2147483647> [<0-65535>] falling-threshold <-2147483648-2147483647> [<0-65535>] {[rising | falling | both]}
PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

CMD_VAR   = b_ifInOctets
CMD_VAR   = b_ifInUcastPkts
CMD_VAR   = b_ifInNUcastPkts
CMD_VAR   = b_ifInDiscards
CMD_VAR   = b_ifInErrors
CMD_VAR   = b_ifInUnknownProtos
CMD_VAR   = b_ifOutOctets
CMD_VAR   = b_ifOutUcastPkts
CMD_VAR   = b_ifOutNUcastPkts
CMD_VAR   = b_ifOutDiscards
CMD_VAR   = 

CMD_VAR   = ifIndex

CMD_VAR   = interval
CMD_VAR   = b_absolute
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = rising_threshold
CMD_VAR   = rising_event_id
CMD_VAR   = 
CMD_VAR   = falling_threshold
CMD_VAR   = falling_event_id
CMD_VAR   = b_rising
CMD_VAR   = b_falling
CMD_VAR   = 

HELP      = ##HELP_RMON
HELP      = ##HELP_ALARM
HELP      = ##HELP_ALARM_ID

HELP      = The total number of octets received on the interface, including framing characters
HELP      = The number of uni-cast packets delivered to a higher-layer protocol
HELP      = The number of broad-cast and multi-cast packets delivered to a higher-layer protocol
HELP      = The number of inbound packets that are discarded even the packets are normal
HELP      = The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol
HELP      = The number of the inbound packets that were discarded because of the unknown or un-support protocol
HELP      = The number of octets transmitted out of the interface , including framing characters
HELP      = The number of uni-cast packets that request to transmit
HELP      = The number of broad-cast and multi-cast packets that request to transmit
HELP      = The number of outbound packets that are discarded event the packets is normal
HELP      = The The number of outbound packets that could not be transmitted because of errors

HELP      = ifIndex

HELP      = Sample interval
HELP      = Test each sample directly
HELP      = Test delta between samples
HELP      = Configure the rising threshold
HELP      = rising threshold value
HELP      = Event to fire on rising threshold crossing
HELP      = Configure the falling threshold
HELP      = falling threshold value
HELP      = Event to fire on falling threshold crossing
HELP      = Trigger alarm when the first value is larger than the rising threshold 
HELP      = Trigger alarm when the first value is less than the falling threshold
HELP      = Trigger alarm when the first value is larger than the rising threshold or less than the falling threshold (default)

BYWORD    =
BYWORD    =
BYWORD    =
BYWORD    = OID

VARIABLE_BEGIN
    vtss_alarm_ctrl_entry_t     conf;
    iftable_info_t              table_info;
    u32                         i;
    oid                         if_entry_oid[] = IF_ENTRY_INST;
VARIABLE_END

CODE_BEGIN
    table_info.ifIndex = (ifIndex_id_t)ifIndex;
    if ( ! ifIndex_get_valid(&table_info) ) {
        ICLI_PRINTF("%% Fail: ifindex doesn't exist\n");
        return ICLI_RC_ERROR;
    }

    if ( b_ifInOctets ) {
        if_entry_oid[9] = 10;
    } else if ( b_ifInUcastPkts ) {
        if_entry_oid[9] = 11;
    } else if ( b_ifInNUcastPkts ) {
        if_entry_oid[9] = 12;
    } else if ( b_ifInDiscards ) {
        if_entry_oid[9] = 13;
    } else if ( b_ifInErrors ) {
        if_entry_oid[9] = 14;
    } else if ( b_ifInUnknownProtos ) {
        if_entry_oid[9] = 15;
    } else if ( b_ifOutOctets ) {
        if_entry_oid[9] = 16;
    } else if ( b_ifOutUcastPkts ) {
        if_entry_oid[9] = 17;
    } else if ( b_ifOutNUcastPkts ) {
        if_entry_oid[9] = 18;
    } else if ( b_ifOutDiscards ) {
        if_entry_oid[9] = 19;
    } else {
        if_entry_oid[9] = 20;
    }

    if_entry_oid[10] = (oid)ifIndex;

    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;
    (void)rmon_mgmt_alarm_entry_get(&conf, FALSE);

    conf.var_name.length = 11;
    for (i = 0; i < 11; i ++) {
        conf.var_name.objid[i] = if_entry_oid[i];
    }
    
    if (rising_threshold <= falling_threshold) {
        ICLI_PRINTF("%% Invalid: rising threshold must be larger than falling threshold\n");
        return ICLI_RC_ERROR;
    }

    if ( b_absolute ) {
        conf.sample_type = SAMPLE_TYPE_ABSOLUTE;
    } else {
        conf.sample_type = SAMPLE_TYPE_DELTA;
    }
    
    if ( b_rising ) {
        conf.startup_type = ALARM_RISING;
    } else if ( b_falling ) {
        conf.startup_type = ALARM_FALLING;
    } else {
        conf.startup_type = ALARM_BOTH;
    }

    conf.interval            = interval;
    conf.rising_threshold    = rising_threshold;
    conf.falling_threshold   = falling_threshold;
    conf.rising_event_index  = rising_event_id;
    conf.falling_event_index = falling_event_id;

    if (rmon_mgmt_alarm_entry_add(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to add alarm entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = no rmon alarm <1-65535>
PROPERTY  = ICLI_CMD_PROP_LOOSELY
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

HELP      = ##ICLI_HELP_NO
HELP      = ##HELP_RMON
HELP      = ##HELP_ALARM
HELP      = ##HELP_ALARM_ID

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

VARIABLE_BEGIN
    vtss_alarm_ctrl_entry_t     conf;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0, sizeof(conf));
    conf.id = id;

    if (rmon_mgmt_alarm_entry_del(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to delete alarm entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

HELP_EVENT = Configure an RMON event
HELP_EVENT_ID = Event entry ID

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = rmon event <1-65535> [log] [trap <word127>] {[description <line127>]}
PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id
CMD_VAR   = b_log
CMD_VAR   = b_trap
CMD_VAR   = community
CMD_VAR   = 
CMD_VAR   = description

HELP      = ##HELP_RMON
HELP      = ##HELP_EVENT
HELP      = ##HELP_EVENT_ID
HELP      = Generate RMON log when the event fires
HELP      = Generate SNMP trap when the event fires
HELP      = SNMP community string
HELP      = Specify a description of the event
HELP      = Event description

BYWORD    = 
BYWORD    = 
BYWORD    = 
BYWORD    = 
BYWORD    = 
BYWORD    = WORD
BYWORD    = 
BYWORD    = LINE

VARIABLE_BEGIN
    BOOL                    found = FALSE;
    vtss_event_ctrl_entry_t conf;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;
    if (rmon_mgmt_event_entry_get(&conf, FALSE) == VTSS_OK) {
        found = TRUE;
    }

    if ( b_log && b_trap ) {
        conf.event_type = EVENT_LOG_AND_TRAP;
    } else if ( b_log && b_trap == FALSE) {
        conf.event_type = EVENT_LOG;
    } else if ( b_log == FALSE && b_trap) {
        conf.event_type = EVENT_TRAP;
    } else if ( !found || (b_log == FALSE && FALSE == b_trap) ) {
        conf.event_type = EVENT_NONE;
    }

    if ( community ) {
        conf.event_community = VTSS_STRDUP(community);
    } else if ( ! found ) {
        conf.event_community = VTSS_STRDUP("public");
    }

    if ( description ) {
        conf.event_description = VTSS_STRDUP( description );
    } else if ( ! found ) {
        conf.event_description = NULL;
    }

    if (rmon_mgmt_event_entry_add(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to add event entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = no rmon event <1-65535>
PROPERTY  = ICLI_CMD_PROP_LOOSELY
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

HELP      = ##ICLI_HELP_NO
HELP      = ##HELP_RMON
HELP      = ##HELP_EVENT
HELP      = ##HELP_EVENT_ID

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

VARIABLE_BEGIN
    vtss_event_ctrl_entry_t     conf;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;

    if (rmon_mgmt_event_entry_del(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to delete event entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

HELP_IF_RMON = Configure Remote Monitoring on an interface
HELP_IF_RMON_COLLECTION = Configure Remote Monitoring Collection on an interface
HELP_IF_RMON_STATS = Configure statistics
HELP_STATS_ID = Statistics entry ID

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = rmon collection stats <1-65535>
PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 
CMD_MODE  = ICLI_CMD_MODE_INTERFACE_PORT_LIST

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

HELP      = ##HELP_IF_RMON
HELP      = ##HELP_IF_RMON_COLLECTION
HELP      = ##HELP_IF_RMON_STATS
HELP      = ##HELP_STATS_ID

MODE_VAR  = list

VARIABLE_BEGIN
    vtss_stat_ctrl_entry_t  conf;
    datasourceTable_info_t  table_info;
    u32                     i;
    oid                     if_entry_index_oid[] = IF_ENTRY_INDEX_OID;
    iftable_info_t          info;
VARIABLE_END

CODE_BEGIN
    info.type  = IFTABLE_IFINDEX_TYPE_PORT;
    info.isid  = topo_usid2isid(list->switch_range[0].usid);
    info.if_id = uport2iport(list->switch_range[0].begin_uport);
    (void) ifIndex_get_by_interface(&info);

    if (!get_datasource_info((int)(info.ifIndex), &table_info) ||
        (table_info.type != DATASOURCE_IFINDEX_TYPE_PORT &&
         table_info.type != DATASOURCE_IFINDEX_TYPE_LLAG &&
         table_info.type != DATASOURCE_IFINDEX_TYPE_GLAG)) {
        ICLI_PRINTF("%% Fail: the corresponding ifindex dosen't exist\n");
        return ICLI_RC_ERROR;
    }

    memset(&conf, 0, sizeof(conf));
    conf.id = id;
    (void)rmon_mgmt_statistics_entry_get(&conf, FALSE);

    conf.data_source.length = 11;
    for ( i = 0; i < 10; i++ ) {
        conf.data_source.objid[i] = if_entry_index_oid[i];
    }
    conf.data_source.objid[10] = (oid)(info.ifIndex);

    if (rmon_mgmt_statistics_entry_add(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to add statistics entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = no rmon collection stats <1-65535>
PROPERTY  = ICLI_CMD_PROP_LOOSELY
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 
CMD_MODE  = ICLI_CMD_MODE_INTERFACE_PORT_LIST

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

HELP      = ##ICLI_HELP_NO
HELP      = ##HELP_IF_RMON
HELP      = ##HELP_IF_RMON_COLLECTION
HELP      = ##HELP_IF_RMON_STATS
HELP      = ##HELP_STATS_ID

VARIABLE_BEGIN
    vtss_stat_ctrl_entry_t  conf;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;

    if (rmon_mgmt_statistics_entry_del(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to delete statistics entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

HELP_IF_RMON_HISTORY = Configure history
HELP_HISTORY_ID = History entry ID

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = rmon collection history <1-65535> [buckets <1-65535>] [interval <1-3600>]
PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15
IF_FLAG   = 
CMD_MODE  = ICLI_CMD_MODE_INTERFACE_PORT_LIST

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id
CMD_VAR   = b_buckets
CMD_VAR   = buckets
CMD_VAR   = b_interval
CMD_VAR   = interval

HELP      = ##HELP_IF_RMON
HELP      = ##HELP_IF_RMON_COLLECTION
HELP      = ##HELP_IF_RMON_HISTORY
HELP      = ##HELP_HISTORY_ID
HELP      = Requested buckets of intervals. Default is 50 buckets
HELP      = Requested buckets of intervals
HELP      = Interval to sample data for each bucket. Default is 1800 seconds
HELP      = Interval in seconds to sample data for each bucket

MODE_VAR  = list

VARIABLE_BEGIN
    vtss_history_ctrl_entry_t   conf;
    datasourceTable_info_t      table_info;
    u32                         i;
    oid                         if_entry_index_oid[] = IF_ENTRY_INDEX_OID;
    BOOL                        found = FALSE;
    iftable_info_t              info;
VARIABLE_END

CODE_BEGIN
    info.type  = IFTABLE_IFINDEX_TYPE_PORT;
    info.isid  = topo_usid2isid(list->switch_range[0].usid);
    info.if_id = uport2iport(list->switch_range[0].begin_uport);
    (void) ifIndex_get_by_interface(&info);

    if (!get_datasource_info((int)(info.ifIndex), &table_info) ||
        (table_info.type != DATASOURCE_IFINDEX_TYPE_PORT &&
         table_info.type != DATASOURCE_IFINDEX_TYPE_LLAG &&
         table_info.type != DATASOURCE_IFINDEX_TYPE_GLAG)) {
        ICLI_PRINTF("%% Fail: the corresponding ifindex dosen't exist\n");
        return ICLI_RC_ERROR;
    }

    memset(&conf, 0x0, sizeof(conf));
    conf.id = id;
    if (rmon_mgmt_history_entry_get (&conf, FALSE) == VTSS_OK) {
        found = TRUE;
    }

    conf.data_source.length = 11;
    for ( i = 0; i < 10; i++ ) {
        conf.data_source.objid[i] = if_entry_index_oid[i];
    }
    conf.data_source.objid[10] = (oid)(info.ifIndex);

    if ( b_buckets ) {
        conf.scrlr.data_requested = buckets;
    } else if (!found) {
        conf.scrlr.data_requested = 50;
    }

    if ( b_interval ) {
        conf.interval = interval;
    } else if (!found) {
        conf.interval = 1800;
    }

    if (rmon_mgmt_history_entry_add(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to add history entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN
COMMAND   = no rmon collection history <1-65535>
PROPERTY  = ICLI_CMD_PROP_LOOSELY
PRIVILEGE = ICLI_PRIVILEGE_15
CMD_MODE  = ICLI_CMD_MODE_INTERFACE_PORT_LIST
IF_FLAG   = 

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = id

HELP      = ##ICLI_HELP_NO
HELP      = ##HELP_IF_RMON
HELP      = ##HELP_IF_RMON_COLLECTION
HELP      = ##HELP_IF_RMON_HISTORY
HELP      = ##HELP_HISTORY_ID

VARIABLE_BEGIN
    vtss_history_ctrl_entry_t   conf;
VARIABLE_END

CODE_BEGIN
    memset(&conf, 0, sizeof(conf));
    conf.id = id;

    if (rmon_mgmt_history_entry_del(&conf) != VTSS_OK) {
        ICLI_PRINTF("%% Fail to delete history entry\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
