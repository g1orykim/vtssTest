<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2014 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>ACL Status</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page macic
var help_page = "/help/help_acl_status.htm";

var oTAction = Array("Deny", "Permit", "Filter");
var oTRuleType = Array("Port", "Policy", "Any");
var oTRateLimiter = Array("Disabled").concat(genArrayStr(1, configAclRateLimitIdMax));
var oTMirror = Array("Disabled", "Enabled");
var oTPortCopy = Array("Disabled");
    for(var i = configPortMin; i <= configNormalPortMax; i++) {
        oTPortCopy.push(configPortName(i, 1));
    }
var oTFrameType = Array("Any","EType","LLC","SNAP","ARP","IPv4","IPv6");
var oTProtocolFilter = Array("Any","ICMP","UDP","TCP","Other");
var oTYesOrNo = Array("No","Yes");

var singleAceConfigDate;
var AceIdMapTbl = Array();
var aclConfig = Array();
var aclConfigIdx = 0;
var first_bind_ace_id = 0xFFFF;
var defaultAclUser = 0;
var debug = 0;
var hasAclV2 = 1;

var timerID;
var timeOut = settingsRefreshInterval();

var idx = 0;
var idx_user_id         = idx++;
var idx_copy_to_cpu     = idx++;
var idx_hit_me_once     = idx++;
var idx_conflict        = idx++;
var idx_isid            = idx++;
var idx_ace_id          = idx++;
var idx_next_ace_id     = idx++;
var idx_action          = idx++;
var idx_ingress_port    = idx++;
var idx_rate_limiter    = idx++;
var idx_port_copy       = idx++;
var idx_mirror          = idx++;
var idx_dmac_filter     = idx++;
var idx_dmac            = idx++;
var idx_counters        = idx++;
var idx_frame_type      = idx++;
var idx_protocol_filter, idx_protocol, idx_ip_flags1;
var idx_sip_filter, idx_sip, idx_sip_mask, idx_dip_filter, idx_dip, idx_dip_mask;
var idx_smac_filter, idx_smac;
var idx_arp_sip_filter, idx_arp_sip, idx_arp_sip_mask, idx_arp_dip_filter, idx_arp_dip, idx_arp_dip_mask;
var idx_next_header_filter, idx_next_header, idx_sip_v6_filter, idx_sip_v6, idx_sip_v6_mask;
var idx_ether_type_filter, idx_ether_type;
idx_protocol_filter     = idx_smac_filter      = idx_next_header_filter = idx++;
idx_protocol            = idx_smac             = idx_next_header        = idx++;
idx_ip_flags1           = idx_arp_sip_filter   = idx_ether_type_filter  = idx_sip_v6_filter = idx++;
idx_sip_filter          = idx_arp_sip          = idx_ether_type         = idx_sip_v6        = idx++;
idx_sip                 = idx_arp_sip_mask     = idx_sip_v6_mask        = idx++;
idx_sip_mask            = idx_arp_dip_filter   = idx++;
idx_dip_filter          = idx_arp_dip          = idx++;
idx_dip                 = idx_arp_dip_mask     = idx++;
idx_dip_mask            = idx++;
var idx_sport_filter, idx_sport_low, idx_sport_high, idx_dport_filter, idx_dport_low, idx_dport_high;
var idx_icmp_type_filter, idx_icmp_type, idx_icmp_code_filter, idx_icmp_code;
idx_sport_filter        = idx_icmp_type_filter = idx++;
idx_sport_low           = idx_icmp_type        = idx++;
idx_sport_high          = idx_icmp_code_filter = idx++;
idx_dport_filter        = idx_icmp_code        = idx++;
idx_dport_low           = idx++;
idx_dport_high          = idx++;
var idx_tcp_flags0      = idx++;
var idx_tcp_flags1      = idx++;
var idx_tcp_flags2      = idx++;
var idx_tcp_flags3      = idx++;
var idx_tcp_flags4      = idx++;
var idx_tcp_flags5      = idx++;

function convertIpStr2Val(ip_str)
{
    var myReg = /^((?:0x)[0-9A-Fa-f]{1,2}|[0][0-7]{0,3}|[1-9]\d{0,2})\.((?:0x)[0-9A-Fa-f]{1,2}|[0][0-7]{0,3}|[1-9]\d{0,2})\.((?:0x)[0-9A-Fa-f]{1,2}|[0][0-7]{0,3}|[1-9]\d{0,2})\.((?:0x)[0-9A-Fa-f]{1,2}|[0][0-7]{0,3}|[1-9]\d{0,2})$/;
    if(myReg.test(ip_str)) {
        return (parseInt(RegExp.$1, 10) << 24) + (parseInt(RegExp.$2, 10) << 16) + (parseInt(RegExp.$3, 10) << 8) + parseInt(RegExp.$4, 10);
    }
    return 0;
}

function addRow(frag, values, idx)
{
    AceIdMapTbl[idx] = values[idx_ace_id];

    var i, mask_val;
    var tr = CreateStyledElement("tr", idx % 2 ? "config_odd" : "config_even");

    if (debug) {
        addTextCell(tr, values[idx_isid], "cl");
        addTextCell(tr, values[idx_ace_id], "cl");
        addTextCell(tr, values[idx_next_ace_id], "cl");
    }

    // User
    var fld_option = document.getElementById("aclUser").options;
    if (fld_option.length > 1) {
        var acl_user_id = values[idx_user_id];
        for (i = 1; i < fld_option.length - 1; i++) {
            if (acl_user_id == fld_option[i].value) {
                addTextCell(tr, fld_option[i].text, "cl");
                break;
            }
        }
    }

    // Ingress port
    if (hasAclV2) {
        addTextCell(tr, unescape(values[idx_ingress_port]), "cl");
    } else {
        addTextCell(tr, values[idx_ingress_port] == "All" ? values[idx_ingress_port] : configPortName(values[idx_ingress_port], 1), "cl");
    }

    // Frame type
    if (oTFrameType[parseInt(values[idx_frame_type], 10)] == "IPv4") {
        var ip_protocol = oTProtocolFilter[parseInt(values[idx_protocol_filter], 10)];
        var ip_frame_text = oTFrameType[parseInt(values[idx_frame_type], 10)];
        if (ip_protocol == "ICMP") {
            ip_frame_text += "/ICMP";
            if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) == 8 && parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_code], 10) === 0) {
                ip_frame_text += " Ping Request";
            } else if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) === 0 && parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_code], 10) === 0) {
                ip_frame_text += " Ping Reply";
            } else if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) == 3) {
                ip_frame_text += " Destination Unreachable";
            } else if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) == 5) {
                ip_frame_text += " Redirect";
            } else if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) == 11) {
                ip_frame_text += " Time Exceeded";
            } else if (parseInt(values[idx_icmp_type_filter], 10) == 1 && parseInt(values[idx_icmp_type], 10) == 12) {
                ip_frame_text += " Parameter Problem";
            } else if (parseInt(values[idx_ip_flags1], 10) == 1) { //ICMP Fragment
                ip_frame_text += " Fragment";
            } else if (parseInt(values[idx_dmac_filter], 10) == 2) { //dmac_filter: Broadcast
                ip_frame_text += "/Smurf";
            }
        } else if (ip_protocol == "UDP") {
            ip_frame_text += "/UDP";
            if (parseInt(values[idx_sport_filter], 10) == 1 || parseInt(values[idx_dport_filter], 10) == 1) { //sport_filter/dport_filter: Specific
                var udp_port;
                if (parseInt(values[idx_sport_filter], 10) == 1) {
                    udp_port = parseInt(values[idx_sport_low], 10);
                } else {
                    udp_port = parseInt(values[idx_dport_low], 10);
                }
                if (udp_port == 7) {
                    ip_frame_text += " 7 Echo";
                } else if (udp_port == 19) {
                    ip_frame_text += " 19 Chargen";
                } else if (udp_port == 53) {
                    ip_frame_text += " 53 DNS";
                } else if (udp_port == 67) {
                    ip_frame_text += " 67 DHCP Client";
                } else if (udp_port == 68) {
                    ip_frame_text += " 68 DHCP Server";
                } else if (udp_port == 69) {
                    ip_frame_text += " 69 TFTP";
                } else if (udp_port == 161) {
                    ip_frame_text += " 161 SNMP";
                } else if (udp_port == 162) {
                    ip_frame_text += " 162 SNMP Traps";
                } else {
                    ip_frame_text = ip_frame_text + " " + udp_port;
                }
            } else if (parseInt(values[idx_sport_filter], 10) == 2 || parseInt(values[idx_dport_filter], 10) == 2) { //sport_filter/dport_filter: range
                var udp_port_low, udp_port_high;
                if (parseInt(values[idx_sport_filter], 10) == 1) {
                    udp_port_low = parseInt(values[idx_sport_low], 10);
                    udp_port_high = parseInt(values[idx_sport_high], 10);
                } else {
                    udp_port_low = parseInt(values[idx_dport_low], 10);
                    udp_port_high = parseInt(values[idx_dport_high], 10);
                }
                ip_frame_text = ip_frame_text + " " + udp_port_low + "-" + udp_port_high;
            }
        } else if (ip_protocol == "TCP") {
            ip_frame_text += "/TCP";
            if (parseInt(values[idx_sport_filter], 10) == 1 || parseInt(values[idx_dport_filter], 10) == 1) { //sport_filter/dport_filter: Specific
                var tcp_port;
                if (parseInt(values[idx_sport_filter], 10) == 1) {
                    tcp_port = parseInt(values[idx_sport_low], 10);
                } else {
                    tcp_port = parseInt(values[idx_dport_low], 10);
                }
                if (tcp_port == 7) {
                    ip_frame_text += " 7 Echo";
                } else if (tcp_port == 19) {
                    ip_frame_text += " 19 Chargen";
                } else if (tcp_port == 20) {
                    ip_frame_text += " 20 FTP Date Port";
                } else if (tcp_port == 21) {
                    ip_frame_text += " 21 FTP Control Port)";
                } else if (tcp_port == 23) {
                    ip_frame_text += " 23 Telnet";
                } else if (tcp_port == 25) {
                    ip_frame_text += " 25 SMTP";
                } else if (tcp_port == 53) {
                    ip_frame_text += " 53 DNS";
                } else if (tcp_port == 80) {
                    ip_frame_text += " 80 HTTP";
                } else if (tcp_port == 110) {
                    ip_frame_text += " 110 POP3";
                } else if (tcp_port == 139) {
                    ip_frame_text += " 139 SAMBA";
                } else if (tcp_port == 143) {
                    ip_frame_text += " 143 IMAP";
                } else if (tcp_port == 443) {
                    ip_frame_text += " 443 HTTPS";
                } else if (tcp_port == 1863) {
                    ip_frame_text += " 1863 MSN";
                } else if (tcp_port == 2049) {
                    ip_frame_text += " 2049 NFS";
                } else if (tcp_port == 5050) {
                    ip_frame_text += " 5050 Yahoo Messenger-Chat";
                } else if (tcp_port == 5101) {
                    ip_frame_text += " 5101 Yahoo Messenger-P2P";
                } else if (tcp_port == 5222) {
                    ip_frame_text += " 5222 Google Talk";
                } else {
                    ip_frame_text = ip_frame_text + " " + tcp_port;
                }
            } else if (parseInt(values[idx_sport_filter], 10) == 2 || parseInt(values[idx_dport_filter], 10) == 2) { //sport_filter/dport_filter: range
                var tcp_port_low, tcp_port_high;
                if (parseInt(values[idx_sport_filter], 10) == 2) {
                    tcp_port_low = parseInt(values[idx_sport_low], 10);
                    tcp_port_high = parseInt(values[idx_sport_high], 10);
                } else {
                    tcp_port_low = parseInt(values[idx_dport_low], 10);
                    tcp_port_high = parseInt(values[idx_dport_high], 10);
                }
                if (tcp_port_low == 137 && tcp_port_high == 139) {
                    ip_frame_text += " 137-139 NetBIOS";
                } else {
                   ip_frame_text = ip_frame_text + " " + tcp_port_low + "-" + tcp_port_high;
                }
            } else if (parseInt(values[idx_sport_filter], 10) === 0 && parseInt(values[idx_dport_filter], 10) === 0) { //any
                var tcp_flags_cnt = 0;
                if (parseInt(values[idx_tcp_flags0], 10) != 2) {
                    ip_frame_text += " FIN";
                    tcp_flags_cnt++;
                }
                if (parseInt(values[idx_tcp_flags1], 10) != 2) {
                    ip_frame_text += ((tcp_flags_cnt >= 1) ? "/" : " ") + "SYN";
                    tcp_flags_cnt++;
                }
                if (parseInt(values[idx_tcp_flags2], 10) != 2) {
                    ip_frame_text += ((tcp_flags_cnt >= 1) ? "/" : " ") + "RST";
                    tcp_flags_cnt++;
                }
                if (parseInt(values[idx_tcp_flags3], 10) != 2) {
                    ip_frame_text += ((tcp_flags_cnt >= 1) ? "/" : " ") + "PSH";
                    tcp_flags_cnt++;
                }
                if (parseInt(values[idx_tcp_flags4], 10) != 2) {
                    ip_frame_text += ((tcp_flags_cnt >= 1) ? "/" : " ") + "ACK";
                    tcp_flags_cnt++;
                }
                if (parseInt(values[idx_tcp_flags5], 10) != 2) {
                    ip_frame_text += ((tcp_flags_cnt >= 1) ? "/" : " ") + "URG";
                }
            }
        } else if (ip_protocol == "Other") {
            ip_frame_text = ip_frame_text + "/Other " + values[idx_protocol];
        } else if (parseInt(values[idx_dmac_filter], 10) == 1) { //dmac_filter: Multicast
            ip_frame_text += "/Multicast IP Stream";
        } else if ((parseInt(values[idx_ace_id], 10) >= first_bind_ace_id)) {
            ip_frame_text = ip_frame_text + " SMAC/SIP Binding - " + values[idx_sip];
        } else if (parseInt(values[idx_ip_flags1], 10) == 1) { //IP Fragment
            ip_frame_text += "/IP Fragment";
        }
        if (parseInt(values[idx_sip_filter], 10) !== 0) {
            ip_frame_text += " SIP:" + values[idx_sip];
            mask_val = convertIpStr2Val(values[idx_sip_mask]);
            for (i = 31, j = 0; i >= 0; i--) {
                if (mask_val & 1 << i) {
                    j++;
                }
            }
            ip_frame_text += "/" + j;
        }
        if (parseInt(values[idx_dip_filter], 10) !== 0) {
            ip_frame_text += " DIP:" + values[idx_dip];
            mask_val = convertIpStr2Val(values[idx_dip_mask]);
            for (i = 31, j = 0; i >= 0; i--) {
                if (mask_val & 1 << i) {
                    j++;
                }
            }
            ip_frame_text += "/" + j;
        }
        addTextCell(tr, ip_frame_text, "cl");
    } else if (oTFrameType[parseInt(values[idx_frame_type], 10)] == "IPv6") {
        var ipv6_frame_text = oTFrameType[parseInt(values[idx_frame_type], 10)];
        if (parseInt(values[idx_next_header_filter], 10)) {
            ipv6_frame_text += " - NH:";
            if (values[idx_next_header] == 1) { 
                ipv6_frame_text += "ICMPv4";
            } else if (values[idx_next_header] == 2) { 
                ipv6_frame_text += "IGMPv4";
            } else if (values[idx_next_header] == 4) { 
                ipv6_frame_text += "IP in IP Encapsulation";
            } else if (values[idx_next_header] == 6) { 
                ipv6_frame_text += "TCP";
            } else if (values[idx_next_header] == 8) { 
                ipv6_frame_text += "EGP";
            } else if (values[idx_next_header] == 17) { 
                ipv6_frame_text += "UDP";
            } else if (values[idx_next_header] == 41) { 
                ipv6_frame_text += "IPv6";
            } else if (values[idx_next_header] == 46) { 
                ipv6_frame_text += "RSVP";
            } else if (values[idx_next_header] == 50) { 
                ipv6_frame_text += "ESP";
            } else if (values[idx_next_header] == 51) { 
                ipv6_frame_text += "AH";
            } else if (values[idx_next_header] == 58) { 
                ipv6_frame_text += "ICMPv6";
            } else {
                ipv6_frame_text += values[idx_next_header];
            }
        }
        if (parseInt(values[idx_sip_v6_filter], 10)) {
            ipv6_frame_text += " SIP6:[" + values[idx_sip_v6];
            if (parseInt(values[idx_sip_v6_mask], 16) != 0xFFFFFFFF) {
                ipv6_frame_text += "/0x" + values[idx_sip_v6_mask];
            }
            ipv6_frame_text += "]";
        }
        addTextCell(tr, ipv6_frame_text, "cl");
    } else {
        if ((parseInt(values[idx_ace_id], 10) >= first_bind_ace_id) && (oTFrameType[parseInt(values[idx_frame_type], 10)] != "IPv4")) {
            addTextCell(tr, "SMAC/SIP Binding - " + values[idx_smac], "cl");
        } else if (oTFrameType[parseInt(values[idx_frame_type], 10)] == "EType" && parseInt(values[idx_ether_type_filter], 10)) {
            addTextCell(tr, oTFrameType[parseInt(values[idx_frame_type], 10)] + "- 0x" + values[idx_ether_type], "cl");
        } else {
            addTextCell(tr, oTFrameType[parseInt(values[idx_frame_type], 10)], "cl");
        }
    }

    // Action
    addTextCell(tr, oTAction[parseInt(values[idx_action], 10)], "cl");

    // Rate limter
    addTextCell(tr, oTRateLimiter[parseInt(values[idx_rate_limiter], 10)], "cl");

    if (hasAclV2) {
        // Port copy
        if (values[idx_port_copy]) {
            addTextCell(tr, unescape(values[idx_port_copy], 10), "cl");
        } else {
            addTextCell(tr, "Disabled", "cl");
        }
        // Mirror
        addTextCell(tr, oTMirror[parseInt(values[idx_mirror], 10)], "cr");
    } else {
        // Port copy
        addTextCell(tr, oTPortCopy[parseInt(values[idx_port_copy], 10)], "cr");
    }

    // copy_to_cpu
    addTextCell(tr, oTYesOrNo[parseInt(values[idx_copy_to_cpu], 10)], "cl");

    // hit_me_once
    addTextCell(tr, oTYesOrNo[parseInt(values[idx_hit_me_once], 10)], "cl");

    // Counter
    addTextCell(tr, parseInt(values[idx_counters], 10), "cr");

    // Conflict
    addTextCell(tr, oTYesOrNo[parseInt(values[idx_conflict], 10)], "cl");

    frag.appendChild(tr);   // Add row to fragment
}

function addTableHeader(frag)
{
    var tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr, "User", "param_label");
    if (debug) {
        addTextHeaderCell(tr, "ISID", "param_label");
        addTextHeaderCell(tr, "ACE ID", "param_label");
        addTextHeaderCell(tr, "NEXT ACE ID", "param_label");
    }
    addTextHeaderCell(tr, "Ingress Port", "param_label");
    addTextHeaderCell(tr, "Frame Type", "param_label");
    addTextHeaderCell(tr, "Action", "param_label");
    addTextHeaderCell(tr, "Rate Limiter", "param_label");
    if (configArchLuton28) {
        addTextHeaderCell(tr, "Port Copy", "param_label");
    } else {
        addTextHeaderCell(tr, "Port Redirect", "param_label");
    }
    if (hasAclV2) {
        addTextHeaderCell(tr, "Mirror", "param_label");
    }
    addTextHeaderCell(tr, "CPU", "param_label");
    addTextHeaderCell(tr, "CPU Once", "param_label");
    addTextHeaderCell(tr, "Counter", "param_label");
    addTextHeaderCell(tr, "Conflict", "param_label");
    frag.appendChild(tr);
}

function updateFuncBar(enable)
{
    if (enable) {
        if (document.getElementById("aclUser").options.length > 2) {
            document.getElementById("aclUser").style.visibility = "visible";
        }
        document.getElementById("refresh").style.visibility = "visible";
        document.getElementById("update").style.visibility = "hidden";
    } else {
        document.getElementById("aclUser").style.visibility = "hidden";
        document.getElementById("refresh").style.visibility = "hidden";
    }
}

function updateAclUser(values)
{
    var optionItem, fld = document.getElementById("aclUser");

    while (fld.options.length > 1) {
        fld.removeChild(fld.lastChild);
    }

    // Get defaut ACL user
    defaultAclUser = parseInt(values[0], 10);

    // Add new option item
    for (i = 1; i < values.length; i++) {
        if (!values[i]) {
            continue;
        }
        optionItem = document.createElement('OPTION');
        fld.options.add(optionItem);
        optionItem.innerHTML = values[i];
        optionItem.value = i - 1;
    }

    // Add option item: conflict
    optionItem = document.createElement('OPTION');
    fld.options.add(optionItem);
    optionItem.innerHTML = "Conflict";
    optionItem.value = -2;

    // Set default select item
    for (i = 0; i < fld.options.length; i++) {
        if (defaultAclUser == fld.options[i].value) {
            fld.options[i].setAttribute("selected", true);
            fld.options[i].setAttribute("defaultSelected", true);
            fld.options[i].defaultSelected = true;
            break;
        }
    }
}

function processUpdate(req, ref)
{
    var rowwidth = 10;
    if (typeof(configHasAclV2) == "function") {
        hasAclV2 = configHasAclV2();
    }
    if (hasAclV2) {
        rowwidth++;
    }
    if (req.responseText) {
        var values = req.responseText.split(",");
        updateAclUser(values[0].split("/"));
        aclConfig = values[1].split("|");
        first_bind_ace_id = parseInt(values[2], 10);
        aclConfigIdx = aclConfig.length;

        // Create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        addTableHeader(frag);
        var ace_cnt = 0;
        for (var i = 0; i < aclConfig.length; i++) {
            if (aclConfig[i]) {
                var pval = aclConfig[i].split("/");
                addRow(frag, pval, i);
                ace_cnt++;
            }
        }

        if (parseInt(ace_cnt, 10) === 0) {
            var tr = document.createElement("tr");
            addTextCell(tr, "No entries", "cl", rowwidth);
            frag.appendChild(tr);   // Add row to fragment
        }

        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
    }

    var autorefresh = document.getElementById('autorefresh');
    if (autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
    }

    updateFuncBar(1);
}

function requestUpdate()
{
    // Format: [select_user_id]/[user_name1]/[user_name2]/...,[user_id]/[copy_to_cpu]/[hit_me_once]/[conflict]/[isid]/[ace_id]/[next_ace_id]/[action]/[ingress_port]/[rate_limiter]/[port_copy_1]:[port_copy_2]:.../[mirror]/[dmac_filter]/[dmac_mac]/[counters]/[frame_type]/[frame_type_filed]|...
    // [frame_type_filed]
    // - [frame_type] = Any
    // - [frame_type] = Ethernet [smac_filter]/[smac]/[ether_type_filter]/[ether_type]
    // - [frame_type] = ARP      [smac_filter]/[smac]/[arp_sip_filter]/[arp_sip]/[arp_sip_mask]/[arp_dip_filter]/[arp_dip]/[arp_dip_mask]
    // - [frame_type] = IPv4, [protocol] = Any/Other [protocol_filter]/[protocol]/[ip_flags1]/[sip_filter]/[sip]/[sip_mask]/[dip_filter]/[dip]/[dip_mask]
    // - [frame_type] = IPv4, [protocol] = ICMP      [protocol_filter]/[protocol]/[ip_flags1]/[sip_filter]/[sip]/[sip_mask]/[dip_filter]/[dip]/[dip_mask]/[icmp_type_filter]/[icmp_type]/[icmp_code_filter]/[icmp_code]
    // - [frame_type] = IPv4, [protocol] = UDP       [protocol_filter]/[protocol]/[ip_flags1]/[sip_filter]/[sip]/[sip_mask]/[dip_filter]/[dip]/[dip_mask]/[sport_filter]/[sport_low]/[sport_high]/[dport_filter]/[dport_low]/[dport_high]
    // - [frame_type] = IPv4, [protocol] = TCP       [protocol_filter]/[protocol]/[ip_flags1]/[sip_filter]/[sip]/[sip_mask]/[dip_filter]/[dip]/[dip_mask]/[sport_filter]/[sport_low]/[sport_high]/[dport_filter]/[dport_low]/[dport_high]/[tcp_flags0]/[tcp_flags1]/[tcp_flags2]/[tcp_flags3]/[tcp_flags4]/[tcp_flags5]
    // - [frame_type] = IPv6  [next_header_filter]/[next_header]/[sip_v6_filter]/[sip_v6]/[sip_v6_mask]

    if (debug) {
        var req = "-1/Static/IP Source Guard/ARP Inspection/UPnP/DHCP,4/1/0/0/0/1/2/0/2/0/0/1%2C3/1/0/0/00-00-00-00-00-02/0/3/2/17/2/0/0.0.0.0/0.0.0.0/0/0.0.0.0/0.0.0.0/0/0/65535/1/67/67|4/1/0/0/0/2/0/0/2/0/0/1%2C4/0/0/0/00-00-00-00-00-02/0/3/2/17/2/0/0.0.0.0/0.0.0.0/0/0.0.0.0/0.0.0.0/0/0/65535/1/68/68";
        processUpdate(req, 'aclData');
    }
    updateFuncBar(0);
    var new_url = "/stat/acl?aclUser=" + document.getElementById('aclUser').value;
    loadXMLDoc(SpomAddSidArg(new_url), processUpdate, 'aclData');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function chkRefresh(fld)
{
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate(0);
    }
}

function changeAclUser(fld)
{
    updateFuncBar(0);
    var new_url = "/stat/acl?aclUser=" + fld.value;
    loadXMLDoc(SpomAddSidArg(new_url), processUpdate, 'aclData');
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<div class="refreshbar">
 <form action="#">
  <select id="aclUser" style="visibility:hidden;" onchange="changeAclUser(this);">
   <option value= "-1">Combined</option>
  </select>
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
  <input type="button" id="refresh" value="Refresh" onclick="requestUpdate(); this.blur();" style="visibility:hidden;">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

<div id="control_bar_tbl">
<h1>ACL Status <span id="display_sid"></span></h1>
<table summary="ACL Status" class="display">
 <tbody id="aclData">
 </tbody>
</table>
</div>

<p>
<input type="hidden" id="submit_sid" name="sid">
</p>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
