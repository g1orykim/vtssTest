<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>MVR Channel Groups</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript" src="lib/format.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_mvr_groups_info.htm";

var grpPortMax = 53;        //configNormalPortMax + SpomStackPortCount();
var timerID = null;
var LastVid, LastGroup;

function addClonedNode(tr, idx, val, proto)
{
    var td = CreateTd("c");

    if (parseInt(val, 10)) {
        addCell(tr, td, proto.cloneNode(1));
    } else {
        var field = document.createElement('img');
        field.src = idx % 2 ? "images/emptyodd.gif" : "images/emptyeven.gif";
        field.border = 0;
        addCell(tr, td, field);
    }
}

function checkForm()
{
    if (!isWithinRange("StartVid", 1, 4095, "'Start Vid'")) {
        return false;
    }

    var fld = document.getElementById("StartGroup");
    if (fld) {
        if (String(fld.value) === "") {
            alert("Please input valid IPv4/IPv6 multicast address.");
            return false;
        }

        if (isIpv6Str("StartGroup", "'Group Address'", 3, true)) {
            if (String(fld.value) !== "::") {
                alert("Please input valid IPv4/IPv6 multicast address.");
                return false;
            }
        } else {
            if (!isIpv6Str("StartGroup", "'Group Address'", 2, true) &&
                !isIpStr("StartGroup", false, "'Group Address'", 3, true)) {
                alert("Please input valid IPv4/IPv6 multicast address.");
                return false;
            }
        }
    }

    if (!isWithinRange("NumberOfEntries", 1, 99, "'Number of entries'")) {
        return false;
    }

    return true; // Feed the chickens and go home
}

function addGroupRow(frag, values)
{
    var j, idx, tr, group, bullet = document.getElementById("bullet");

    for (idx = 0; idx < values.length; idx++) {
        group = values[idx].split(",");
        if (parseInt(group.length, 10) == 1) {
            break;
        }

        LastVid = group[0];
        LastGroup = group[1];

        tr = CreateStyledElement("tr", idx % 2 ? "display_odd" : "display_even");

        addTextCell(tr, group[0], "cr");
        addTextCell(tr, group[1], "cr");

        for (j = 2; j < group.length; j++ ) {
            addClonedNode(tr, idx, group[j], bullet);
        }

        frag.appendChild(tr);       // Add row to fragment
    }
}

function addGroupsTableHeader(frag, portCount)
{
    var i, hdr_tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(hdr_tr, " ", "param_label", 2);
    addTextHeaderCell(hdr_tr, "Port Members", "param_label", portCount);
    frag.appendChild(hdr_tr);

    hdr_tr = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(hdr_tr, "VLAN ID", "param_label");
    addTextHeaderCell(hdr_tr, "Groups", "param_label");
    for (i = configPortMin; i <= portCount; i++) {
        addTextHeaderCell(hdr_tr, i, "portno");
    }
    frag.appendChild(hdr_tr);
}

function processUpdate(req, ref)
{
    LastVid = LastGroup = "";

    /*
        Format:
        <startVid>|<startGroup>|<NumberOfEntries>|<portCnt>|[vid],[groups],[p1_is_mbr],[p2_is_mbr],[p3_is_mbr],.../...
    */

    if (req.responseText) {
        var mvrGrpInfo = req.responseText.split("|");

        // Update start entries
        document.getElementById("StartVid").value = mvrGrpInfo[0];
        document.getElementById("StartGroup").value = mvrGrpInfo[1];
        document.getElementById("NumberOfEntries").value = mvrGrpInfo[2];

        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();

        // Groups table
        var portCnt = parseInt(mvrGrpInfo[3], 10);
        addGroupsTableHeader(frag, portCnt);

        if (mvrGrpInfo[4] == "NoEntries") {
            var idx, td, field, finalSpan = 0, tr = CreateStyledElement("tr", "notice");

            addTextCell(tr, "No more entries", "cl", 2);
            if (grpPortMax > portCnt) {
                finalSpan += portCnt;
            } else {
                finalSpan += grpPortMax;
            }
            for (idx = 0; idx < finalSpan; idx++) {
                td = CreateTd("c");
                field = document.createElement('img');
                field.src = "images/emptyeven.gif";
                field.border = 0;
                addCell(tr, td, field);
            }

            frag.appendChild(tr);
        } else {
            addGroupRow(frag, mvrGrpInfo[4].split("/"));
        }

        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }

        // Update the timer
        var autorefresh = document.getElementById('autoRefresh');
        if (autorefresh.checked) {
            if (timerID) {
                clearTimeout(timerID);
            }
            timerID = setTimeout("requestUpdate('Refresh')", settingsRefreshInterval());
        }
    } else {
        SpomHandleError();
    }

    document.getElementById("update").style.visibility = "hidden";
    document.getElementById("autoRefresh").disabled = false;
    document.getElementById("refresh").disabled = false;
    document.getElementById("getFirst").disabled = false;
    document.getElementById("getNext").disabled = false;
}

function requestUpdate(type)
{
    if (SpomNavigationLoading()) {
        return; // Bail out, navigation will trigger update
    }

    document.getElementById("update").style.visibility = "visible";
    document.getElementById("autoRefresh").disabled = true;
    document.getElementById("refresh").disabled = true;
    document.getElementById("getFirst").disabled = true;
    document.getElementById("getNext").disabled = true;

    if (type == "NextEntries") {
        loadXMLDoc(SpomAddSidArg("/stat/mvr_groups_info?GetNextEntry=1&DynStartVid=" + LastVid +
                                 "&DynStartGroup=" + LastGroup +
                                 "&DynNumberOfEntries=" + document.getElementById("NumberOfEntries").value), processUpdate, 'inputData');
    } else if (type == "Refresh") {
        loadXMLDoc(SpomAddSidArg("/stat/mvr_groups_info?GetNextEntry=0&DynStartVid=" + document.getElementById("StartVid").value +
                                 "&DynStartGroup=" + document.getElementById("StartGroup").value +
                                 "&DynNumberOfEntries=" + document.getElementById("NumberOfEntries").value), processUpdate, 'inputData');
    } else {
        loadXMLDoc(SpomAddSidArg("/stat/mvr_groups_info?GetNextEntry=0&DynStartVid=&DynStartGroup=&DynNumberOfEntries=" + document.getElementById("NumberOfEntries").value), processUpdate, 'inputData');
    }

    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function clickCtrlButton(type)
{
    if (checkForm()) {
        requestUpdate(type);
    } else if (document.getElementById('autoRefresh').checked) {
        document.getElementById('autoRefresh').checked = false;
    }
}

function chkRefresh(fld)
{
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }

        timerID = null;
    } else {
        requestUpdate('Refresh');
    }
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid); // Save current SID
    requestUpdate("GetFirstEntry");
}

 </script>
</head>

<body class="content" onload="requestUpdate('GetFirstEntry');">

<h1>MVR Channels (Groups) Information <span id="display_sid"></span></h1>

<div class="refreshbar">
 <form action="#">
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" id="autoRefresh" name="autoRefresh" onclick="chkRefresh(this);">
  <input type="button"   id="refresh"  value="Refresh" onclick="requestUpdate('Refresh'); this.blur();">
  <input type="button"   id="getFirst" value=" |<< "   title="First page" onclick="clickCtrlButton('GetFirstEntry');">
  <input type="button"   id="getNext"  value=" >> "    title="Next page" onclick="clickCtrlButton('NextEntries');">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

<form action="#">
<p>
  <span class="displaytext">Start from VLAN</span>
  <input type="text" id="StartVid" name="StartVid" maxlength="4" value="" size="4">
  <span class="displaytext">and Group Address</span>
  <input type="text" id="StartGroup" name="StartGroup" maxlength="40" value="" size = "40">
  <span class="displaytext"> with </span>
  <input type="text" id="NumberOfEntries" name="NumberOfEntries" maxlength="2" value="20" size="2">
  <span class="displaytext"> entries per page. </span>
</p>
</form>

<table id="MVR_ASM_Information" summary="MVR Channels (Groups) Information" cellspacing="0" class="display">
  <tbody id="inputData"></tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">
</p>

<!-- IE caching bug -->
<div style="visibility: hidden;">
 <!-- <div style="padding : 0 4px 0 4px; font-size: 14pt" id="bullet">&bull;</div> -->
 <img id="bullet" alt="" src="images/yes.gif">
</div>

</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
