<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>PTP Clock's Port Data Set Configuration Page</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_ptp_ports_per_clock_config.htm";
var delay_mechanism_method = Array();
var ptp_clock_config;
var ptp_table_data;
var global_clock_inst = 0;
var port_data_set = Array();

// This piece of code makes sure that a specific port can be selected
// directly, when navigating from a hyperlink on a different page.
var arg_idx = document.URL.indexOf('?');
if(arg_idx != -1) {
    var args = document.URL.substring(arg_idx+1, document.URL.length);
    var tup = args.split('=');
    if(tup.length == 2) {
        if(tup[0] == 'clock_inst') {
            global_clock_inst = parseInt(tup[1]);
        }
    }
}

function addRow(index, frag, values) {
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    var per_port_params = values.split("/");
    var fld;
    addTextCell(tr, per_port_params[0], "c");
    addTextCell(tr, per_port_params[1], "c");
    addTextCell(tr, per_port_params[2], "c");
    addTextCell(tr, per_port_params[3], "c");
    fld = addInputCell(tr, per_port_params[4], "c", "anv_" + global_clock_inst + "_" + per_port_params[0], 2);
    fld.setAttribute("maxLength", 2);
    fld = addInputCell(tr, per_port_params[5], "c", "ato_" + global_clock_inst + "_" + per_port_params[0], 2);
    fld.setAttribute("maxLength", 2);
    fld = addInputCell(tr, per_port_params[6], "c", "syv_" + global_clock_inst + "_" + per_port_params[0], 2);
    fld.setAttribute("maxLength", 2);
    addSelectCell(tr, delay_mechanism_method, delay_mechanism_method, per_port_params[7], "c","dlm_" + global_clock_inst + "_" + per_port_params[0]);

    fld = addInputCell(tr, per_port_params[8], "c", "mpr_" + global_clock_inst + "_" + per_port_params[0], 2);
    fld.setAttribute("maxLength", 2);

    fld = addInputCell(tr, per_port_params[9], "c", "delay_assymetry_" + global_clock_inst + "_" + per_port_params[0], 7);
    fld.setAttribute("maxLength", 7);
    fld = addInputCell(tr, per_port_params[10], "c", "ingress_latency_" + global_clock_inst + "_" + per_port_params[0], 7);
    fld.setAttribute("maxLength", 7);
    fld = addInputCell(tr, per_port_params[11], "c", "egress_latency_" + global_clock_inst + "_" + per_port_params[0], 7);
    fld.setAttribute("maxLength", 7);
    addTextCell(tr, per_port_params[12], "c");

    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref)
{
    if (redirectOnError(req))
        return;
    if (req.responseText) {
        var form_var = document.getElementById("ptp_clock_ports_inst");
        addHiddenParam(form_var, "clock_inst", global_clock_inst);

        ptp_table_data = req.responseText.split("^");
        delay_mechanism_method =  ptp_table_data[1].split("/");

        ptp_clock_config = ptp_table_data[2].split("#");      
        {
           // Port Data Set
           var frag = document.createDocumentFragment();
           var fld;
           var elem;
           port_data_set = ptp_clock_config[1].split("$");
           for(var index = 1; index < port_data_set.length; index++ ) {
              addRow(index, frag, port_data_set[index]);
           }
           elem = document.getElementById("PortDataset_tbody");
           clearChildNodes(elem);
           elem.appendChild(frag);
        }
    } else {
        SpomHandleError();
    }
}

function requestUpdate() {
    if(SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update
    loadXMLDoc(SpomAddSidArg("/config/ptp_clock_ports_config?clock_inst=" + global_clock_inst), processUpdate, null);

    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function checkForm(form)
{
var chk_error = false;
    for(var index = 1; index < port_data_set.length; index++ ) {
        var per_port_params = port_data_set[index].split("/");
        if (!isWithinRange("anv_" + global_clock_inst + "_" + per_port_params[0], -3, 4, "Announce Interval")) {
            return false;
        }
        if (!isWithinRange("ato_" + global_clock_inst + "_" + per_port_params[0], -1, 10, "Announce Receive Timeout")) {
            return false;
        }
        if (!isWithinRange("syv_" + global_clock_inst + "_" + per_port_params[0], -7, 4, "Sync Interval")) {
            return false;
        }
        if (!isWithinRange("mpr_" + global_clock_inst + "_" + per_port_params[0], -7, 5, "Mininum Delay Required Interval")) {
            return false;
        }
        var delay_asy = document.getElementById("delay_assymetry_"+ global_clock_inst + "_" + per_port_params[0]);
        if (delay_asy.value) { 
            if (delay_asy.value != per_port_params[9]) {
                // Check for Delay Assymetry
                if(!isWithinRange("delay_assymetry_"+ global_clock_inst + "_" + per_port_params[0], -100000, 100000, "Delay Assymetry")) {
                    return false;
                }
            }
        }

        var ing_laten = document.getElementById("ingress_latency_"+ global_clock_inst + "_" + per_port_params[0]);
        if (ing_laten.value) {
            if (ing_laten.value != per_port_params[10]) {
                // Check for Ingress Latency
                if(!isWithinRange("ingress_latency_"+ global_clock_inst + "_" + per_port_params[0], -100000, 100000, "Ingress Latency")) {
                    return false;
                }
           }
        }

        var eg_laten = document.getElementById("egress_latency_"+ global_clock_inst + "_" + per_port_params[0]);
        if (eg_laten.value) {
            if (eg_laten.value != per_port_params[11]) {
                // Check for Egress Latency
                if(!isWithinRange("egress_latency_"+ global_clock_inst + "_" + per_port_params[0], -100000, 100000, "Egress Latency")) {
                    return false;
                }
            }
        }
    }
    return true;                // Feed the chickens and go home
}

function resetForm(form)
{
    form.reset();
    updateImage();
}


</script>
</head>

<body class="content" onload="requestUpdate();">
<form  id= "ptp_clock_ports_inst"  method="POST" action="/config/ptp_clock_ports_config" onsubmit = "return checkForm(this);">

<h1>PTP Clock's Port Data Set Configuration <span id="display_sid"></span></h1>
<table summary="Port DataSet" class="config">
  <thead>
  <tr>
   <th>Port</th>
   <th>Stat</th>
   <th>MDR</th>
   <th>PeerMeanPathDel</th>
   <th>Anv</th>
   <th>ATo</th>
   <th>Syv</th>
   <th>Dlm</th>
   <th>MPR</th>
   <th>Delay Asymmetry</th>
   <th>Ingress Latency</th>
   <th>Egress Latency</th>
   <th>Version</th>
  </tr>
 </thead>
 <tbody id="PortDataset_tbody">
 </tbody>
</table>

<p>
  <input type="hidden" id="submit_sid" name="sid">
  <input type="submit" value="Save">
  <input type="reset"  value="Reset" onclick="resetForm(this.form);" >
</p>
</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
