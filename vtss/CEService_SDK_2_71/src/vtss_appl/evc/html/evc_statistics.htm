<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>EVC Statistics</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_evc_statistics.htm";

var selectedPort = configPortMin;
var pageArgs = searchArgs(window.location.search);
var pageArgsName = 'port';
if (pageArgs[pageArgsName]) {
    selectedPort = parseInt(pageArgs[pageArgsName], 10);
}

var timerID;
var validEvcIdList= "None";
var reqObject;
var selectEvcId = 1;

function UpdatePortSelect()
{
    SpomUpdatePortSelector("portselect", selectedPort);
}

function splitEvcIdList(text)
{
    var portArray = Array();
    var port_cnt = 0;
    var single_port = text.split(",");

    if (String(text) == "None" || String(text) === "") {
        return "None";
    }

    for (var i = 0; i < single_port.length; i++) {
        var continue_port = single_port[i].split("-");
        if (continue_port.length == 1) {
            portArray[port_cnt++] = parseInt(single_port[i], 10);
        } else {
            var start = parseInt(continue_port[0], 10);
            var end = parseInt(continue_port[1], 10);
            for (var j = start; j <= end; j++) {
                portArray[port_cnt++] = parseInt(j, 10);
            }
        }
    }

    return portArray;
}

function isValidEvcID(id)
{
    var found = false;

    if (validEvcIdList == "None") {
        return true;
    }

    for (var i = 0; i < validEvcIdList.length; i++) {
        if (id == validEvcIdList[i]) {
            found = true;
            break;
        }
    }

    if (!found) {
        alert("EVC ID " + id + " is invalid!");
    }

    return found;
}

function CreateTableHeader(frag)
{
    var tr, i;

    tr = CreateStyledElement("tr", "display_header");
    if (document.getElementById("both_unit").checked) {
        tr = CreateStyledElement("tr", "display_header");
        addTextHeaderCell(tr, "Clear", "hdrc", 1, 3);
        addTextHeaderCell(tr, "Port", "hdrc", 1, 3);
        addTextHeaderCell(tr, "Green", "hdrc", 4);
        addTextHeaderCell(tr, "Yellow", "hdrc", 4);
        addTextHeaderCell(tr, "Red", "hdrc", 2);
        addTextHeaderCell(tr, "Discarded", "hdrc", 4);
        frag.appendChild(tr);       // Add row to fragment

        tr = CreateStyledElement("tr", "display_header");
        for (i = 0; i < 4; i++) {
            if (i != 2) {
                addTextHeaderCell(tr, "Frames", "hdrc", 2);
                addTextHeaderCell(tr, "Bytes", "hdrc", 2);
            } else {
                addTextHeaderCell(tr, "Frames", "hdrc");
                addTextHeaderCell(tr, "Bytes", "hdrc");
            }
        }
        frag.appendChild(tr);       // Add row to fragment

        tr = CreateStyledElement("tr", "display_header");
        for (i = 0; i < 8; i++) {
            addTextHeaderCell(tr, "Rx", "hdrc");
            if (i != 4 && i != 5) {
                addTextHeaderCell(tr, "Tx", "hdrc");
            }
        }
        frag.appendChild(tr);       // Add row to fragment
    } else {
        var unit_txt = "Bytes";
        if (document.getElementById("frames_unit").checked) {
            unit_txt = "Frames";
        }
        tr = CreateStyledElement("tr", "display_header");
        if (configArchLuton26) {
            addTextHeaderCell(tr, "Class", "hdrc", 1, 2);
        } else {
            addTextHeaderCell(tr, "Clear", "hdrc", 1, 2);
            addTextHeaderCell(tr, "Port", "hdrc", 1, 2);
        }
        addTextHeaderCell(tr, "Green " + unit_txt, "hdrc", 2);
        addTextHeaderCell(tr, "Yellow " + unit_txt, "hdrc", 2);
        addTextHeaderCell(tr, "Red " + unit_txt, "hdrc");
        addTextHeaderCell(tr, "Discarded " + unit_txt, "hdrc", 2);
        frag.appendChild(tr);       // Add row to fragment

        tr = CreateStyledElement("tr", "display_header");
        for (i = 0; i < 3; i++) {
            addTextHeaderCell(tr,"Rx", "hdrc");
            if (i != 2) {
                addTextHeaderCell(tr, "Tx", "hdrc");
            }
        }
        if (configArchLuton26) {
            addTextHeaderCell(tr,"Green", "hdrc");
            addTextHeaderCell(tr,"Yellow", "hdrc");
        } else {
           addTextHeaderCell(tr,"Rx", "hdrc");
            addTextHeaderCell(tr,"Tx", "hdrc");
        }
        frag.appendChild(tr);       // Add row to fragment
    }
}

function addRow(index, frag, values)
{
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    //var td = addButtonCell(tr, " Clear ", "c", "button");
    //td.onclick = function() { requestClear(parseInt(values[0], 10)); };
    if (configArchJaguar_1 || configArchServal) {
        addCheckBoxCell(tr, 0, "c", "clear_" + parseInt(values[0], 10));
    }
    addTextCell(tr, values[0], "cr");
    var counter_filter = Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    if (document.getElementById("frames_unit").checked) {
        counter_filter = Array(0, 0, 0, 3, 4, 0, 0, 7, 8, 0, 10, 0, 0, 13, 14);
    } else if (document.getElementById("bytes_unit").checked) {
        counter_filter = Array(0, 1, 2, 0, 0, 5, 6, 0, 0, 9, 0, 11, 12, 0, 0);
    }
    for (var idx = 1; idx < counter_filter.length; idx++) {
        if (counter_filter[idx]) {
            continue;
        }
        addTextCell(tr, values[idx], "cr");
    }
    frag.appendChild(tr);   // Add row to fragment
}

function processUpdate(req, ref)
{
    // Format: [selected_evc_id];[valid_evc_list];
    //         [class:Lu26]
    //         /[port_no:JR1/SRVL]
    //         /[green_f_rx]/[green_f_tx]/[green_b_rx]/[green_b_tx]
    //         /[yellow_f_rx]/[yellow_f_tx]/[yellow_b_rx]/[yellow_b_tx]
    //         /[red_f_rx]/[red_b_rx]
    //         /[discard_f_rx]/[discard_f_tx]/[discard_b_rx]/[discard_b_tx]|...

    reqObject = req;

    var tbl = document.createElement("table");
    var tbl_body = document.createElement("tbody");
    tbl.className = "display";

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    CreateTableHeader(frag);

    if (req.responseText) {
        var dispalyData = req.responseText.split(";");
        var fld = document.getElementById("selectEvcId");
        selectEvcId = fld.value = dispalyData[0];
        validEvcIdList = splitEvcIdList(dispalyData[1]);
        fld.title = fld.alt = "Available EVC ID = " + validEvcIdList;
        if (validEvcIdList == "None") {
            fld.disabled = true;
        } else {
            fld.disabled = false;
        }
        fld = document.getElementById("selectEvcIdText");
        fld.title = fld.alt = "Available EVC ID = " + validEvcIdList;
        if (dispalyData[2]) {
            var counterData = dispalyData[2].split("|");
            for (var i = 0, j = 0; i < counterData.length; i++) {
                if (counterData[i]) {
                    addRow(j++, frag, counterData[i].split("/"));
                }
            }
        }
    }

    tbl_body.appendChild(frag);   // Add row to fragment
    tbl.appendChild(tbl_body);
    var tbody = document.getElementById(ref);
    clearChildNodes(tbody);
    if (!tbody.appendChild(tbl)) { // Add Frag to table body
        alert("This browser doesn't support dynamic tables.");
    }

    var autorefresh = document.getElementById('autorefresh');
    if (autorefresh && autorefresh.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
    }
}

function requestUpdate()
{
    if (configArchLuton26) {
        UpdatePortSelect();
        document.getElementById("portselect").style.display = "";
        document.getElementById("clearall").style.display = "none";
        document.getElementById("evcCtrlMenu").style.display = "none";
    } else {
        document.getElementById("portselect").style.display = "none";
        document.getElementById("clearall").style.display = "";
        document.getElementById("evcCtrlMenu").style.display = "";
    }
    var fld = document.getElementById("selectEvcId");
    if (!isValidEvcID(fld.value)) {
        fld.value = selectEvcId;
        return false;
    }
    selectEvcId = fld.value;
    loadXMLDoc("/stat/evc_statistics?evc_id=" + selectEvcId + "&port=" + selectedPort, processUpdate, 'displayTable');
    return true;
}

function onchangePortSelect(sel)
{
    selectedPort = sel.options[sel.selectedIndex].value;
    requestUpdate();
}

function requestClearAll()
{
    if (!confirm("All EVCs statistics will be cleared.\nDo you want to proceed anyway?")) {
        return false;
    }
    loadXMLDoc("/stat/evc_statistics?evc_id=" + selectEvcId + "&port=" + selectedPort + "&clearall=1", processUpdate, 'displayTable');
    return true;
}

function requestClear()
{
    if (configArchLuton26) {
        requestClearAll();
        return;
    }

    var url = "/stat/evc_statistics?evc_id=" + selectEvcId + "&port=" + selectedPort;

    for (var i = configPortMin; i <= configNormalPortMax; i++) {
        var fld = document.getElementById("clear_" + i);
        if (fld && fld.checked) {
                url = url + "&clear_" + i + "=1";
        }
    }
    loadXMLDoc(url, processUpdate, 'displayTable');
}

function chkRefresh(fld)
{
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate();
    }
}

</script>
</head>

<body class="content" onload="requestUpdate();">

<h1>EVC Statistics</h1>

<div class="refreshbar">
 <form action="#">
 <span id="evcCtrlMenu" style="display:none;">
  <label id="selectEvcIdText" for="selectEvcId">EVC ID</label>
  <input type="text" id="selectEvcId" name="selectEvcId" maxlength="4" value="1" size = "4" onchange="requestUpdate();">
  <input type="radio" name="unit" id="frames_unit" onclick="processUpdate(reqObject, 'displayTable');" checked="checked">Frames
  <input type="radio" name="unit" id="bytes_unit" onclick="processUpdate(reqObject, 'displayTable');">Bytes
  <input type="radio" name="unit" id="both_unit" onclick="processUpdate(reqObject, 'displayTable');">Both
  &nbsp;&nbsp;&nbsp;&nbsp;
</span>
  <select id="portselect" onchange="onchangePortSelect(this);">
    <option value="1">Port 1</option>
    <option value="99">Port 99</option>
   </select>
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
  <input type="button"   value="Refresh"    id="refresh"     onclick="requestUpdate(); this.blur();">
  <input type="button"   value="Clear"      id="clear"       onclick="requestClear(); this.blur();">
  <input type="button"   value="Clear All"  id="clearall"    onclick="requestClearAll(); this.blur();">
  <img id="update" alt="" src="images/updating.gif">
 </form>
</div>

<div id="displayTable">
</div>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
