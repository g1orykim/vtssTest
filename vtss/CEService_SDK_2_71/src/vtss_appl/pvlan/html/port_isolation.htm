<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 
 Vitesse Switch Software.
 
 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Port Isolation Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page macic
var help_page = "/help/help_port_isolation.htm";

var timerID;

function CreateTableHeader (frag) {
	
    var tr;
    var hasPVLAN;
    var portcount = SpomCurrentPorts();
    tr = CreateStyledElement("tr", "config_header");
    for(var j = 0; j < SpomCurrentPorts(); j++) {
        if (isStackPort(j + 1)) {
            portcount--;
        }
    }
    addTextHeaderCell(tr, "Port Number", "hdrc", portcount);
    frag.appendChild(tr);       // Add row to fragment
    tr = CreateStyledElement("tr", "config_header");   

    for (var i = 0; i < SpomCurrentPorts(); i++ ) {
        if (isStackPort(i + 1)) {
            continue;
        }
        /* Grocx WAN port has not the properties of a PVLAN */
        if(typeof(configHasPVLAN) == "function") {
            hasPVLAN = configHasPVLAN(i + 1);
        } else {
            hasPVLAN = 1;
        }
        if (hasPVLAN)
            addTextHeaderCell(tr, configPortName((i + 1), 0), "portno");
    }

    frag.appendChild(tr);       // Add row to fragment
}


function addRow(index, frag, values) {
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    var i = 0;
    for (var port = 0; port < SpomCurrentPorts(); port++) {
        if (isStackPort(port + 1)) {
            continue;
        }
        if (i >= values.length) {
            break;
        }
        if(values[i] != "") {
            addCheckBoxCell(tr, parseInt(values[i]), "c", "mask_"  + (port + 1));
        }
        i++
    }
    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref)
{
    // Format: 
    // <en>/<en>/..../<en>/|....
    // 1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1/1|....
    if(redirectOnError(req))
        return;
    if(req.responseText) {
        var port_isolationconfig = req.responseText.split("|");
        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        CreateTableHeader(frag);
        for(var i = 0; i < port_isolationconfig.length; i++) {
            var port_isolationval = port_isolationconfig[i].split("/");
            addRow(i, frag, port_isolationval);
        }
        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
        var autorefresh = document.getElementById('autorefresh');
        if (autorefresh.checked) {
            if (timerID) {
                clearTimeout(timerID);
            }
            timerID = setTimeout('requestUpdate()', settingsRefreshInterval());
        }
        updateFuncBar(1);
    } else {
        SpomHandleError();
    }
}

function chkRefresh(fld) {
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate(0);
    }
}

function requestUpdate() {
    if(SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update

    updateFuncBar(0);
    loadXMLDoc(SpomAddSidArg("/config/port_isolation"), processUpdate, 'port_isolationData');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function checkForm(form)
{
    return true;                // Feed the chickens and go home
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

function updateFuncBar(enable)
{
    if (enable) {
        document.getElementById("refresh").style.visibility = "visible";
        document.getElementById("update").style.visibility = "hidden";
    } else {
        document.getElementById("refresh").style.visibility = "hidden";
        document.getElementById("update").style.visibility = "visible";
    }
}

 </script>
</head>

<body class="content" onload="requestUpdate();">
<div class="refreshbar">
 <form action="#">
  <label for="autorefresh">Auto-refresh</label>
  <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
  <input type="button" id="refresh" value="Refresh" onClick="requestUpdate(); this.blur(); " style="visibility:hidden">
  <span id="update">&nbsp;Updating...</span>
 </form>
</div>
<h1>Port Isolation Configuration <span id="display_sid"></span></h1>

<form method="POST" action="/config/port_isolation" onsubmit="return checkForm(this);">


<table id="port_isolationConfig" summary="Switch Port Isolation Configuration" cellspacing="0" class="config">
 <tbody id="port_isolationData">
 </tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">
<input type="submit" value="Save">
<input type="reset" value="Reset">

</p>

</form>

<!-- IE caching bug -->
<div style="visibility: hidden">
 <img alt="" src="images/yes.gif">
 <img alt="" src="images/no.gif">
</div>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
