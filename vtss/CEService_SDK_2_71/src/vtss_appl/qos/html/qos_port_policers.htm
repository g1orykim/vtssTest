<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 
 Vitesse Switch Software.
 
 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Rate Limit Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/mootools-core.js"></script>
 <script type="text/javascript" src="lib/MasterControl.js"></script>
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_qos_port_policers.htm";

var oTRateUnit = ["kbps", "Mbps", "fps", "kfps"];
var oVRateUnit = [0, 1, 2, 3];

var portCnt = 0; // The number of ports shown on the web page are determined at runtime

function api2DisplayRate(fps, rate)
{
    if (rate < 10000) {
        return rate;
    }
    else {
        return Math.floor(rate/1000);
   }
}

function api2DisplayRateUnit(fps, rate)
{
    if (fps) {
        if (rate < 10000) {
            return 2; // ~ fps
        }
        else {
            return 3; // ~ kfps
        }
    }
    else {
        if (rate < 10000) {
            return 0; // ~ kbps
        }
        else {
            return 1; // ~ Mbps
        }
    }
}

function addHeader(fc)
{
    var thead;
    var frag = document.createDocumentFragment();
    var tr   = CreateStyledElement("tr", "config_header");
    addTextHeaderCell(tr, "Port");
    addTextHeaderCell(tr, "Enabled");
    addTextHeaderCell(tr, "Rate");
    addTextHeaderCell(tr, "Unit");
    if (fc) {
        addTextHeaderCell(tr, "Flow Control");
    }
    frag.appendChild(tr);
    thead = document.getElementById('policer_thead');
    clearChildNodes(thead);
    thead.appendChild(frag);
}

function addRow(index, frag, values) {
    var pdata   = values.split("/");
    var portno  = parseInt(pdata[0], 10);
    var enabled = parseInt(pdata[1], 10);
    var fps     = parseInt(pdata[2], 10);
    var rate    = parseInt(pdata[3], 10);
    var fc_mode = parseInt(pdata[4], 10);
    var fc      = parseInt(pdata[5], 10);
    var tr;
    
    // The "fps_n" (frame_rate in the policer API) and "rate_n" is not shown directly on the user interface
    // Instead we convert these two values to the more user friendly "display_rate_n" and display_rate_unit_n"
    // When the form is submitted the values are converted back to the ones that the API expects
    tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    addHiddenInputCell(tr, fps, "cr", "fps_" + index);
    addHiddenInputCell(tr, rate, "cr", "rate_" + index);
    frag.appendChild(tr);       // Add (hidden) row to fragment

    tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");
    addTextCell(tr, configPortName(pdata[0], 0), "cr");
    addCheckBoxCell(tr, enabled, "c", "enabled_" + index);
    addInputCell(tr, api2DisplayRate(fps, rate), "cr", "display_rate_" + index, 7, 7);
    addSelectCell(tr, oTRateUnit, oVRateUnit, api2DisplayRateUnit(fps, rate), "cr", "display_rate_unit_" + index);
    if (fc_mode) {
        if (fc_mode == 2) {
            addCheckBoxCell(tr, fc, "c", "flow_control_" + index);
        } else {
            addTextCell(tr, " ", "c");
        }
    }
    frag.appendChild(tr);       // Add row to fragment
}

/* Format: 
 * <port 1>,<port 2>,<port 3>,...<port n>
 * 
 * port x :== <port_no>/<enabled>/<fps>/<rate>/<fc_mode>/<flow_control>
 *   port_no      :== 1..max
 *   enabled      :== 0..1           // 0: no, 1: yes
 *   fps          :== 0..1           // 0: unit for rate is kilobits pr seconds (kbps), 1: unit for rate is frames pr second (fps) 
 *   rate         :== 0..0xffffffff  // actual bit or frame rate
 *   fc_mode      :== 0..2           // 0: No ports has fc (don't show fc column), 1: This port has no fc, 2: This port has fc
 *   flow_control :== 0..1           // flow control is enabled
 */
function processUpdate(req, ref)
{
    if (redirectOnError(req)) {
        return;
    }

    if (req.responseText) {
        var values  = req.responseText.split(",");
        var pdata   = values[0].split("/");
        var fc_mode = parseInt(pdata[4], 10);
        var frag    = document.createDocumentFragment();
        var i;
        var tbody;
        var cBar;

        portCnt = values.length;
        addHeader(fc_mode);
        for (i = 0; i < portCnt; i++) {
            addRow(i, frag, values[i]);
        }
        tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        tbody.appendChild(frag);
        cBar = new MasterControlBar([{text: "*", className: "cr"},
                                     {name: "enabled_"},
                                     {name: "display_rate_"},
                                     {name: "display_rate_unit_"}]);
        if (fc_mode) {
            cBar.extend([{name: "flow_control_"}]);
        }
        cBar.construct(ref);
    } else {
        SpomHandleError();
    }
}

function requestUpdate() {
    if(SpomNavigationLoading()) {
        return;                 // Bail out, navigation will trigger update
    }
    loadXMLDoc(SpomAddSidArg("/config/qos_port_policers"), processUpdate, 'policer_tbody');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function checkForm(form)
{
    // Validate rate_n and rate_unit_n and convert back to the values expected by the API
    for (var i = 0; i < portCnt; i++) {
        switch (document.getElementById("display_rate_unit_" + i).value) {
        case "0": // kbps
            if (!isWithinRange("display_rate_" + i, configQosBitRateMin, 1000000, "'Policer Rate'",
                               " when the Unit is specified in 'kbps'.\nSelect the 'Mbps' unit for a coarser granularity for rates that need to be greater than 1 Gbps (1000000 kbps).")) {
                return false;
            }
            document.getElementById("rate_" + i).value = document.getElementById("display_rate_" + i).value;
            document.getElementById("fps_" + i).value = 0;
            break;
        case "1": // Mbps
            if (!isWithinRange("display_rate_" + i, 1, configQosBitRateMax / 1000, "'Policer Rate'",
                               " Mbps.\nSelect the 'kbps' unit for a finer granularity.")) {
                return false;
            }
            document.getElementById("rate_" + i).value = document.getElementById("display_rate_" + i).value * 1000;
            document.getElementById("fps_" + i).value = 0;
            break;
        case "2": // fps
            if (!isWithinRange("display_rate_" + i, configQosBitRateMin, 1000000, "'Policer Rate'",
                               " when the Unit is specified in 'fps'.\nSelect the 'kfps' unit for a coarser granularity for rates that need to be greater than 1 Mfps (1000000 fps).")) {
                return false;
            }
            document.getElementById("rate_" + i).value = document.getElementById("display_rate_" + i).value;
            document.getElementById("fps_" + i).value = 1;
            break;
        case "3": // kfps
            if (!isWithinRange("display_rate_" + i, 1, configQosBitRateMax / 1000, "'Policer Rate'",
                               " kfps.\nSelect the 'fps' unit for a finer granularity.")) {
                return false;
            }
            document.getElementById("rate_" + i).value = document.getElementById("display_rate_" + i).value * 1000;
            document.getElementById("fps_" + i).value = 1;
            break;
        default:
            // Shall never hapen
            return GiveAlert("The value is not valid", document.getElementById("display_rate_unit_" + i));
        }
    }
    return true;
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<h1>QoS Ingress Port Policers <span id="display_sid"></span></h1>

<form method="POST" action="/config/qos_port_policers" onsubmit="return checkForm(this);"> 

<table summary="Switch Rate Limit Configuration" cellspacing="0" class="config">
 <thead id="policer_thead">
 </thead>
 <tbody id="policer_tbody">
 </tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">    
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>

</form>

</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
