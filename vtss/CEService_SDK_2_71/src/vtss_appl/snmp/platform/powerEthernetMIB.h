/*

 Vitesse Switch Software.

 Copyright (c) 2002-2010 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

*/
/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf,v 1.4 2010/03/15 13:55:22 pchen Exp $
 */
#ifndef POWERETHERNETMIB_H
#define POWERETHERNETMIB_H
#define VTSS_POE_SUPPORT_RFC3621_ENABLE 1
typedef enum pse_port_power_admin {
    PSE_PORT_ADMIN_ON =  1,
    PSE_PORT_ADMIN_OFF
} pse_port_power_admin_t;

typedef enum pse_port_power_control_ability {
    PSE_PORT_POWER_CONTROL_ENABLE = 1,
    PSE_PORT_POWER_CONTROL_DISABLE
} pse_port_power_control_ability_t;

typedef enum pse_port_power_pair_signal {
    PSE_PORT_POWER_PAIR_SIGNAL = 1,
    PSE_PORT_POWER_PAIR_SPARE
} pse_port_power_pair_signal_t;

typedef enum pse_port_detection_status {
    PSE_PORT_DETECTION_DISABLED  = 1,
    PSE_PORT_DETECTION_SEARCHING,
    PSE_PORT_DETECTION_DELIVERING_POWER,
    PSE_PORT_DETECTION_FAULT,
    PSE_PORT_DETECTION_TEST,
    PSE_PORT_DETECTION_OTHER_FAULT
} pse_port_detection_status_t;

typedef enum pse_port_power_priority {
    PSE_PORT_POWER_PRIORITY_CRITICAL = 1,
    PSE_PORT_POWER_PRIORITY_HIGH,
    PSE_PORT_POWER_PRIORITY_LOW
} pse_port_power_priority_t;

typedef enum pse_main_power_status {
    MAIN_PSE_POWER_ON = 1,
    MAIN_PSE_POWER_OFF
} pse_main_power_status_t;

#define SNMP_DEBUG_LOG_ERROR_POE  { \
        if (log_rc < 0) {\
                T_D("%s:SNMP log return code error, log error:%d ", __FUNCTION__, log_rc);\
            } \
}
/*
 * function declarations
 */
void            init_powerEthernetMIB(void);
FindVarMethod   var_powerEthernetMIB;
FindVarMethod   var_pethPsePortTable;
FindVarMethod   var_pethMainPseTable;
FindVarMethod   var_pethNotificationControlTable;
WriteMethod     write_pethPsePortAdminEnable;
WriteMethod     write_pethPsePortPowerPairs;
WriteMethod     write_pethPsePortPowerPriority;
WriteMethod     write_pethPsePortType;
WriteMethod     write_pethMainPseUsageThreshold;
WriteMethod     write_pethNotificationControlEnable;

#endif                          /* POWERETHERNETMIB_H */

