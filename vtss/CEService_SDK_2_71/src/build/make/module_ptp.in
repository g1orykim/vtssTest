########################################################-*- mode: Makefile -*-
#
# Vitesse Switch Software.
#
# Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
# Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted. Permission to
# integrate into other products, disclose, transmit and distribute the software
# in an absolute machine readable format (e.g. HEX file) is also granted.  The
# source code of the software may not be disclosed, transmitted or distributed
# without the written permission of Vitesse. The software and its source code
# may only be used in products utilizing the Vitesse switch products.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software. Vitesse retains all ownership,
# copyright, trade secret and proprietary rights in the software.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
# INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR USE AND NON-INFRINGEMENT.
#
# ------------------------------------------------------------------------

# Pointer to PTP source code directory
DIR_ptp := $(DIR_APPL)/ptp

# Web Content Generation
WEB_CONTENT += $(DIR_ptp)/platform/html

# PTP module interface (= sources in platform)
OBJECTS_ptp := ptp.o ptp_local_clock.o servo.o              \
  vtss_ptp_synce_api.o vtss_ptp_wl_delay_filter.o ptp_1pps_serial.o ptp_pim.o ptp_1pps_sync.o ptp_1pps_closed_loop.o \
  $(if $(MODULE_VCLI),ptp_cli.o) \
  $(if $(MODULE_ICLI),ptp_icli_functions.o ptp_icfg.o)  \
  $(if $(MODULE_WEB),ptp_web.o)

$(OBJECTS_ptp): %.o: $(DIR_ptp)/platform/%.c
	$(call compile_c, $@, $<)

# We need to name the libfile from the config.mk file in order to have
# different .a files depending on the target platforms.
CFG_FILENAME := $(basename $(notdir $(shell readlink $(BUILD)/config.mk)))

PTP_LIB_FILENAME := libptp_$(CFG_FILENAME).a

# Determine if ptp source code exists
SRC_EXISTS := $(words $(wildcard $(DIR_ptp)/base/src/*.c))
SRC_EXISTS += $(words $(wildcard $(DIR_ptp)/base/ptpd/*.c))

# If source code exists then build the ptp module (If no source code, the library should already exist)
ifneq ($(SRC_EXISTS),0 0)

# PTP library (= all source files in base/src)
PTP_LIB_SRC  := vtss_ptp_api.o vtss_ptp_delay_filter.o vtss_ptp_offset_filter.o  vtss_ptp_types.o vtss_ptp_sys_timer.o \
  vtss_ptp_master.o vtss_ptp_slave.o vtss_ptp_unicast.o vtss_ptp_pack_unpack.o vtss_ptp_main.o vtss_ptp_bmca.o \
  vtss_ptp_peer_delay.o vtss_ptp_tc.o

$(PTP_LIB_SRC): %.o: $(DIR_ptp)/base/src/%.c
	$(call compile_c, $@, $<,-I$(DIR_ptp)/base/ptpd)

$(PTP_LIB_FILENAME): $(PTP_LIB_SRC)
	$(call what,Generating PTP library - $@)
	$(Q)$(XAR) csr $@ $^
	$(Q)$(XSTRIP) -g $@
else
$(shell cp $(BUILD)/vtss_libs/$(PTP_LIB_FILENAME) $(BUILD)/obj/$(PTP_LIB_FILENAME))
$(warning PTP core sources unavailable, assuming binary form only)
endif

# Add this as a generated/used library
LIB_FILES += $(PTP_LIB_FILENAME)

# Include files
INCLUDES += -I$(DIR_ptp)/platform -I$(DIR_ptp)/base/include -I$(DIR_ptp)/base/src

# Lint files
LINT_FILES_ptp += $(wildcard $(DIR_ptp)/platform/*.c)
LINT_FILES_ptp += $(wildcard $(DIR_ptp)/base/src/*.c)

# Tidy files
TIDY_FILES_ptp += $(DIR_ptp)/platform/html/*.htm $(DIR_ptp)/platform/html/help/*.htm

# Built-in ICLI
$(eval $(call add_icli,$(foreach m, ptp,$(DIR_ptp)/platform/$(m).icli)))

