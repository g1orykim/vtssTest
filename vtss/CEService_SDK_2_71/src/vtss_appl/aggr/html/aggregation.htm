<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--
 
 Vitesse Switch Software.
 
 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Aggregation Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/spom.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page macic
var help_page = "/help/help_aggregation.htm";

var aggrconfig = Array();
var gGroup;
var glag_count = Array();

function addRow(frag,group,pval) {
    var tr = CreateStyledElement("tr", group % 2 ? "config_odd" : "config_even");
    
    if (SpomStackPortCount() > 0){        
        if (group == 0){
            addTextCell(tr, " ", "c");
            addTextCell(tr, "Normal", "c");
        } else {
            if ((group == 1 || group == 2) || configArchJaguar_1){
                addTextCell(tr, "Global", "hdrc");
                addTextCell(tr, group, "c");
            }else{
                addTextCell(tr, "Local", "c");
                addTextCell(tr, group-2, "c"); // Restart LLAG from 1.
            }
        }        
    } else {
	if (group == 0){
	    addTextCell(tr, "Normal", "c");
	} else {
	    addTextCell(tr, group, "c");
	}
    }

    var value;
    for(var port = 0; port < SpomCurrentPorts(); port++) {   
        if (isStackPort(port+1)) {
            continue;
        }        
        if (parseInt(pval[port]) == 2) {
            value = 0;
        } else {
            value = parseInt(pval[port]);
        }
        var chk = addRadioCell(tr, value, "c", "aggr_port_" + port, "aggr_" + group + "_port_" + port);

        if (parseInt(pval[port]) == 2) {
            chk.disabled = true;
        }
    }
    frag.appendChild(tr);       // Add row to fragment
}


function processUpdate(req, ref)
{
    // Format: 
    // 1/1/1/0/0/..../1/0| Group Normal
    // 1/1/1/0/0/..../1/0| Group 1
    // 1/1/1/0/0/..../1/0| Group 2
    //..................................
    // 1/0/1/0/1/0/1 src_mac/det_mac/mode_ip/mode_port/mode_rand/GLGA1 member count(not include this unit)/GLAG2 member count(not include this unit)

    if(redirectOnError(req))
        return;
    if(req.responseText) {
        aggrconfig = req.responseText.split("|");
        //aggrconfig = req.split("|");

        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        gGroup = aggrconfig.length-1;

        for(var i = 0; i < gGroup; i++) {
            if (aggrconfig[i]){
                var pval = aggrconfig[i].split("/");
                addRow(frag,i,pval);
            }
        }
        var pmode = aggrconfig[i].split("/");
        
        UpdateIdChecked("src_mac",parseInt(pmode[0])?true:false);
        UpdateIdChecked("det_mac",parseInt(pmode[1])?true:false);
        UpdateIdChecked("mode_ip",parseInt(pmode[2])?true:false);
        UpdateIdChecked("mode_port",parseInt(pmode[3])?true:false);
        //UpdateIdChecked("mode_rand",parseInt(pmode[4])?true:false);
        glag_count[1] = parseInt(pmode[5]);  /* exclude the switch itself */
        glag_count[2] = parseInt(pmode[6]);  /* exclude the switch itself */ 
        
        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
    } else {
        SpomHandleError();
    }
}


function checkForm(form)
{
    var count = Array();
    
    for(var group = 0; group < gGroup; group++) {
        count[group]=0;
        for(var port = 0; port < SpomCurrentPorts(); port++) {
            if (isStackPort(port+1)) {
                continue;
            }        
            var id = "aggr_"+group+"_port_"+port;
            if (document.getElementById(id).checked ) {
                count[group]++;
            }
        }
    }
    
    for(var group = 1 ; group < gGroup; group++) {
        if ( (SpomStackPortCount() > 0) && configArchJaguar_1)  {
            if ( count[group] > 8 ){
                alert("Global aggregation in the stack must include 1-8 ports");
                return false;
            }
        } else if ((SpomStackPortCount() == 0) && configArchJaguar_1 && (SpomCurrentPorts() > 32)) { /* Dual JR system */
            if (count[group] == 1 || count[group] > 8 ) {
                alert("The aggregation must include 2-8 ports");
                return false;
            }
        } else if (configArchJaguar_1) { /* Single JR system */
            if (count[group] == 1 || count[group] > 8 ) {
                alert("The aggregation must include 2-8 ports");
                return false;
            }
        } else if ( (SpomStackPortCount() > 0) && ((group == 1 || group == 2)) ) {
            if ( (count[group] + glag_count[group])> 8 ){
                error_count = count[group] + glag_count[group];
                alert("Group " + group + " member counts ("+error_count+") error! Global aggregation in the stack must include 1-8 ports");
                return false;
            }
        } else  if ( count[group] == 1 || count[group] > 16 ){
            alert("Group "+group+" member counts error!! Local aggregation must include 2-16 ports");
            return false;
        }
    }     
	
	return true;                // Feed the chickens and go home
}

function requestUpdate() {
    //var req="0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/1|1/1/1/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0/0";

    if(SpomNavigationLoading())
        return;                 // Bail out, navigation will trigger update

    GenerateHeader('header');
    loadXMLDoc(SpomAddSidArg("/config/aggregation"), processUpdate, 'AggrData');
    SpomUpdateDisplaySid("display_sid");
    SpomUpdateFormSid("submit_sid");
}

function GenerateHeader(id)
{
    var thead = document.getElementById(id);
    var frag = document.createDocumentFragment();
    var tr;
    var stackport;

    clearChildNodes(thead); 
    tr = CreateStyledElement("tr", "config_header");
    if (SpomStackPortCount() > 0) {
	addTextHeaderCell(tr, " ", "cl", "2");
    } else {
	addTextHeaderCell(tr, " ", "cl", "1");
    }

    addTextHeaderCell(tr, "Port Members", "hdrc", SpomCurrentPorts());
    frag.appendChild(tr);       // Add row to fragment

    tr = CreateStyledElement("tr", "config_header");
    if (SpomStackPortCount() > 0)
        addTextHeaderCell(tr, "Locality", "cl");
    addTextHeaderCell(tr, "Group ID", "cl");
    for (var i = configPortMin; i <= SpomCurrentPorts(); i++ ) {
        if (isStackPort(i)) {
            continue;
        }        
        addTextHeaderCell(tr, i, "portno");
    }

    frag.appendChild(tr);       // Add row to fragment
    thead.appendChild(frag);
}

function SpomSidSelectorUpdate(sid)
{
    SpomSetCurrentSid(sid);     // Save current SID
    requestUpdate();            // Update page to reflect selector
}

 </script>
</head>

<body class="content" onload="requestUpdate();">


<form name="AggrForm" method="POST" action="/config/aggregation" onsubmit="return checkForm(this);">
<h1>Aggregation Mode Configuration</h1>

<h2 class="SPOM_only">Stack Global Settings</h2> 

<table summary="Hash Code Contributors" cellspacing="0" class="config">
 <thead>
  <tr class="config_header">
   <th colspan="2">Hash Code Contributors</th>
  </tr>
 </thead>
 <tr class="config">
  <td><label accesskey="S" for="src_mac">Source MAC Address</label></td>
  <td class="cl"><input type="checkbox" id="src_mac" name="src_mac" value="on"></td>
 </tr>
 <tr class="config">
  <td><label accesskey="D" for="det_mac">Destination MAC Address</label></td>
  <td class="cl"><input type="checkbox" id="det_mac" name="det_mac" value="on"></td>
 </tr>
 <tr class="config">
  <td><label accesskey="I" for="mode_ip">IP Address</label></td>
  <td class="cl"><input type="checkbox" id="mode_ip" name="mode_ip" value="on"></td>
 </tr>
 <tr class="config">
  <td><label accesskey="P" for="mode_port">TCP/UDP Port Number</label></td>
  <td class="cl"><input type="checkbox" id="mode_port" name="mode_port" value="on"></td>
 </tr>
 <!-- Mark out Ramdom mode -->
 <!-- <tr> <td><label for="mode_rand">Random</label></td> -->
 <!--  <td class="cl"><input type="checkbox" id="mode_rand" name="mode_rand" value="on"></td>  </tr> -->
</table>

<h1>Aggregation Group Configuration <span id="display_sid"></span></h1>

<table id="aggrconfig" summary="Agrregation Configuration" cellspacing="0" class="config">
 <thead id="header"></thead>
 <tbody id="AggrData"></tbody>
</table>

<p>
<input type="hidden" id="submit_sid" name="sid">    
<input type="submit" value="Save">
<input type="reset" value="Reset">
</p>
</form>
</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
