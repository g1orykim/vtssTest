//
// Vitesse Switch Software.
//
# Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
# Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted. Permission to
# integrate into other products, disclose, transmit and distribute the software
# in an absolute machine readable format (e.g. HEX file) is also granted.  The
# source code of the software may not be disclosed, transmitted or distributed
# without the written permission of Vitesse. The software and its source code
# may only be used in products utilizing the Vitesse switch products.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software. Vitesse retains all ownership,
# copyright, trade secret and proprietary rights in the software.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
# INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR USE AND NON-INFRINGEMENT.
//
//
// Module Segment
//   This tag value is used to decide whether all commands of this module are
//   registered or not and the generated C/H file is compiled or not.
//
MODULE_IF_FLAG = defined(VTSS_SW_OPTION_NTP)

//
// Include Segment
//   The segment contains the include files. These include files are needed
//   for the code body, that is, all other segments.
//   "icli_api.h" is the default include file that will be auto-generated
//   in C file.
//   The content will be exactly pasted to the generated C file.
//
INCLUDE_BEGIN
#include "icli_porting_util.h"
#include "vtss_ntp_api.h"
#include "mgmt_api.h"
#include "misc_api.h"
#include "port_api.h"
#include "topo_api.h"
INCLUDE_END

// ############################################################################

//
// Function Segment
//   The segment allows the designer writes the local functions that will be
//   used in the command Segment and also the global functions that can be
//   shared with other C files.
//   The content will be exactly pasted to the generated C file.
//
FUNCTION_BEGIN

static void NTP_ICLI_global_mode_set(u32 session_id, BOOL mode)
{
    vtss_rc     rc = ICLI_RC_OK;
    BOOL        original_mode;
    ntp_conf_t  conf;

    //get global configuration
    if ((rc = ntp_mgmt_conf_get(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return;
    }

    //set global configuration
    original_mode = conf.mode_enabled ? TRUE : FALSE;

    if (mode) {
        conf.mode_enabled = TRUE;
        //ICLI_PRINTF("ntp enable\n");
    } else {
        conf.mode_enabled = FALSE;
        //ICLI_PRINTF("ntp disable\n");
    }

    if (mode != original_mode && (rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return;
    }

    return;
}

FUNCTION_END

// ############################################################################

//
// Export Segment
//   This segment contains the API declarations of the global functions in
//   Function Segment. This will be pasted exactly to the generated H file.
//   So, others can include the H file to use the global functions.
//
EXPORT_BEGIN
EXPORT_END

HELP_SHOW       = Show running system information
HELP_CLEAR      = Clear
HELP_IP         = Internet Protocol
HELP_INTERFACE  = Interface
HELP_PORT_TYPE  = Interface port type
HELP_PORT_LIST  = Interface port list
HELP_NO         = Negate a command or set its defaults

HELP_NTP        = Configure NTP
HELP_NTP_SERVER = Configure NTP server

// ############################################################################

CMD_BEGIN
//COMMAND         = ntp enable
COMMAND         = ntp

FUNC_NAME = ntp_enable
PRIVILEGE = ICLI_PRIVILEGE_13

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   = 1

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = ntp_var
CMD_VAR   =
//CMD_VAR   = enable_var
//CMD_VAR   =

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##HELP_NTP
//HELP = enable the NTP protocol

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    /* enable global mode */
    NTP_ICLI_global_mode_set(session_id, TRUE);
CODE_END

// (Optional)
// The no form of this command
NO_FORM_VARIABLE_BEGIN
NO_FORM_VARIABLE_END

NO_FORM_CODE_BEGIN
    /* disable global mode */
    NTP_ICLI_global_mode_set(session_id, FALSE);
NO_FORM_CODE_END
CMD_END

// ############################################################################

CMD_BEGIN
COMMAND         = ntp server <1-5> ip-address {<ipv4_ucast>|<ipv6_ucast>|<hostname>}

FUNC_NAME = ntp_server_ip_address
PRIVILEGE = ICLI_PRIVILEGE_13

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   = defined(VTSS_SW_OPTION_IPV6)

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = ntp_var
CMD_VAR   =
//CMD_VAR   = server_var
CMD_VAR   =
CMD_VAR   = index_var
//CMD_VAR   = ip_address_var
CMD_VAR   =

CMD_VAR   = ipv4_var
CMD_VAR   = ipv6_var
CMD_VAR   = name_var

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##HELP_NTP
HELP = ##HELP_NTP_SERVER
HELP = index number
HELP = ip address

HELP = ipv4 address
HELP = ipv6 address
HELP = domain name

VARIABLE_BEGIN
    vtss_rc     rc = ICLI_RC_OK;
    ntp_conf_t  conf;
    char        ip_buf[40];
    int         idx = 0;
VARIABLE_END

CODE_BEGIN

    //get global configuration
    if ((rc = ntp_mgmt_conf_get(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return ICLI_RC_OK;
    }

    //ICLI_PRINTF("index: %d\n", index_var);
    if ((idx = index_var - 1) < 0) {
        idx = 0;
    }

    if (ipv4_var) {
        conf.server[idx].ip_type = NTP_IP_TYPE_IPV4;
        strcpy((char *) conf.server[idx].ip_host_string, misc_ipv4_txt(ipv4_var, ip_buf));

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }

        //ICLI_PRINTF("ipv4: %u\n", ipv4_var);
    } else if (name_var) {
        conf.server[idx].ip_type = NTP_IP_TYPE_IPV4;
        strcpy((char *) conf.server[idx].ip_host_string, name_var);

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }

        //ICLI_PRINTF("word: %s\n", name_var);
#ifdef VTSS_SW_OPTION_IPV6
    } else {
        conf.server[idx].ip_type = NTP_IP_TYPE_IPV6;
        memcpy(&conf.server[idx].ipv6_addr, &ipv6_var, sizeof(conf.server[idx].ipv6_addr));

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }

        //ICLI_PRINTF("ipv6\n");
#endif
    }

CODE_END

// (Optional)
// The no form of this command
// NO_FORM_VARIABLE_BEGIN
// NO_FORM_VARIABLE_END

// NO_FORM_CODE_BEGIN
// NO_FORM_CODE_END
CMD_END

// ############################################################################

CMD_BEGIN
COMMAND         = ntp server <1-5> ip-address {<ipv4_ucast>|<hostname>}

FUNC_NAME = ntp_server_ip_address
PRIVILEGE = ICLI_PRIVILEGE_13

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   = !defined(VTSS_SW_OPTION_IPV6)

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = ntp_var
CMD_VAR   =
//CMD_VAR   = server_var
CMD_VAR   =
CMD_VAR   = index_var
//CMD_VAR   = ip_address_var
CMD_VAR   =

CMD_VAR   = ipv4_var
CMD_VAR   = name_var

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##HELP_NTP
HELP = ##HELP_NTP_SERVER
HELP = index number
HELP = ip address

HELP = ipv4 address
HELP = domain name

VARIABLE_BEGIN
    vtss_rc     rc = ICLI_RC_OK;
    ntp_conf_t  conf;
    char        ip_buf[40];
    int         idx = 0;
VARIABLE_END

CODE_BEGIN

    //get global configuration
    if ((rc = ntp_mgmt_conf_get(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return ICLI_RC_OK;
    }

    //ICLI_PRINTF("index: %d\n", index_var);
    if ((idx = index_var - 1) < 0) {
        idx = 0;
    }

    if (ipv4_var) {
        conf.server[idx].ip_type = NTP_IP_TYPE_IPV4;
        strcpy((char *) conf.server[idx].ip_host_string, misc_ipv4_txt(ipv4_var, ip_buf));

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }

        //ICLI_PRINTF("ipv4: %u\n", ipv4_var);
    } else if (name_var) {
        conf.server[idx].ip_type = NTP_IP_TYPE_IPV4;
        strcpy((char *) conf.server[idx].ip_host_string, name_var);

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }

        //ICLI_PRINTF("word: %s\n", name_var);
    }

CODE_END

// (Optional)
// The no form of this command
// NO_FORM_VARIABLE_BEGIN
// NO_FORM_VARIABLE_END

// NO_FORM_CODE_BEGIN
// NO_FORM_CODE_END
CMD_END

// ############################################################################

CMD_BEGIN
COMMAND         = no ntp server <1-5>

FUNC_NAME = no_ntp_server_ip_address
PRIVILEGE = ICLI_PRIVILEGE_13

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   =

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = no_var
CMD_VAR   =
//CMD_VAR   = ntp_var
CMD_VAR   =
//CMD_VAR   = server_var
CMD_VAR   =
CMD_VAR   = index_var

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##HELP_NO
HELP = ##HELP_NTP
HELP = ##HELP_NTP_SERVER
HELP = index number

VARIABLE_BEGIN
    vtss_rc     rc = ICLI_RC_OK;
    ntp_conf_t  conf;
    u32         idx;
VARIABLE_END

CODE_BEGIN

    //get global configuration
    if ((rc = ntp_mgmt_conf_get(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return ICLI_RC_OK;
    }

    if (index_var) {
        idx = index_var - 1;
        memset(&conf.server[idx], 0, sizeof(conf.server[idx]));

        if ((rc = ntp_mgmt_conf_set(&conf)) != VTSS_OK) {
            ICLI_PRINTF("%s\n", error_txt(rc));
            return ICLI_RC_OK;
        }
    }

CODE_END

// (Optional)
// The no form of this command
// NO_FORM_VARIABLE_BEGIN
// NO_FORM_VARIABLE_END

// NO_FORM_CODE_BEGIN
// NO_FORM_CODE_END
CMD_END

// ############################################################################

CMD_BEGIN
COMMAND         = show ntp status

FUNC_NAME = show_ntp_status
PRIVILEGE = ICLI_PRIVILEGE_13

CMD_MODE  = ICLI_CMD_MODE_EXEC

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   =

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = show_var
CMD_VAR   =
//CMD_VAR   = ntp_var
CMD_VAR   =
//CMD_VAR   = status_var
CMD_VAR   =

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =

HELP = ##HELP_SHOW
HELP = ##HELP_NTP
HELP = status

VARIABLE_BEGIN
    vtss_rc     rc = ICLI_RC_OK;
    ntp_conf_t  conf;
#ifdef VTSS_SW_OPTION_IPV6
    char        ip_buf1[40];
#endif
    int         i;
VARIABLE_END

CODE_BEGIN

    //get global configuration
    if ((rc = ntp_mgmt_conf_get(&conf)) != VTSS_OK) {
        ICLI_PRINTF("%s\n", error_txt(rc));
        return ICLI_RC_OK;
    }

    ICLI_PRINTF("NTP Mode : %s\n", icli_bool_txt(conf.mode_enabled));

#ifdef VTSS_SW_OPTION_DNS
    ICLI_PRINTF("Idx   Server IP host address (a.b.c.d) or a host name string\n");
#else
    ICLI_PRINTF("Idx   Server IP host address (a.b.c.d)\n");
#endif
    ICLI_PRINTF("---   ------------------------------------------------------\n");
    for (i = 0; i < NTP_MAX_SERVER_COUNT; i++) {
        ICLI_PRINTF("%-5d ", i + 1);
#ifdef VTSS_SW_OPTION_IPV6
        ICLI_PRINTF("%-31s \n",
                conf.server[i].ip_type == NTP_IP_TYPE_IPV4 ? (char *)conf.server[i].ip_host_string : misc_ipv6_txt(&conf.server[i].ipv6_addr, ip_buf1));
#else
        ICLI_PRINTF("%-16s \n",
                conf.server[i].ip_host_string);
#endif /* VTSS_SW_OPTION_IPV6 */
    }

CODE_END

// (Optional)
// The no form of this command
NO_FORM_VARIABLE_BEGIN
NO_FORM_VARIABLE_END

NO_FORM_CODE_BEGIN
NO_FORM_CODE_END
CMD_END
