/*

 Vitesse Switch Software.

 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

*/
/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf,v 1.2 2007/09/04 06:33:18 pchen Exp $
 */
#ifndef DOT3OAMMIB_H
#define DOT3OAMMIB_H

#define RFC4878_SUPPORTED_ETH_LINK_OAM         1

#define LINK_OAM_ADMIN_ENABLED                 1
#define LINK_OAM_ADMIN_DISABLED                2


#define LINK_OAM_DISABLED                      1
#define LINK_OAM_LINK_FAULT                    2
#define LINK_OAM_PASSIVE_WAIT                  3
#define LINK_OAM_ACTIVE_SEND_LOCAL             4
#define LINK_OAM_SEND_LOCAL_AND_REMOTE         5
#define LINK_OAM_SEND_LOCAL_AND_REMOTE_OK      6
#define LINK_OAM_PEERING_LOCALLY_REJECTED      7
#define LINK_OAM_PEERING_REMOTELY_REJECTED     8
#define LINK_OAM_OPERATIONAL                   9
#define LINK_OAM_NON_OPER_HALF_DUPLEX          10

#define LINK_OAM_PASSIVE                       1
#define LINK_OAM_ACTIVE                        2

#define LINK_OAM_UNI_DIRECTIONAL_SUPPORT       0x80
#define LINK_OAM_LOOPBACK_SUPPORT              0x40
#define LINK_OAM_EVENT_SUPPORT                 0x20
#define LINK_OAM_VARIABLE_SUPPORT              0x10

#define LINK_OAM_NO_LOOPBACK                   1
#define LINK_OAM_INITIATING_LOOPBACK           2
#define LINK_OAM_REMOTE_LOOPBACK               3
#define LINK_OAM_TERMINATING_LOOPBACK          4
#define LINK_OAM_LOCAL_LOOPBACK                5
#define LINK_OAM_UNKNOWN                       6

#define LINK_OAM_LOOPBACK_IGNORE               1
#define LINK_OAM_LOOPBACK_PROCESS              2

#define LINK_OAM_MAC_ADDRESS_LEN               6
#define LINK_OAM_VENDOR_OUI_LEN                3

#define LINK_OAM_FRAME_SECS_SUMMARY_WINDOW_MAX 9000
#define LINK_OAM_FRAME_SECS_SUMMARY_WINDOW_MIN 100


/* the range of LINK_OAM_FRAME_SECS_SUMMARY_THRESHOLD_MIN is 0-900,
   but if the threshold value is zero, then an Event Notification OAMPDU is sent periodically,
   so the zero is accpetable, too. Reference DOT3-OAM-MIB.

    According to the 802.3ah(2004) standard's clause: 57.5.3.1, the values for
    "Errored Symbol Threshold" are:

    "1) The default value is one symbol error.
     2) The lower bound is zero symbol errors.
     3) The upper bound is unspecified."

    our implementation specifies the default value to be 0 seconds.
*/


#define LINK_OAM_FRAME_SECS_SUMMARY_THRESHOLD_MIN 0
#define LINK_OAM_FRAME_SECS_SUMMARY_THRESHOLD_MAX 900

#define SNMP_DEBUG_LOG_ERROR_OAM  { \
    if (log_rc < 0) {\
    T_D("%s:SNMP log return code error, log error:%d ", __FUNCTION__, log_rc);\
    } \
}
typedef struct dot3OamTable_entry {
    u32 dot3OamAdminState;
    u32 dot3OamOperStatus;
    u32 dot3OamMode;
    u32 dot3OamMaxOamPduSize;
    u32 dot3OamConfigRevision;
    u8  dot3OamFunctionsSupported;
} dot3OamTable_entry_t;

typedef struct dot3OamPeerTable_entry {
    u8 dot3OamPeerMacAddress[LINK_OAM_MAC_ADDRESS_LEN];
    u8 dot3OamPeerVendorOui[LINK_OAM_VENDOR_OUI_LEN];
    u32 dot3OamPeerVendorInfo;
    u32 dot3OamPeerMode;
    u32 dot3OamPeerMaxOamPduSize;
    u32 dot3OamPeerConfigRevision;
    u8  dot3OamPeerFunctionsSupported;
} dot3OamPeerTable_entry_t;

typedef struct dot3OamLoopbackTable_entry {
    u32 dot3OamLoopbackStatus;
    u32 dot3OamLoopbackIgnoreRx;
} dot3OamLoopbackTable_entry_t;

typedef struct dot3OamStatsTable_entry {
    u32 dot3OamInformationTx;
    u32 dot3OamInformationRx;
    u32 dot3OamUniqueEventNotificationTx;
    u32 dot3OamUniqueEventNotificationRx;
    u32 dot3OamDuplicateEventNotificationTx;
    u32 dot3OamDuplicateEventNotificationRx;
    u32 dot3OamLoopbackControlTx;
    u32 dot3OamLoopbackControlRx;
    u32 dot3OamVariableRequestTx;
    u32 dot3OamVariableRequestRx;
    u32 dot3OamVariableResponseTx;
    u32 dot3OamVariableResponseRx;
    u32 dot3OamOrgSpecificTx;
    u32 dot3OamOrgSpecificRx;
    u32 dot3OamUnsupportedCodesTx;
    u32 dot3OamUnsupportedCodesRx;
    u32 dot3OamFramesLostDueToOam;
} dot3OamStatsTable_entry_t;

typedef struct dot3OamEventConfigTable_entry {
    u32 dot3OamErrSymPeriodWindowHi;
    u32 dot3OamErrSymPeriodWindowLo;
    u32 dot3OamErrSymPeriodThresholdHi;
    u32 dot3OamErrSymPeriodThresholdLo;
    u8 dot3OamErrSymPeriodEvNotifEnable;
    u32 dot3OamErrFramePeriodWindow;
    u32 dot3OamErrFramePeriodThreshold;
    u8 dot3OamErrFramePeriodEvNotifEnable;
    u32 dot3OamErrFrameWindow;
    u32 dot3OamErrFrameThreshold;
    u8 dot3OamErrFrameEvNotifEnable;
    u32 dot3OamErrFrameSecsSummaryWindow;
    u32 dot3OamErrFrameSecsSummaryThreshold;
    u8 dot3OamErrFrameSecsEvNotifEnable;
    u8 dot3OamDyingGaspEnable;
    u8 dot3OamCriticalEventEnable;
} dot3OamEventConfigTable_entry_t;

typedef struct dot3OamEventLogTable_entry {
    u32 dot3OamEventLogTimestamp;
    u8 dot3OamEventLogOui[3];
    u32 dot3OamEventLogType;
    u32 dot3OamEventLogLocation;
    u32 dot3OamEventLogWindowHi;
    u32 dot3OamEventLogWindowLo;
    u32 dot3OamEventLogThresholdHi;
    u32 dot3OamEventLogThresholdLo;
    u64 dot3OamEventLogValue;
    u64 dot3OamEventLogRunningTotal;
    u32 dot3OamEventLogEventTotal;
} dot3OamEventLogTable_entry_t;
/*
 * function declarations
 */
void            init_dot3OamMIB(void);
FindVarMethod   var_dot3OamMIB;
FindVarMethod   var_dot3OamTable;
FindVarMethod   var_dot3OamPeerTable;
FindVarMethod   var_dot3OamLoopbackTable;
FindVarMethod   var_dot3OamStatsTable;
FindVarMethod   var_dot3OamEventConfigTable;
FindVarMethod   var_dot3OamEventLogTable;
WriteMethod     write_dot3OamAdminState;
WriteMethod     write_dot3OamMode;
WriteMethod     write_dot3OamLoopbackStatus;
WriteMethod     write_dot3OamLoopbackIgnoreRx;
WriteMethod     write_dot3OamErrSymPeriodWindowHi;
WriteMethod     write_dot3OamErrSymPeriodWindowLo;
WriteMethod     write_dot3OamErrSymPeriodThresholdHi;
WriteMethod     write_dot3OamErrSymPeriodThresholdLo;
WriteMethod     write_dot3OamErrSymPeriodEvNotifEnable;
WriteMethod     write_dot3OamErrFramePeriodWindow;
WriteMethod     write_dot3OamErrFramePeriodThreshold;
WriteMethod     write_dot3OamErrFramePeriodEvNotifEnable;
WriteMethod     write_dot3OamErrFrameWindow;
WriteMethod     write_dot3OamErrFrameThreshold;
WriteMethod     write_dot3OamErrFrameEvNotifEnable;
WriteMethod     write_dot3OamErrFrameSecsSummaryWindow;
WriteMethod     write_dot3OamErrFrameSecsSummaryThreshold;
WriteMethod     write_dot3OamErrFrameSecsEvNotifEnable;
WriteMethod     write_dot3OamDyingGaspEnable;
WriteMethod     write_dot3OamCriticalEventEnable;

#endif                          /* DOT3OAMMIB_H */

