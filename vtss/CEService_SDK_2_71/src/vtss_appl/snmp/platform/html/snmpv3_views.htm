<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>
<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>SNMPv3 View Configuration</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript" src="lib/validate.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_snmpv3_views.htm";

var reqObject;
var entryIdxArray = Array();
var receiveEntryName = Array();
var emptyConfigForm = true;
var originalCnt = 0;
var newCreateCnt = 0;
var maxCreateCnt = 16;

var oTType = Array("included", "excluded");
var oVType = Array(1, 2);

function isSnmpAdminString(str)
{
    var myReg;

    myReg = /^[!-~]{1,}$/;

    return myReg.test(str);
}

function isOidString(oid)
{
    var oid_len = 0;

    if (oid.charAt(0) != '.') {
        return false;
    }

    for (var i = 0; i < oid.length; i++) {
        var ValueChar = oid.charAt(i);
        if (((ValueChar != '.') && (ValueChar != '*')) &&
            (ValueChar < '0' || ValueChar > '9')) {
            return false;
        }
        if (ValueChar == '*') {
            if (i === 0 || oid.charAt(i - 1) != '.') {
                return false;
            }
        }
        if (ValueChar == '.') {
            if (i == oid.length - 1) {
                return false;
            } else if (oid.charAt(i+1) == '.') {
                return false;
            }
            oid_len++;
            if (oid_len > 128) {
                return false;
            }
        }
    }

    return true;
}

function addEntryIdx()
{
    var fld;

    for (var i = 1; i <= maxCreateCnt; i++) {
        fld = document.getElementById("delEntryIdx_" + i);
        if (!fld) {
            entryIdxArray[newCreateCnt++] = i;
            return i;
        }
    }
    return 0;
}

function delEntryIdx(id, tr)
{
    var values = id.split("_");
    var idx = parseInt(values[1], 10);

    for (var i = 0; i < newCreateCnt; i++) {
        if (idx == entryIdxArray[i]) {
            for (var j = i; j < newCreateCnt; j++) {
                entryIdxArray[j] = entryIdxArray[j + 1];
            }
            break;
        }
    }

    newCreateCnt--;
    document.getElementById("snmpv3Data").removeChild(tr);
}

function addNewRow()
{
    var delCnt = 0;
    for (var idx = 0; idx < receiveEntryName.length; idx++) {
        if (document.getElementById("del_" + receiveEntryName[idx]).checked) {
            delCnt++;
        }
    }

    if (originalCnt - delCnt + newCreateCnt >= maxCreateCnt) {
        alert("The maximum number of entries is " + maxCreateCnt);
        return;
    }

    // Search for a new free name for this row.
    var new_idx = addEntryIdx();
    if (parseInt(new_idx, 10) === 0) {
        alert("The maximum number of entries is " + maxCreateCnt);
        return;
    }

    // create holder for accumulated tbody elements and text nodes
    var frag = document.createDocumentFragment();
    var tr = CreateStyledElement("tr", (originalCnt + new_idx) % 2 ? "config_even" : "config_odd");

    var button = document.createElement('input');
    button.onclick = function() { delEntryIdx(this.id, tr); };
    button.id = "delEntryIdx_" + new_idx;
    button.type = "button";
    button.value = " Delete ";
    var td = CreateTd("c");
    addCell(tr, td, button);

    td = addInputCell(tr, "", "cr", "new_view_" + new_idx, 8);
    td.setAttribute("maxLength", 32);
    addSelectCell(tr, oTType, oVType, oVType[0], "cr", "new_type_" + new_idx);
    td = addInputCell(tr, "", "cr", "new_subtree_" + new_idx, 32);
    td.setAttribute("maxLength", 512);

    frag.appendChild(tr);       // Add row to fragment
    var tbody = document.getElementById("snmpv3Data");
    if (!tbody.appendChild(frag)) { // Add Frag to table body
      alert("This browser doesn't support dynamic tables.");
    }
}

function addRow(index, frag, values)
{
    var tr = CreateStyledElement("tr", index % 2 ? "config_odd" : "config_even");

    originalCnt++;
    receiveEntryName[index] = values[0] + values[2];

    addCheckBoxCell(tr, 0, "c", "del_" + values[0] + values[2]);
    addTextCell(tr, values[0], "cr");
    addSelectCell(tr, oTType, oVType, parseInt(values[1], 10), "cr", "type_"  + values[0] + values[2]);
    addTextCell(tr, values[2], "cr");
    frag.appendChild(tr);       // Add row to fragment
}

function checkForm(form)
{
    var fld, idx, new_idx;

    if (emptyConfigForm && !newCreateCnt) {
        document.location.href = "snmpv3_views.htm";
        return false;
    }

    if (newCreateCnt) {
        for (new_idx = 0; new_idx < newCreateCnt; new_idx++) {
            //view_name
            fld = document.getElementById("new_view_" + entryIdxArray[new_idx]);
            if (fld.value.length < 1 || fld.value.length > 32) {
                GiveAlert("The length of 'View Name' is restricted to 1 - 32", fld);
                return false;
            }
            if (!isSnmpAdminString(fld.value)) {
                GiveAlert("The 'View Name' is restricted to ASCII characters from 33 to 126", fld);
                return false;
            }
            if (fld.value == "None") {
                GiveAlert("The view name of 'None' is reserved", fld);
                return false;
            }

            //subtree
            fld = document.getElementById("new_subtree_" + entryIdxArray[new_idx]);
            if (!isOidString(fld.value)) {
                GiveAlert("The format of 'OID Subtree' is .OID1.OID2.OID3...  The allowed OID length is 1 to 128. The allowed string content is digital number or asterisk(*)", fld);
                return false;
            }

            //check if repeated view name and subtree
            var new_name = document.getElementById("new_view_" + entryIdxArray[new_idx]);
            var new_subtree = document.getElementById("new_subtree_" + entryIdxArray[new_idx]);
            for (idx = 0; idx < receiveEntryName.length; idx++) {
                if (document.getElementById("del_" + receiveEntryName[idx]).checked) {
                    continue;
                }
                if ((new_name.value + new_subtree.value) == receiveEntryName[idx]) {
                    GiveAlert("The entry '" + new_name.value + ", " + new_subtree.value + "' already exists", new_name);
                    return false;
                }
            }
        }
    }

    return true;                // Feed the chickens and go home
}

function processUpdate(req, ref)
{
    if (reqObject != req) {
        reqObject = req;
    }
    if (req.responseText) {
        var snmpv3Config = req.responseText.split("|");
        //if (1) {
        //var snmpv3Config = req.split("|");

        snmpv3Config[0] = snmpv3Config[0].replace(/^\n/, "");
        // create holder for accumulated tbody elements and text nodes
        var frag = document.createDocumentFragment();
        for (var i = 0; i < snmpv3Config.length; i++) {
            if (snmpv3Config[i]) {
                var receiveData = snmpv3Config[i].split("/");
                receiveData[0] = unescape(receiveData[0]);
                addRow(i, frag, receiveData);
                emptyConfigForm = false;
            }
        }
        var tbody = document.getElementById(ref);
        clearChildNodes(tbody);
        newCreateCnt = 0;
        if (!tbody.appendChild(frag)) { // Add Frag to table body
            alert("This browser doesn't support dynamic tables.");
        }
    }
}

function requestUpdate()
{
    //Format: <view_name>/<view_type>/<subtree>,...
    //var req="view1/1/.1.3.6.1.2.1|view2/2/.1";
    //processUpdate(req, "snmpv3Data");
    loadXMLDoc("/config/snmpv3_views", processUpdate, "snmpv3Data");
}

function resetForm()
{
    processUpdate(reqObject, "snmpv3Data");
}

 </script>
</head>

<body class="content" onload="requestUpdate();">

<h1>SNMPv3 View Configuration</h1>

<form name="snmpv3ConfigForm" method="POST" action="/config/snmpv3_views" onsubmit="return checkForm(this);">

<table summary="SNMPv3 View Configuration" cellspacing="0" class="config">
 <thead>
  <tr class="config_header">
   <th>Delete</th>
   <th>View Name</th>
   <th>View Type</th>
   <th>OID Subtree</th>
  </tr>
 </thead>
  <tbody id="snmpv3Data"></tbody>
</table>

<p>
  <input type="button" id="addNewEntry" value="Add New Entry" onclick="addNewRow();">&nbsp;&nbsp;&nbsp;&nbsp;
  <input type="submit" value="Save">
  <input type="button" value="Reset" onclick="resetForm();">
  <!-- Avoid both checkedbox are none checked -->
  <input type="hidden" name="dummy">
</p>

</form>
</body>
</html>


<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
