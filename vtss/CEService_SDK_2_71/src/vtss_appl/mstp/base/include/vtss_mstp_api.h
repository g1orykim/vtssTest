/*

 Vitesse Switch API software.

 Copyright (c) 2002-2011 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 
*/

#ifndef _VTSS_MSTP_API_H_
#define _VTSS_MSTP_API_H_

#include "vtss_mstp_types.h"

/**
 * \file vtss_mstp_api.h
 * \brief MSTP main API header file
 *
 * This file contain the definitions of API functions and associated
 * types.
 *
 * \author Lars Povlsen <lpovlsen@vitesse.com>
 *
 * \date 09-01-2009
 */

/** Maximum supported MSTI instances.
 *
 * \note CIST occupies index zero, so valid (non-CIST) MSTI indexes
 * goes from 1 to (N_MSTI_MAX-1).
 */
#define N_MSTI_MAX	8

/** Opaque MSTP handle */
typedef struct mstp_bridge mstp_bridge_t;

/** Basic MAC address type */
typedef struct { u8 mac[6]; } mstp_macaddr_t;

/** 
 * 6.4.3 - adminPoint2Point values
 */
typedef enum {
    P2P_FORCETRUE,              /*!< The administrator requires the
                                 * MAC to be treated as if it is
                                 * connected to a point-to-point LAN,
                                 * regardless of any indications to
                                 * the contrary that are generated by
                                 * the MAC entity. */
    P2P_FORCEFALSE,             /*!< The administrator requires the
                                 * MAC to be treated as connected to a
                                 * non-point-to-point LAN, regardless
                                 * of any indications to the contrary
                                 * that are generated by the MAC
                                 * entity. */
    P2P_AUTO,                   /*!< The administrator requires the
                                 * point-to-point status of the MAC to
                                 * be determined in accordance with
                                 * the specific MAC procedures defined
                                 * in 6.5. */
} mstp_p2p_t;

/** 
 * 7.4 - port state
 */
typedef enum {
    PORTSTATE_DISABLED,
    PORTSTATE_DISCARDING,
    PORTSTATE_LEARNING,
    PORTSTATE_FORWARDING,
} mstp_portstate_t;

/** Value for automatic path cost (port) */
#define MSTP_PORT_PATHCOST_AUTO	((u32)0)

/** Value signifying an event has never occurred
 * (timeSinceTopologyChange) 
 */
#define MSTP_TIMESINCE_NEVER	((u32)-1)

/**
 * Values for forceProtocolVersion (17.13.4)
 */
#define MSTP_PROTOCOL_VERSION_MSTP   ((u8)3) /*!< MSTP Operation */
#define MSTP_PROTOCOL_VERSION_RSTP   ((u8)2) /*!< RSTP Operation */
#define MSTP_PROTOCOL_VERSION_COMPAT ((u8)0) /*!< Compatible operation (STP) */

/** Maximum valid VID value */
#define MSTP_MAX_VID	4096

/** Minimum valid VID value */
#define MSTP_MIN_VID	1

/** Null (invalid) VID value */
#define MSTP_NULL_VID	0

/** Length of a bridge identifier - 2 bytes priority and 6 bytes
 * Bridge Address 
 */
#define MSTP_BRIDGEID_LEN	8

/** Maximum length of the MSTP configuration identifier name */
#define MSTP_CONFIG_NAME_MAXLEN 32

/** MSTI map MD5 digest length */
#define MSTP_DIGEST_LEN		16

/** 
 * 802.1Q - 8.9 MST Configuration table
 *
 * (Host order MSTIDs)
 *
 * For the purposes of calculating the Configuration Digest, the MST
 * Configuration Table is considered to contain 4096 consecutive two
 * octet elements, where each element of the table (with the exception
 * of the first and last) contains an MSTID value encoded as a binary
 * number, with the first octet being most significant.  The first
 * element of the table contains the value 0, the second element the
 * MSTID value corresponding to VID 1, the third element the MSTID
 * value corresponding to VID 2, and so on, with the next to last
 * element of the table containing the MSTID value corresponding to
 * VID 4094, and the last element containing the value 0.
 */
typedef struct {
    u8 map[MSTP_MAX_VID];
} mstp_map_t;

/**
 * Bridge status structure (12.8.1.1.3 Outputs)
 */
typedef struct {
    /** Number of ports in bridge (max) */
    uint n_ports;

    /** a) Bridge Identifier - as defined in 9.2.5 of IEEE Std
     * 802.1D. The Bridge Identifier for the CIST. 
     */
    u8 bridgeId[MSTP_BRIDGEID_LEN];

    /** Time Since Topology Change - in an STP Bridge, the count in
     * seconds of the time elapsed since the Topology Change flag
     * parameter for the Bridge (8.5.3.12 of IEEE Std 802.1D, 1998
     * Edition) was last True, or in an RSTP or MSTP Bridge, the count
     * in seconds since tcWhile timer (13.21 of this standard or
     * 17.15.7 of IEEE Std 802.1D) for any Port was non-zero */
    u32 timeSinceTopologyChange;

    /** Topology Change Count - in an STP Bridge, the count of the times
     * the Topology Change flag parameter for the Bridge has been set
     * (i.e., transitioned from False to True) since the Bridge was
     * powered on or initialized, or in an RSTP or MSTP Bridge, the
     * count of times that there has been at least one non-zero
     * tcWhile timer (13.21 of this standard or 17.15.7 of IEEE Std
     * 802.1D). */
    u32 topologyChangeCount;

    /** d) Topology Change - in an STP Bridge, the value of the Topology
     * Change parameter (8.5.3.12 of IEEE Std 802.1D, 1998 Edition),
     * or in an RSTP or MSTP Bridge, asserted if the tcWhile timer for
     * any Port for the CIST (13.21 of this standard, 17.15.7 of IEEE
     * Std 802.1D) is non-zero. */
    bool topologyChange;

    /** e) Designated Root (13.23.3 of this standard, 17.18.7 of IEEE
     * Std 802.1D). 
     */
    u8 designatedRoot[MSTP_BRIDGEID_LEN];

    /** f) Root Path Cost (13.23.3 of this standard, 17.18.7 of IEEE
     * Std 802.1D). 
     */
    u32 rootPathCost;

    /** g) Root Port (13.23.5 of this standard, 17.17.5 of IEEE Std
     * 802.1D). 
     */
    u32 rootPort;

    /** h) Max Age (13.23.7 of this standard, 17.18.18 of IEEE Std
     * 802.1D). 
     */
    u32 maxAge;

    /** i) Forward Delay (13.23.7 of this standard, 17.16.2 of IEEE
     * Std 802.1D).
     */
    u32 forwardDelay;

    /** j) Bridge Max Age (13.23.4 of this standard, 17.17.4 of IEEE
     * Std 802.1D).
     */
    u32 bridgeMaxAge;

    /** k) Bridge Hello Time (13.23.4 of this standard, 17.17.4 of
     * IEEE Std 802.1D). This parameter is present only if the Bridge
     * supports STP or RSTP.
    */
    u32 bridgeHelloTime;

    /** l) Bridge Forward Delay (13.23.4 of this standard, 17.17.4 of
     * IEEE Std 802.1D). 
     */
    u32 bridgeForwardDelay;

    /** m) Hold Time (8.5.3.14 of IEEE Std 802.1D, 1998 Edition) or Transmission Limit (TxHoldCount in
     * 13.22 of this standard and 17.16.6 of IEEE Std 802.1D).
    */
    u32 txHoldCount;

    /** n) forceVersion - the value of the Force Protocol Version
     * parameter for the Bridge (13.6.2 of this standard and 17.16.1
     * of IEEE Std 802.1D) 
     */
    u8 forceVersion;

    /** o) CIST Regional Root Identifier (13.16.4). The Bridge
     * Identifier of the current CIST Regional Root. 
     *
     * \note Only valid for the CIST.
     */
    u8 cistRegionalRoot[MSTP_BRIDGEID_LEN];

    /** p) CIST Path Cost. The CIST path cost from the transmitting
     * Bridge to the CIST Regional Root. 
     *
     * \note Only valid for the CIST.
     */
    u32 cistInternalPathCost;

    /** q) MaxHops (13.22.1).
     *
     * \note Only valid for the CIST.
     */
    u8 maxHops;

} mstp_bridge_status_t;

/** 
 * CIST Bridge configuration structure (12.8.1.3.2 Inputs)
 */
typedef struct {
    /** a) Bridge Max Age - the new value (13.23.4 of this standard,
     * 17.17.4 of IEEE Std 802.1D). 
     */
    u32 bridgeMaxAge;

    /** b) Bridge Hello Time - the new value (13.23.4 of this standard,
     * 17.17.4 of IEEE Std 802.1D) 
     */
    u32 bridgeHelloTime;

    /** c) Bridge Forward Delay - the new value (13.23.4 of this
     * standard, 17.17.4 of IEEE Std 802.1D). 
     */
    u32 bridgeForwardDelay;

    /** d) Bridge Priority - the new value of the priority part of the
     * Bridge Identifier (13.23.2) for the CIST.
     *
     * \note Use the vtss_mstp_set_bridge_priority() interface to set
     * this parameter.
     */
    u8 dummy;

    /** e) forceVersion - the new value of the Force Protocol Version
     * parameter for the Bridge (13.6.2 of this standard, 17.16.1 of
     * IEEE Std 802.1D).
     */
    u8 forceVersion;

    /** f) TxHoldCount - the new value of TxHoldCount (17.13.12 of IEEE Std 802.1D). 
     */
    u32 txHoldCount;

    /** g) MaxHops - the new value of MaxHops (13.22.1).
     */
    u8 MaxHops;

    /** bpduFiltering - enable BPDU filtering for edge ports
     */
    u8 bpduFiltering;

    /** bpduGuard - enable BPDU guard for edge ports
     */
    u8 bpduGuard;

    /** bpduTransparency - enable BPDU transparency
     */
    u8 bpduTransparency;

    /** Error Recovery Delay - the number of seconds until a STP
     * inconsistent port is recovered. Valid values are zero (recovery
     * disabled) or between 30 and 86400 (24 hours).
     */
    u32 errorRecoveryDelay;

} mstp_bridge_param_t;

/**
 * Port status structure (12.8.2.1.3 Outputs)
 */
typedef struct {
    /** a) Uptime - count in seconds of the time elapsed since the Port
     * was last reset or initialized (BEGIN, 13.23).
     */
    u32 uptime;

    /** b) State - the current state of the Port (i.e., Disabled,
     * Listening, Learning, Forwarding, or Blocking) (8.4, 13.35 of
     * this standard, 17.5 of IEEE Std 802.1D).
     */
    int state;
    /** b) State - port state (printable string) */
    char statestr[16];

    /** c) Port Identifier - the unique Port identifier comprising two
     * parts, the Port Number and the Port Priority field (13.24.12 of
     * this standard, 17.18.16 of IEEE Std 802.1D).
     */
    u8 portId[2];

    /** d) Path Cost (17.16.5 of IEEE Std 802.1D). */
    u32 pathCost;

    /** e) Designated Root (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D). 
     */
    u8 designatedRoot[MSTP_BRIDGEID_LEN];

    /** f) Designated Cost (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    u32 designatedCost;

    /** g) Designated Bridge (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    u8 designatedBridge[MSTP_BRIDGEID_LEN];

    /** h) Designated Port (13.24.12 of this standard, 17.18.17 of
     * IEEE Std 802.1D).
     */
    u8 designatedPort[2];

    /** i) Topology Change Acknowledge (17.18.37 of IEEE Std
     * 802.1D).
     */
    bool tcAck;

    /** j) Hello Time (13.24.13 of this standard, 17.18.18 of IEEE Std
     * 802.1D).
     */
    u32 helloTime;

    /** k) adminEdgePort (18.3.3 of IEEE Std 802.1D). Present in
     * implementations that support the identification of edge
     * ports.
     */
    bool adminEdgePort;

    /** l) operEdgePort (18.3.4 of IEEE Std 802.1D). Present in
     * implementations that support the identification of edge ports.
     */
    bool operEdgePort;

    /** 802.1D-l) autoEdgePort (17.13.3). Optional and provided only by RSTP
     * Bridges that support the automatic identification of edge
     * ports. */
    bool autoEdgePort;

    /** m) MAC Enabled - the current state of the MAC Enabled
     * parameter (6.4.2). Present if the implementation supports the
     * MAC Enabled parameter. */
    bool dummy;

    /** n) MAC Operational - the current state of the MAC Operational
     * parameter (6.4.2 of IEEE Std 802.1D,). Present if the
     * implementation supports the MAC Operational parameter.
     */
    bool macOperational;

    /** o) adminPointToPointMAC - the current state of the
     * adminPointToPointMAC parameter (6.4.3 of IEEE Std
     * 802.1D). Present if the implementation supports the
     * adminPointToPointMAC parameter.
     */
    mstp_p2p_t adminPointToPointMAC;

    /** p) operPointToPointMAC - the current state of the
     * operPointToPointMAC parameter (6.4.3 of IEEE Std
     * 802.1D). Present if the implementation supports the
     * operPointToPointMAC parameter.
     */
    bool operPointToPointMAC;

    /** q) restrictedRole - the current state of the restrictedRole
     * parameter for the Port (13.25.14).
     */
    bool restrictedRole;

    /** r) restrictedTcn - the current state of the restrictedTcn
     * parameter for the Port (13.25.15).
     */
    bool restrictedTcn;

    /** s) Port Role - the current Port Role for the Port (i.e., Root,
     * Alternate, Designated, or Backup)
     */
    char rolestr[16];

    /** t) Disputed - the current value of the disputed variable for
     * the CIST for the Port (13.24, and 17.19 of IEEE Std 802.1D).
     */
    bool disputed;

} mstp_port_status_t;

/**
 * Single priority vector structure. Vitesse extension.
 */
typedef struct {
    u8  rootBridgeId[MSTP_BRIDGEID_LEN];       /*!< CIST only - Regional root */
    u32 extRootPathCost;                       /*!< CIST only - Exterior pathcost */
    u8  regRootBridgeId[MSTP_BRIDGEID_LEN];    /*!< Interior Root */
    u32 intRootPathCost;                       /*!< Interior pathcost */
    u8  DesignatedBridgeId[MSTP_BRIDGEID_LEN]; /*!< Designated bridge */
    u8  DesignatedPortId[2];                   /*!< Designated portId */
} mstp_bridge_vector_t;

/**
 * Port vectors structure. Vitesse extension.
 */
typedef struct {
    mstp_bridge_vector_t designated; /*!< Designated bridge vector*/
    mstp_bridge_vector_t port;       /*!< Port bridge vector */
    mstp_bridge_vector_t message;    /*!< Received bridge vector */
    char                 infoIs[16]; /*!< Port priority vector origin */
} mstp_port_vectors_t;

/**
 * Port statistics structure. Vitesse extension.
 */
typedef struct {
    u32 stp_frame_xmits;        /*<! STP frames transmitted */
    u32 stp_frame_recvs;        /*<! STP frames received */
    u32 tcn_frame_xmits;        /*<! TCN frames transmitted */
    u32 tcn_frame_recvs;        /*<! TCN frames received */
    u32 rstp_frame_xmits;       /*<! RSTP frames transmitted */
    u32 rstp_frame_recvs;       /*<! RSTP frames received */
    u32 mstp_frame_xmits;       /*<! MSTP frames transmitted */
    u32 mstp_frame_recvs;       /*<! MSTP frames received */
    u32 unknown_frame_recvs;    /*<! Unknown frames received and discarded in error */
    u32 illegal_frame_recvs;    /*<! Illegal frames received and discarded in error */
} mstp_port_statistics_t;

/**
 * Port configuration structure (12.8.2.3.2 Inputs)
 */
typedef struct {
    /* b) Path Cost - the new value (13.37.1 of this standard, 17.16.5
     * of IEEE Std 802.1D).
     *
     * NB: See mstp_msti_port_param_t
     */
    //u32 adminPathCost;  

    /* c) Port Priority - the new value of the priority field for the
     * Port Identifier (13.24.12 of this standard, 17.18.7 of IEEE Std
     * 802.1D).
     *
     * NB: See mstp_msti_port_param_t
     */
    //u8  adminPortPriority;

    /** d) adminEdgePort - the new value of the adminEdgePort parameter
     * (18.3.3 of IEEE Std 802.1D).
     */
    bool adminEdgePort;

    /** e) autoEdgePort - the new value of the autoEdgePort parameter
     * (802.1D 17.13.3). */
    bool adminAutoEdgePort;
    
    /* f) MAC Enabled - the new value of the MAC Enabled parameter
     * (6.4.2). 
     * NB: Not present in this implementation. See vtss_mstp_port_enable().
     */
    //bool macEnabled;

    /** g) adminPointToPointMAC - the new value of the
     * adminPointToPointMAC parameter (6.4.3).
     */
    mstp_p2p_t adminPointToPointMAC;

    /** g) restrictedRole - the new value of the restrictedRole
     * parameter for the Port (13.25.14).
     */
    bool restrictedRole;

    /** h) restrictedTcn - the new value of the restrictedTcn parameter
     * for the Port (13.25.15).
     */
    bool restrictedTcn;
    
    /** bpduGuard - enable BPDU guard on port (irrespective of bridge
     * bpduGuard setting).
     */
    u8 bpduGuard;
    
    /** bpduTransparency - enable BPDU transparency on port
     */
    u8 bpduTransparency;

} mstp_port_param_t;

/**
 * MSTI Port configuration structure (12.8.2.4.2 Inputs)
 */
typedef struct {
    /** c) Path Cost - the new value (13.37.1). 
     */
    u32 adminPathCost;  

    /** d) Port Priority - the new value of the priority field for the
     * Port Identifier (13.24.12).
     */
    u8 adminPortPriority;
} mstp_msti_port_param_t;

/**
 * Create MSTP bridge
 *
 * \return (opaque) instance data reference or NULL.
 *
 * \param bridge_id A unique 48-bit Universally Administered MAC
 * Address, termed the Bridge Address. (7.12.5 Unique identification
 * of a bridge).
 *
 * \param n_ports (maximum) number of ports in bridge. This defined
 * the valid port numbers for this instance to lie in the <em> 
 * [1; n_ports] </em> range (in accordance with 14.3 bullet j). Ports
 * are specifically added/deleted with vtss_mstp_add_port() and
 * vtss_mstp_delete_port() interfaces.
 */
mstp_bridge_t *
vtss_mstp_create_bridge(const mstp_macaddr_t *bridge_id, uint n_ports);

/**
 * Delete MSTP bridge.
 *
 * \param mstp The MSTP instance data.
 *
 */
void
vtss_mstp_delete_bridge(mstp_bridge_t *mstp);

/**
 * 12.12.3 Set MST Configuration Table
 *
 * \param mstp The MSTP instance data.
 *
 * \param map A table mapping each of the 4096 VLANs to a
 * corresponding MSTI. (802.1Q - 8.9). Entry 0 is skipped. The
 * remainder of entries must map to a valid MSTI index, with the CIST
 * having the value \e '0'. Initially, all VID's map to the CIST.
 *
 * \return TRUE if the \e map contain valid mappings, FALSE
 * otherwise.
 *
 * \note The current implementation do not distinguish between FID's
 * and VID's, i.e. there is a 1:1 mapping between them.
 *
 * \note MSTI instances in the bridge will be created and deleted as a
 * side-effect of setting the mapping table.
 *
 * Likewise, active CIST ports will be probed for MSTI membership and
 * MSTI ports will be added respectively removed to synchronize
 * instantiated ports in the active MSTIs.
 */
bool
vtss_mstp_set_mapping(mstp_bridge_t *mstp, mstp_map_t *map);

/**
 * 12.12.3.4 Set MST Configuration Identifier Elements
 *
 * Purpose: To change the current values of the modifiable elements of
 * the MST Configuration Identifier for the Bridge (13.7).
 *
 * \param mstp The MSTP instance data.
 *
 * \param name The Configuration Name (max MSTP_CONFIG_NAME_MAXLEN
 * characters).
 *
 * \param revision The Revision Level [0; 65535]
 */
void
vtss_mstp_set_config_id(mstp_bridge_t *mstp, 
                        const char *name,
                        u16 revision);

/**
 * Get MST Configuration Identifier Elements
 *
 * Purpose: To retreive the current values of the modifiable elements
 * of the MST Configuration Identifier for the Bridge (13.7), as well
 * as the configuration digest.
 *
 * \param mstp The MSTP instance data.
 *
 * \param name The Configuration Name (size MSTP_CONFIG_NAME_MAXLEN
 * characters). The pointer may be NULL if the name is not desired.
 *
 * \param revision The Revision Level. The pointer may be NULL if the
 * revision is not desired.
 *
 * \param digest The current MSTI map calculated digest (size
 * MSTP_DIGEST_LEN bytes). The pointer may be NULL if the digest is
 * not desired.
 */
void
vtss_mstp_get_config_id(mstp_bridge_t *mstp, 
                        char name[MSTP_CONFIG_NAME_MAXLEN],
                        u16 *revision,
                        u8 digest[MSTP_DIGEST_LEN]);

/**
 * Re-initialize port instance. The CIST and applicable MSTI's for the
 * port will be initialized. Port operational properties and
 * configuration is retained.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to initialize
 * 
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is larger than the maximum allowed port
 * number (see vtss_mstp_create_bridge()) - or if the port has not
 * been added.
 */
bool
vtss_mstp_reinit_port(mstp_bridge_t *mstp, 
                      uint portnum);

/**
 * Add port instance to bridge. The CIST and applicable MSTI's for the
 * port will be created - according to the VLAN mapping
 * table.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to add
 * 
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is larger than the maximum allowed port
 * number (see vtss_mstp_create_bridge()) - or if the port has already
 * been added.
 */
bool 
vtss_mstp_add_port(mstp_bridge_t *mstp, 
                   uint portnum);

/**
 * Delete port instance from bridge.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to delete
 * 
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is larger than the maximum allowed port
 * number (see vtss_mstp_create_bridge()) - or if the port has not
 * been added.
 */
bool 
vtss_mstp_delete_port(mstp_bridge_t *mstp, 
                      uint portnum);

/**
 * Query whether a port has been added to bridge
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to query
 * 
 * \return TRUE if the port number is valid and the port has been
 * added to the bridge. FALSE otherwise.
 */
bool
vtss_mstp_port_added(const mstp_bridge_t *mstp,
                     uint portnum);

/**
 * Control bridge port state. 
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to control
 *
 * \param enable Whether the port should be enabled or not. This is
 * the aggregate state of MAC_Enabled, MAC_Operational, Administrative
 * Port State and any 802.1X autorization. As such this controls \e
 * portEnabled (17.19.18) directly.
 *
 * \param linkspeed The link speed of the interface, in MB/s. The
 * speed will be converted into a path cost according to Table 17-3.
 *
 * \param fdx Full duplex operation of physical link
 * (operPointToPointMAC)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_port_enable(mstp_bridge_t *mstp,
                      uint portnum,
                      bool enable,
                      u32 linkspeed,
                      bool fdx);

/**
 * 12.8.1.1 Read CIST Bridge Protocol Parameters
 * 12.8.1.2 Read MSTI Bridge Protocol Parameters
 *
 * Purpose: To obtain information regarding the Bridge's Spanning Tree
 * Protocol Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param status The bridge status data (12.8.1.1.3 Outputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given \e msti is not a valid instance number.
 *
 * \note Some outputs are only defined for the CIST - see 802.1Q
 * 12.8.1.2.
 */
bool
vtss_mstp_get_bridge_status(mstp_bridge_t *mstp,
                            uint msti,
                            mstp_bridge_status_t *status);

/**
 * 12.8.1.1 Get Bridge Protocol Parameters
 *
 * Purpose: To read current parameters in the Bridge's Bridge Protocol
 * Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param param The bridge configuration data
 *
 * \return TRUE if the operation succeeded.
 */
bool
vtss_mstp_get_bridge_parameters(mstp_bridge_t *mstp,
                                mstp_bridge_param_t *param);

/**
 * 12.8.1.3 Set Bridge Protocol Parameters
 *
 * To modify parameters in the Bridge's Bridge Protocol Entity, in
 * order to force a configuration of the spanning tree and/or tune the
 * reconfiguration time to suit a specific topology. In RSTP and MSTP
 * implementations, this operation causes these values to be set for
 * all Ports of the Bridge.
 *
 * \param mstp The MSTP instance data.
 *
 * \param param The bridge configuration data
 *
 * \return TRUE if the operation succeeded.
 */
bool
vtss_mstp_set_bridge_parameters(mstp_bridge_t *mstp,
                                const mstp_bridge_param_t *param);

/**
 * 12.8.1.2 Get MSTI Bridge Protocol Parameters
 *
 * Purpose: To read parameters in the Bridge's Bridge Protocol Entity
 * for the specified Spanning Tree instance.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP instance number. The CIST has instance number
 * zero.
 *
 * \param bridgePriority - the current value of the priority part of the
 * Bridge Identifier (13.23.2) for the MSTI (Output).
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given \e msti is not a valid instance number. 
 */
bool
vtss_mstp_get_bridge_priority(mstp_bridge_t *mstp,
                              uint msti,
                              u8 *bridgePriority);

/**
 * 12.8.1.4 Set MSTI Bridge Protocol Parameters
 *
 * To modify parameters in the Bridge's Bridge Protocol Entity for the
 * specified Spanning Tree instance, in order to force a configuration
 * of the spanning tree and/or tune the reconfiguration time to suit a
 * specific topology.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP instance number. The CIST has instance number
 * zero.
 *
 * \param bridgePriority - the new value of the priority part of the
 * Bridge Identifier (13.23.2) for the MSTI
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given \e msti is not a valid instance number. 
 */
bool
vtss_mstp_set_bridge_priority(mstp_bridge_t *mstp,
                              uint msti,
                              u8 bridgePriority);

/**
 * 12.8.2.1 Read CIST Port Parameters
 * 12.8.2.2 Read MSTI Port Parameters
 * 
 * Purpose: To obtain information regarding a specific Port within the
 * Bridge's Bridge Protocol Entity, for the CIST/MSTI.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \param status The port status data (12.8.2.1.3 Outputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number or \e msti is not
 * a valid instance number.
 *
 * \note Some outputs are only defined for the CIST - see 802.1Q
 * 12.8.2.1.3/12.8.2.2.3 Outputs
 */
bool
vtss_mstp_get_port_status(mstp_bridge_t *mstp,
                          uint msti,
                          uint portnum,
                          mstp_port_status_t *status);

/**
 * Read Port Vectors
 * 
 * Purpose: To obtain information regarding a specific Port within the
 * Bridge's Bridge Protocol Entity, for the CIST/MSTI.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \param vectors The port vectors
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number or \e msti is not
 * a valid instance number.
 *
 * \note This is for debug and troubleshooting only.
 */
bool
vtss_mstp_get_port_vectors(const mstp_bridge_t *mstp,
                           uint msti,
                           uint portnum,
                           mstp_port_vectors_t *vectors);

/**
 * Read Port Statistics
 * 
 * Purpose: To obtain information regarding a specific Port's PDU
 * reception and transmission within the Bridge's Spanning Tree
 * Protocol Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \param statistics The port statistics data
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_get_port_statistics(const mstp_bridge_t *mstp,
                              uint portnum,
                              mstp_port_statistics_t *statistics);

/**
 * Clear Port Statistics
 * 
 * Purpose: To clear information regarding a specific Port's PDU
 * reception and transmission within the Bridge's Spanning Tree
 * Protocol Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_clear_port_statistics(const mstp_bridge_t *mstp,
                                uint portnum);

/**
 * 12.8.2.1 Get CIST port parameters
 *
 * Purpose: To read parameters for a CIST Port in the bridge's Bridge
 * Protocol Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \param param The current port configuration data (12.8.2.3.2
 * Inputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 *
 * \note To set Port Priority or Port Path Cost, use
 * vtss_mstp_set_msti_port_parameters() with the \e msti parameter set
 * to zero (implying the CIST).
 */
bool
vtss_mstp_get_port_parameters(mstp_bridge_t *mstp,
                              uint portnum,
                              mstp_port_param_t *param);

/**
 * 12.8.2.3 Set CIST port parameters
 *
 * Purpose: To modify parameters for a Port in the bridge's Bridge
 * Protocol Entity in order to force a configuration of the spanning
 * tree for the CIST.
 *
 * Procedure: In RSTP and MSTP Bridges, the Path Cost (13.37.1 of this
 * standard, 17.16.5 of IEEE Std 802.1D) and Port Priority (17.18.7 of
 * IEEE Std 802.1D) parameters for the Port are updated using the
 * supplied values. The reselect parameter value for the CIST for the
 * Port (13.24 of this standard, 17.18.29 of IEEE Std 802.1D) is set
 * TRUE, and the selected parameter for the CIST for the Port (13.24
 * of this standard, 17.18.31 of IEEE Std 802.1D) is set FALSE.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum Port Number - the number of the Bridge Port
 *
 * \param param The port configuration data (12.8.2.3.2 Inputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 *
 * \note To set Port Priority or Port Path Cost, use
 * vtss_mstp_set_msti_port_parameters() with the \e msti parameter set
 * to zero (implying the CIST).
 */
bool
vtss_mstp_set_port_parameters(mstp_bridge_t *mstp,
                              uint portnum,
                              const mstp_port_param_t *param);

/**
 * 12.8.2.2 Get MSTI port parameters
 *
 * Purpose: To read parameters for a MSTI/CIST Port in the Bridge's
 * Bridge Protocol Entity.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param portnum Port Number - the number of the MSTI Port
 *
 * \param param The current CIST/MSTI port configuration data
 * (12.8.2.4.2 Inputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_get_msti_port_parameters(mstp_bridge_t *mstp,
                                   uint msti,
                                   uint portnum,
                                   mstp_msti_port_param_t *param);

/**
 * 12.8.2.4 Set MSTI port parameters
 *
 * Purpose: To modify parameters for a Port in the Bridge's Bridge
 * Protocol Entity in order to force a configuration of the spanning
 * tree for the specified Spanning Tree instance.
 *
 * Procedure: The Path Cost (13.37.1 of this standard, 17.16.5 of IEEE
 * Std 802.1D) and Port Priority (17.18.7 of IEEE Std 802.1D)
 * parameters for the specified MSTI and Port are updated using the
 * supplied values. The reselect parameter value for the MSTI for the
 * Port (13.24) is set TRUE, and the selected parameter for the MSTI
 * for the Port () is set FALSE.
 *
 * \param mstp The MSTP instance data.
 *
 * \param msti The MSTP port instance number. The CIST has instance
 * number zero.
 *
 * \param portnum Port Number - the number of the MSTI Port
 *
 * \param param The port configuration data (12.8.2.4.2 Inputs)
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_set_msti_port_parameters(mstp_bridge_t *mstp,
                                   uint msti,
                                   uint portnum,
                                   const mstp_msti_port_param_t *param);

/**
 * 12.8.2.5 Force BPDU Migration Check
 *
 * Purpose: To force the specified Port to transmit RST or MST BPDUs
 * (see 13.29 of this standard and 17.26 of IEEE Std 802.1D).
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The bridge port to control
 *
 * \return TRUE if the operation succeeded. The operation will fail if
 * the given port number is not a valid port number.
 */
bool
vtss_mstp_port_mcheck(const mstp_bridge_t *mstp,
                      uint portnum);

/**
 * Tick MSTP state-event machines. This shall be called every 1000msec
 * by the host system.
 *
 * The function drives state for the MSTP instance.
 */
void
vtss_mstp_tick(mstp_bridge_t *mstp);

/**
 * BPDU receive. This is called when a port receives a PDU for the
 * bridge group address.
 *
 * \param mstp The MSTP instance data.
 *
 * \param portnum The physical port on which the frames was received.
 *
 * \param buffer The received BPDU.
 *
 * \param size The length of the BPDU buffer.
 */
void
vtss_mstp_rx(const mstp_bridge_t *mstp,
             uint portnum,
             const void *buffer, 
             size_t size);


/**
 * Stringification support - return a printable representation of a
 * bridge id.
 *
 * \param buffer The output buffer (must be at least 24 bytes long for
 * an full bridge display)
 *
 * \param size The length of the output \e buffer.
 *
 * \param bridgeid the bridge identifier - a MSTP_BRIDGEID_LEN long
 * byte array.
 *
 * \return the number of characters put into \e buffer. (Not including
 * the trailing '\\0'). A return value of size or more means that the
 * output was truncated. A negative value signal general failure.
 */
int
vtss_mstp_bridge2str(
    void *buffer, 
    size_t size,
    const u8 *bridgeid);

/**
 * Lock MSTP state-event machines. Used to optimize bulk port changes
 * (during system initialization etc). The locking can be nested.
 *
 * \param mstp The MSTP instance data.
 *
 */
void
vtss_mstp_stm_lock(mstp_bridge_t *mstp);

/**
 * Unlock MSTP state-event machines. Any pending state-event machine
 * updates will be performed (when nested unlocking reaches the top
 * level).
 *
 * \param mstp The MSTP instance data.
 *
 */
void
vtss_mstp_stm_unlock(mstp_bridge_t *mstp);

#endif /* _VTSS_MSTP_API_H_ */
