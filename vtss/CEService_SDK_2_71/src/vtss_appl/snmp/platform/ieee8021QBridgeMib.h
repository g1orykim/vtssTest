/*
 *
 * Vitesse Switch Software.
 *
 * Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
 * Rights Reserved.
 *
 * Unpublished rights reserved under the copyright laws of the United States of
 * America, other countries and international treaties. Permission to use, copy,
 * store and modify, the software and its source code is granted. Permission to
 * integrate into other products, disclose, transmit and distribute the software
 * in an absolute machine readable format (e.g. HEX file) is also granted.  The
 * source code of the software may not be disclosed, transmitted or distributed
 * without the written permission of Vitesse. The software and its source code
 * may only be used in products utilizing the Vitesse switch products.
 *
 * This copyright notice must appear in any copy, modification, disclosure,
 * transmission or distribution of the software. Vitesse retains all ownership,
 * copyright, trade secret and proprietary rights in the software.
 *
 * THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 * INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR USE AND NON-INFRINGEMENT.
 *
 */

// Note: This file originally auto-generated by mib2c using vtss_mib2c_ucd_snmp.conf v3.40

#ifndef _IEEE8021QBRIDGEMIB_H_
#define _IEEE8021QBRIDGEMIB_H_


#define IEEE8021_Q_BRIDGE  1
#define IEEE8021QBRIDGEMIB_STR_LEN_MAX    63    // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021QBRIDGEMIB_OID_LEN_MAX    16    // FIXME: Redefine a sufficient value for saving the memory
#define IEEE8021QBRIDGEMIB_BITS_LEN_MAX   4     // FIXME: Redefine a sufficient value for saving the memory


/******************************************************************************/
//
// Data structure declarations
//
/******************************************************************************/

// The scalar data structure for ieee8021QBridgeVlanNumDeletes
typedef struct {
    struct counter64 ieee8021QBridgeVlanNumDeletes;
} ieee8021QBridgeVlan_scalar_t;


// The table entry data structure for ieee8021QBridgeTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeComponentId;

    // Entry columns
    long            ieee8021QBridgeVlanVersionNumber;
    long            ieee8021QBridgeMaxVlanId;
    u_long          ieee8021QBridgeMaxSupportedVlans;
    u_long          ieee8021QBridgeNumVlans;
    long            ieee8021QBridgeMvrpEnabledStatus;
} ieee8021QBridgeTable_entry_t;

// The table entry data structure for ieee8021QBridgeCVlanPortTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeCVlanPortComponentId;
    u_long          ieee8021QBridgeCVlanPortNumber;

    // Entry columns
    long            ieee8021QBridgeCVlanPortRowStatus;
} ieee8021QBridgeCVlanPortTable_entry_t;

// The table entry data structure for ieee8021QBridgeFdbTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeFdbComponentId;
    u_long          ieee8021QBridgeFdbId;

    // Entry columns
    u_long          ieee8021QBridgeFdbDynamicCount;
    struct counter64 ieee8021QBridgeFdbLearnedEntryDiscards;
    long            ieee8021QBridgeFdbAgingTime;
} ieee8021QBridgeFdbTable_entry_t;

// The table entry data structure for ieee8021QBridgeTpFdbTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeFdbComponentId;
    u_long          ieee8021QBridgeFdbId;
    char            ieee8021QBridgeTpFdbAddress[6];
    size_t          ieee8021QBridgeTpFdbAddress_len;

    // Entry columns
    u_long          ieee8021QBridgeTpFdbPort;
    long            ieee8021QBridgeTpFdbStatus;
} ieee8021QBridgeTpFdbTable_entry_t;

// The table entry data structure for ieee8021QBridgeTpGroupTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanCurrentComponentId;
    u_long          ieee8021QBridgeVlanIndex;
    char            ieee8021QBridgeTpGroupAddress[6];
    size_t          ieee8021QBridgeTpGroupAddress_len;

    // Entry columns
    char
    ieee8021QBridgeTpGroupEgressPorts[IEEE8021QBRIDGEMIB_STR_LEN_MAX +
                                      1];
    size_t          ieee8021QBridgeTpGroupEgressPorts_len;
    char
    ieee8021QBridgeTpGroupLearnt[IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeTpGroupLearnt_len;
} ieee8021QBridgeTpGroupTable_entry_t;

// The table entry data structure for ieee8021QBridgeForwardAllTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanCurrentComponentId;
    u_long          ieee8021QBridgeForwardAllVlanIndex;

    // Entry columns
    char
    ieee8021QBridgeForwardAllPorts[IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeForwardAllPorts_len;
    char
    ieee8021QBridgeForwardAllStaticPorts[IEEE8021QBRIDGEMIB_STR_LEN_MAX
                                         + 1];
    size_t          ieee8021QBridgeForwardAllStaticPorts_len;
    char
    ieee8021QBridgeForwardAllForbiddenPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeForwardAllForbiddenPorts_len;
} ieee8021QBridgeForwardAllTable_entry_t;

// The table entry data structure for ieee8021QBridgeForwardUnregisteredTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanCurrentComponentId;
    u_long          ieee8021QBridgeForwardUnregisteredVlanIndex;

    // Entry columns
    char
    ieee8021QBridgeForwardUnregisteredPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeForwardUnregisteredPorts_len;
    char
    ieee8021QBridgeForwardUnregisteredStaticPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeForwardUnregisteredStaticPorts_len;
    char
    ieee8021QBridgeForwardUnregisteredForbiddenPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeForwardUnregisteredForbiddenPorts_len;
} ieee8021QBridgeForwardUnregisteredTable_entry_t;

// The table entry data structure for ieee8021QBridgeStaticUnicastTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeStaticUnicastComponentId;
    u_long          ieee8021QBridgeStaticUnicastVlanIndex;
    char            ieee8021QBridgeStaticUnicastAddress[6];
    size_t          ieee8021QBridgeStaticUnicastAddress_len;
    u_long          ieee8021QBridgeStaticUnicastReceivePort;

    // Entry columns
    char
    ieee8021QBridgeStaticUnicastStaticEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeStaticUnicastStaticEgressPorts_len;
    char
    ieee8021QBridgeStaticUnicastForbiddenEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeStaticUnicastForbiddenEgressPorts_len;
    long            ieee8021QBridgeStaticUnicastStorageType;
    long            ieee8021QBridgeStaticUnicastRowStatus;
} ieee8021QBridgeStaticUnicastTable_entry_t;

// The table entry data structure for ieee8021QBridgeStaticMulticastTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanCurrentComponentId;
    u_long          ieee8021QBridgeVlanIndex;
    char            ieee8021QBridgeStaticMulticastAddress[6];
    size_t          ieee8021QBridgeStaticMulticastAddress_len;
    u_long          ieee8021QBridgeStaticMulticastReceivePort;

    // Entry columns
    char
    ieee8021QBridgeStaticMulticastStaticEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeStaticMulticastStaticEgressPorts_len;
    char
    ieee8021QBridgeStaticMulticastForbiddenEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeStaticMulticastForbiddenEgressPorts_len;
    long            ieee8021QBridgeStaticMulticastStorageType;
    long            ieee8021QBridgeStaticMulticastRowStatus;
} ieee8021QBridgeStaticMulticastTable_entry_t;

// The table entry data structure for ieee8021QBridgeVlanCurrentTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanTimeMark;
    u_long          ieee8021QBridgeVlanCurrentComponentId;
    u_long          ieee8021QBridgeVlanIndex;

    // Entry columns
    u_long          ieee8021QBridgeVlanFdbId;
    char
    ieee8021QBridgeVlanCurrentEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeVlanCurrentEgressPorts_len;
    char
    ieee8021QBridgeVlanCurrentUntaggedPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeVlanCurrentUntaggedPorts_len;
    long            ieee8021QBridgeVlanStatus;
    u_long          ieee8021QBridgeVlanCreationTime;
} ieee8021QBridgeVlanCurrentTable_entry_t;

// The table entry data structure for ieee8021QBridgeVlanStaticTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeVlanStaticComponentId;
    u_long          ieee8021QBridgeVlanStaticVlanIndex;

    // Entry columns
    char
    ieee8021QBridgeVlanStaticName[IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeVlanStaticName_len;
    char
    ieee8021QBridgeVlanStaticEgressPorts[IEEE8021QBRIDGEMIB_STR_LEN_MAX
                                         + 1];
    size_t          ieee8021QBridgeVlanStaticEgressPorts_len;
    char
    ieee8021QBridgeVlanForbiddenEgressPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeVlanForbiddenEgressPorts_len;
    char
    ieee8021QBridgeVlanStaticUntaggedPorts
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeVlanStaticUntaggedPorts_len;
    long            ieee8021QBridgeVlanStaticRowStatus;
} ieee8021QBridgeVlanStaticTable_entry_t;

// The table entry data structure for ieee8021QBridgeNextFreeLocalVlanTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeNextFreeLocalVlanComponentId;

    // Entry columns
    u_long          ieee8021QBridgeNextFreeLocalVlanIndex;
} ieee8021QBridgeNextFreeLocalVlanTable_entry_t;

// The table entry data structure for ieee8021QBridgePortVlanTable
typedef struct {
    // Entry keys
    u_long          ieee8021BridgeBasePortComponentId;
    u_long          ieee8021BridgeBasePort;

    // Entry columns
    u_long          ieee8021QBridgePvid;
    long            ieee8021QBridgePortAcceptableFrameTypes;
    long            ieee8021QBridgePortIngressFiltering;
    long            ieee8021QBridgePortMvrpEnabledStatus;
    struct counter64 ieee8021QBridgePortMvrpFailedRegistrations;
    char            ieee8021QBridgePortMvrpLastPduOrigin[6];
    size_t          ieee8021QBridgePortMvrpLastPduOrigin_len;
    long            ieee8021QBridgePortRestrictedVlanRegistration;
} ieee8021QBridgePortVlanTable_entry_t;

// The table entry data structure for ieee8021QBridgePortVlanStatisticsTable
typedef struct {
    // Entry keys
    u_long          ieee8021BridgeBasePortComponentId;
    u_long          ieee8021BridgeBasePort;
    u_long          ieee8021QBridgeVlanIndex;

    // Entry columns
    struct counter64 ieee8021QBridgeTpVlanPortInFrames;
    struct counter64 ieee8021QBridgeTpVlanPortOutFrames;
    struct counter64 ieee8021QBridgeTpVlanPortInDiscards;
} ieee8021QBridgePortVlanStatisticsTable_entry_t;

// The table entry data structure for ieee8021QBridgeLearningConstraintsTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeLearningConstraintsComponentId;
    u_long          ieee8021QBridgeLearningConstraintsVlan;
    long            ieee8021QBridgeLearningConstraintsSet;

    // Entry columns
    long            ieee8021QBridgeLearningConstraintsType;
    long            ieee8021QBridgeLearningConstraintsStatus;
} ieee8021QBridgeLearningConstraintsTable_entry_t;

// The table entry data structure for ieee8021QBridgeLearningConstraintDefaultsTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeLearningConstraintDefaultsComponentId;

    // Entry columns
    long            ieee8021QBridgeLearningConstraintDefaultsSet;
    long            ieee8021QBridgeLearningConstraintDefaultsType;
} ieee8021QBridgeLearningConstraintDefaultsTable_entry_t;

// The table entry data structure for ieee8021QBridgeProtocolGroupTable
typedef struct {
    // Entry keys
    u_long          ieee8021QBridgeProtocolGroupComponentId;
    long            ieee8021QBridgeProtocolTemplateFrameType;
    char
    ieee8021QBridgeProtocolTemplateProtocolValue
    [IEEE8021QBRIDGEMIB_STR_LEN_MAX + 1];
    size_t          ieee8021QBridgeProtocolTemplateProtocolValue_len;

    // Entry columns
    long            ieee8021QBridgeProtocolGroupId;
    long            ieee8021QBridgeProtocolGroupRowStatus;
} ieee8021QBridgeProtocolGroupTable_entry_t;

// The table entry data structure for ieee8021QBridgeProtocolPortTable
typedef struct {
    // Entry keys
    u_long          ieee8021BridgeBasePortComponentId;
    u_long          ieee8021BridgeBasePort;
    long            ieee8021QBridgeProtocolPortGroupId;

    // Entry columns
    long            ieee8021QBridgeProtocolPortGroupVid;
    long            ieee8021QBridgeProtocolPortRowStatus;
} ieee8021QBridgeProtocolPortTable_entry_t;


/******************************************************************************/
//
// Initial function
//
/******************************************************************************/
/**
  * \brief Initializes the SNMP-part of the IEEE8021-Q-BRIDGE-MIB:ieee8021QBridgeMib.
  **/
void            ieee8021QBridgeMib_init(void);


/******************************************************************************/
//
// Scalar access function declarations
//
/******************************************************************************/
/**
  * \brief Get scalar data of ieee8021QBridgeVlanScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to get the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int             ieee8021QBridgeVlanScalar_get(ieee8021QBridgeVlan_scalar_t
                                              * scalar_entry);

/**
  * \brief Set scalar data of ieee8021QBridgeVlanScalar.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the scalar
  *                              entry to set the scalar data.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int             ieee8021QBridgeVlanScalar_set(ieee8021QBridgeVlan_scalar_t
                                              * scalar_entry);


/******************************************************************************/
//
// Table entry access function declarations
//
/******************************************************************************/
/**
  * \brief Get first table entry of ieee8021QBridgeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeTableEntry_getfirst(ieee8021QBridgeTable_entry_t *
                                   table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int             ieee8021QBridgeTableEntry_get(ieee8021QBridgeTable_entry_t
                                              * table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int             ieee8021QBridgeTableEntry_set(ieee8021QBridgeTable_entry_t
                                              * table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeCVlanPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeCVlanPortTableEntry_getfirst
(ieee8021QBridgeCVlanPortTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeCVlanPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeCVlanPortTableEntry_get
(ieee8021QBridgeCVlanPortTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeCVlanPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeCVlanPortTableEntry_set
(ieee8021QBridgeCVlanPortTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeFdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeFdbTableEntry_getfirst(ieee8021QBridgeFdbTable_entry_t *
                                      table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeFdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeFdbTableEntry_get(ieee8021QBridgeFdbTable_entry_t *
                                 table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeFdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeFdbTableEntry_set(ieee8021QBridgeFdbTable_entry_t *
                                 table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeTpFdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeTpFdbTableEntry_getfirst(ieee8021QBridgeTpFdbTable_entry_t *
                                        table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeTpFdbTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeTpFdbTableEntry_get(ieee8021QBridgeTpFdbTable_entry_t *
                                   table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021QBridgeTpGroupTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeTpGroupTableEntry_getfirst
(ieee8021QBridgeTpGroupTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeTpGroupTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeTpGroupTableEntry_get(ieee8021QBridgeTpGroupTable_entry_t *
                                     table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021QBridgeForwardAllTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardAllTableEntry_getfirst
(ieee8021QBridgeForwardAllTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeForwardAllTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardAllTableEntry_get
(ieee8021QBridgeForwardAllTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeForwardAllTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardAllTableEntry_set
(ieee8021QBridgeForwardAllTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeForwardUnregisteredTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardUnregisteredTableEntry_getfirst
(ieee8021QBridgeForwardUnregisteredTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeForwardUnregisteredTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardUnregisteredTableEntry_get
(ieee8021QBridgeForwardUnregisteredTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeForwardUnregisteredTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeForwardUnregisteredTableEntry_set
(ieee8021QBridgeForwardUnregisteredTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeStaticUnicastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticUnicastTableEntry_getfirst
(ieee8021QBridgeStaticUnicastTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeStaticUnicastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticUnicastTableEntry_get
(ieee8021QBridgeStaticUnicastTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeStaticUnicastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticUnicastTableEntry_set
(ieee8021QBridgeStaticUnicastTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeStaticMulticastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticMulticastTableEntry_getfirst
(ieee8021QBridgeStaticMulticastTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeStaticMulticastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticMulticastTableEntry_get
(ieee8021QBridgeStaticMulticastTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeStaticMulticastTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeStaticMulticastTableEntry_set
(ieee8021QBridgeStaticMulticastTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeVlanCurrentTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeVlanCurrentTableEntry_getfirst
(ieee8021QBridgeVlanCurrentTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeVlanCurrentTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeVlanCurrentTableEntry_get
(ieee8021QBridgeVlanCurrentTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021QBridgeVlanStaticTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeVlanStaticTableEntry_getfirst
(ieee8021QBridgeVlanStaticTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeVlanStaticTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeVlanStaticTableEntry_get
(ieee8021QBridgeVlanStaticTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeVlanStaticTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeVlanStaticTableEntry_set
(ieee8021QBridgeVlanStaticTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeNextFreeLocalVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeNextFreeLocalVlanTableEntry_getfirst
(ieee8021QBridgeNextFreeLocalVlanTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeNextFreeLocalVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeNextFreeLocalVlanTableEntry_get
(ieee8021QBridgeNextFreeLocalVlanTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021QBridgePortVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgePortVlanTableEntry_getfirst
(ieee8021QBridgePortVlanTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgePortVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgePortVlanTableEntry_get(ieee8021QBridgePortVlanTable_entry_t
                                      * table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgePortVlanTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgePortVlanTableEntry_set(ieee8021QBridgePortVlanTable_entry_t
                                      * table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgePortVlanStatisticsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgePortVlanStatisticsTableEntry_getfirst
(ieee8021QBridgePortVlanStatisticsTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgePortVlanStatisticsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgePortVlanStatisticsTableEntry_get
(ieee8021QBridgePortVlanStatisticsTable_entry_t *table_entry, int getnext);

/**
  * \brief Get first table entry of ieee8021QBridgeLearningConstraintsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintsTableEntry_getfirst
(ieee8021QBridgeLearningConstraintsTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeLearningConstraintsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintsTableEntry_get
(ieee8021QBridgeLearningConstraintsTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeLearningConstraintsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintsTableEntry_set
(ieee8021QBridgeLearningConstraintsTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeLearningConstraintDefaultsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintDefaultsTableEntry_getfirst
(ieee8021QBridgeLearningConstraintDefaultsTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeLearningConstraintDefaultsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintDefaultsTableEntry_get
(ieee8021QBridgeLearningConstraintDefaultsTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeLearningConstraintDefaultsTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeLearningConstraintDefaultsTableEntry_set
(ieee8021QBridgeLearningConstraintDefaultsTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeProtocolGroupTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolGroupTableEntry_getfirst
(ieee8021QBridgeProtocolGroupTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeProtocolGroupTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolGroupTableEntry_get
(ieee8021QBridgeProtocolGroupTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeProtocolGroupTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolGroupTableEntry_set
(ieee8021QBridgeProtocolGroupTable_entry_t *table_entry);
/**
  * \brief Get first table entry of ieee8021QBridgeProtocolPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get the first table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolPortTableEntry_getfirst
(ieee8021QBridgeProtocolPortTable_entry_t *table_entry);

/**
  * \brief Get/Getnext table entry of ieee8021QBridgeProtocolPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to get/getnext the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolPortTableEntry_get
(ieee8021QBridgeProtocolPortTable_entry_t *table_entry, int getnext);

/**
  * \brief Set table entry of ieee8021QBridgeProtocolPortTableEntry.
  *
  * \param table_entry [IN_OUT]: Pointer to structure that contains the table
  *                              entry to set the table entry.
  *
  * \return: 0 if the operation success, non-zero value otherwise.
  **/
int
ieee8021QBridgeProtocolPortTableEntry_set
(ieee8021QBridgeProtocolPortTable_entry_t *table_entry);

#endif                          /* _IEEE8021QBRIDGEMIB_H_ */
