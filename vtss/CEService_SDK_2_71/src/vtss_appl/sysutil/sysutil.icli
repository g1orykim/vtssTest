//
// Vitesse Switch Software.
//
# Copyright (c) 2002-2013 Vitesse Semiconductor Corporation "Vitesse". All
# Rights Reserved.
#
# Unpublished rights reserved under the copyright laws of the United States of
# America, other countries and international treaties. Permission to use, copy,
# store and modify, the software and its source code is granted. Permission to
# integrate into other products, disclose, transmit and distribute the software
# in an absolute machine readable format (e.g. HEX file) is also granted.  The
# source code of the software may not be disclosed, transmitted or distributed
# without the written permission of Vitesse. The software and its source code
# may only be used in products utilizing the Vitesse switch products.
#
# This copyright notice must appear in any copy, modification, disclosure,
# transmission or distribution of the software. Vitesse retains all ownership,
# copyright, trade secret and proprietary rights in the software.
#
# THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
# INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR USE AND NON-INFRINGEMENT.
//
//
// Module Segment
//   This tag value is used to decide whether all commands of this module are
//   registered or not and the generated C/H file is compiled or not.
//
MODULE_IF_FLAG = defined(VTSS_SW_OPTION_SYSUTIL)

//
// Include Segment
//   The segment contains the include files. These include files are needed
//   for the code body, that is, all other segments.
//   "icli_api.h" is the default include file that will be auto-generated
//   in C file.
//   The content will be exactly pasted to the generated C file.
//
INCLUDE_BEGIN
#include "icli_porting_util.h"
#include "mgmt_api.h"
#include "misc_api.h"
#include "port_api.h"
#include "topo_api.h"
#include "sysutil_icli_func.h"
#ifndef VTSS_SW_OPTION_USERS
#include "sysutil_api.h"
#include "cyg/athttpd/auth.h"
#endif /* VTSS_SW_OPTION_USERS */
INCLUDE_END

// ############################################################################

//
// Function Segment
//   The segment allows the designer writes the local functions that will be
//   used in the command Segment and also the global functions that can be
//   shared with other C files.
//   The content will be exactly pasted to the generated C file.
//
FUNCTION_BEGIN
#ifndef VTSS_SW_OPTION_USERS
static BOOL USERS_ICLI_runtime_password(u32                session_id,
                                        icli_runtime_ask_t ask,
                                        icli_runtime_t     *runtime)
{
    switch (ask) {
    case ICLI_ASK_PRESENT:
        break;
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<Password : line%u>", VTSS_SYS_INPUT_PASSWD_LEN);
        return TRUE;
    case ICLI_ASK_RANGE:
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.sr.cnt = 1;
        runtime->range.u.sr.range[0].min = 1;
        runtime->range.u.sr.range[0].max = VTSS_SYS_INPUT_PASSWD_LEN;
        return TRUE; 
    default :
        break;
    }
    return FALSE;
}

static BOOL USERS_ICLI_runtime_encrypted_password(u32                session_id,
                                                  icli_runtime_ask_t ask,
                                                  icli_runtime_t     *runtime)
{
    u32 max_password_length = ((VTSS_SYS_INPUT_PASSWD_LEN / 3 + ((VTSS_SYS_INPUT_PASSWD_LEN % 3) ? 1 : 0)) * 4);

    switch (ask) {
    case ICLI_ASK_PRESENT:
        break;
    case ICLI_ASK_BYWORD:
        icli_sprintf(runtime->byword, "<Password : word4-%u>", max_password_length);
        return TRUE;
    case ICLI_ASK_RANGE:
        runtime->range.type = ICLI_RANGE_TYPE_UNSIGNED;
        runtime->range.u.sr.cnt = 1;
        runtime->range.u.sr.range[0].min = 4;
        runtime->range.u.sr.range[0].max = max_password_length;
        return TRUE; 
    default :
        break;
    }
    return FALSE;
}

static BOOL _is_printable_string(char *encry_password)
{
    int idx, len = strlen(encry_password);
    for (idx = 0; idx < len; idx++) {
        if (encry_password[idx] < 32 || encry_password[idx] > 126) {
            return FALSE;
        }
    }
    return TRUE;
}
#endif /* VTSS_SW_OPTION_USERS */
FUNCTION_END

// ############################################################################

//
// Export Segment
//   This segment contains the API declarations of the global functions in
//   Function Segment. This will be pasted exactly to the generated H file.
//   So, others can include the H file to use the global functions.
//
EXPORT_BEGIN
EXPORT_END

HELP_SHOW       = Show running system information
HELP_CLEAR      = Clear
HELP_IP         = Internet Protocol
HELP_INTERFACE  = Interface
HELP_PORT_TYPE  = Interface port type
HELP_PORT_LIST  = Interface port list
HELP_NO         = Negate a command or set its defaults

HELP_CLOCK      = Configure time-of-day clock


// ############################################################################

CMD_BEGIN
COMMAND   = show clock

FUNC_NAME = show_clock_sysutil
PRIVILEGE = ICLI_PRIVILEGE_0

CMD_MODE  = ICLI_CMD_MODE_EXEC

// (Optional)
// C variable for the variable in the mode entry command
// It is needed when CMD_MODE: ICLI_CMD_MODE_CONFIG_VLAN,
//                             ICLI_CMD_MODE_INTERFACE_PORT_LIST,
//                             ICLI_CMD_MODE_INTERFACE_VLAN
// MODE_VAR  =

// (Optional)
// Name of reused execution function of another command
// FUNC_REUSE =

// (Optional)
// Property of the command, ICLI_CMD_PROP_XXXX, defined in icli_types.h.
// Acceptable use | to combine them.
// PROPERTY  =

// (Optional)
// This is for #if conditional flag to enclose the command.
IF_FLAG   =

// (Optional)
// The no form of this command
// The C code need enclosed by [NO_FORM_CODE_BEGIN, NO_FORM_CODE_END]

// (Optional)
// Declare the variable name that one-to-one mapping to each word of command string (COMMAND)
// To get the variable type, please refer to AN1047-ICLI_Command_Generation_Guide.doc Appendix A: Variable Types
// or \vtss_appl\icli\doc\variable_type.txt
// The variable type is declared in \vtss_appl\icli\base\icli_types.h
//CMD_VAR   = show_var
//CMD_VAR   = clock_var

// (Optional)
// Declare the static local sub-function that one-to-one mapping to each word of command string (COMMAND)
// The function is used for runtime callback check on the corresponding word of command string
// RUNTIME   =

// (Optional)
// If there isn't exact matched definition in CCLI variable types (ccli_variable.c/g_variable_name[])
// Given an alternative word that one-to-one mapping to each word of command string (COMMAND)
// BYWORD    =
BYWORD    =
BYWORD    =

HELP = ##HELP_SHOW
HELP = ##HELP_CLOCK

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN

    ICLI_PRINTF("System Time     : %s\n\n", misc_time2str(time(NULL)));

CODE_END

// (Optional)
// The no form of this command
NO_FORM_VARIABLE_BEGIN
NO_FORM_VARIABLE_END

NO_FORM_CODE_BEGIN
NO_FORM_CODE_END
CMD_END

!==============================================================================
CMD_BEGIN

COMMAND   = show version

PRIVILEGE = ICLI_PRIVILEGE_0
PROPERTY  = ICLI_CMD_PROP_GREP

CMD_MODE  = ICLI_CMD_MODE_EXEC

HELP      = ##ICLI_HELP_SHOW
HELP      = System hardware and software status

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    sysutil_icli_func_conf( session_id );   
CODE_END

CMD_END

!==============================================================================
//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN

IF_FLAG = !defined(VTSS_SW_OPTION_USERS)

COMMAND   = password unencrypted <line31>

DOC_CMD_DESC    = Use the password encrypted <password> global configuration command \
                  to configure administrator password with unencrypted password for the local switch access.
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = Configure administrator password for the local switch access.
DOC_CMD_EXAMPLE = This example shows how to ato configure administrator password with unencrypted password of testuser:
DOC_CMD_EXAMPLE = Switch(config)# password unencrypted testuser
DOC_CMD_EXAMPLE = You can verify your settings by entering the show running-config privileged EXEC command.

FUNC_NAME = icli_password_unencrypted
FUNC_REUSE = 

PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15

RUNTIME   = 
RUNTIME   = 
RUNTIME   = USERS_ICLI_runtime_password

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = password

HELP      = ##HELP_PASSWORD
HELP      = ##HELP_UNENCRYPTED
HELP      = ##HELP_UNENCRYPTED_PWD

BYWORD    =
BYWORD    =
BYWORD    = <UnencryptedPassword : line31>

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    if (system_set_passwd(password) != VTSS_OK) {
        ICLI_PRINTF("%% Calling system_set_passwd() failed\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

HELP_PASSWORD           = Specify the password for the administrator
HELP_ENCRYPTED        = Specifies an ENCRYPTED password will follow
HELP_ENCRYPTED_PWD    = The ENCRYPTED (hidden) user password. Notice the ENCRYPTED password will be decoded by system internally. You cannot directly use it as same as the Plain Text and it is not human-readable text normally.
HELP_UNENCRYPTED        = Specifies an UNENCRYPTED password will follow
HELP_UNENCRYPTED_PWD   = The UNENCRYPTED (Plain Text) user password. Any printable characters including space is accepted. Notice that you have no change to get the Plain Text password after this command. The system will always display the ENCRYPTED password.


!==============================================================================
//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN

IF_FLAG = !defined(VTSS_SW_OPTION_USERS)

COMMAND   = password encrypted <word4-44>

DOC_CMD_DESC    = Use the password encrypted <password> global configuration command \
                  to configure administrator password with encrypted password for the local switch access.
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = Configure administrator password for the local switch access.
DOC_CMD_EXAMPLE = This example shows how to configure administrator password with encrypted password testuser:
DOC_CMD_EXAMPLE = Switch(config)# password encrypted dGVzdHVzZXI=
DOC_CMD_EXAMPLE = You can verify your settings by entering the show running-config privileged EXEC command.

FUNC_NAME = icli_password_encrypted
FUNC_REUSE = 

PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15

RUNTIME   = 
RUNTIME   = 
RUNTIME   = USERS_ICLI_runtime_encrypted_password

CMD_VAR   = 
CMD_VAR   = 
CMD_VAR   = encry_password

HELP      = ##HELP_PASSWORD
HELP      = ##HELP_ENCRYPTED
HELP      = ##HELP_ENCRYPTED_PWD

BYWORD    =
BYWORD    =
BYWORD    = <EncryptedPassword : word4-44>

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

VARIABLE_BEGIN
    char password[VTSS_SYS_INPUT_PASSWD_LEN];
VARIABLE_END

CODE_BEGIN
    memset(password, 0, sizeof(password));
    if (cyg_httpd_base64_decode(password, encry_password, icli_str_len(encry_password)) <= 0 ||
        !_is_printable_string(password)) {
        ICLI_PRINTF("%% The UNENCRYPTED password is not accepted\n");
        return ICLI_RC_ERROR;
    }

    if (system_set_passwd(password) != VTSS_OK) {
        ICLI_PRINTF("%% Calling system_set_passwd() failed\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END

!==============================================================================
//
// Command Segment
//   This segment is the implementation of the command,
//   one segment for one command.
//
CMD_BEGIN

IF_FLAG = !defined(VTSS_SW_OPTION_USERS)

COMMAND   = password none

DOC_CMD_DESC    = Use the password none global configuration command \
                  to remove the administrator password.
DOC_CMD_DEFAULT = 
DOC_CMD_USAGE   = Remove the administrator password.
DOC_CMD_EXAMPLE = This example shows how to remove the administrator password:
DOC_CMD_EXAMPLE = Switch(config)# password none
DOC_CMD_EXAMPLE = You can verify your settings by entering the show running-config privileged EXEC command.

FUNC_NAME = icli_password_clear
FUNC_REUSE = 

PROPERTY  = 
PRIVILEGE = ICLI_PRIVILEGE_15

RUNTIME   = 
RUNTIME   = 

CMD_VAR   = 
CMD_VAR   = 

HELP      = ##HELP_PASSWORD
HELP      = NULL password

BYWORD    =
BYWORD    =

CMD_MODE  = ICLI_CMD_MODE_GLOBAL_CONFIG

VARIABLE_BEGIN
VARIABLE_END

CODE_BEGIN
    if (system_set_passwd("") != VTSS_OK) {
        ICLI_PRINTF("%% Calling system_set_passwd() failed\n");
        return ICLI_RC_ERROR;
    }
CODE_END

CMD_END
