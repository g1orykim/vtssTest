<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--

 Vitesse Switch Software.

 Copyright (c) 2002-2012 Vitesse Semiconductor Corporation "Vitesse". All
 Rights Reserved.

 Unpublished rights reserved under the copyright laws of the United States of
 America, other countries and international treaties. Permission to use, copy,
 store and modify, the software and its source code is granted. Permission to
 integrate into other products, disclose, transmit and distribute the software
 in an absolute machine readable format (e.g. HEX file) is also granted.  The
 source code of the software may not be disclosed, transmitted or distributed
 without the written permission of Vitesse. The software and its source code
 may only be used in products utilizing the Vitesse switch products.

 This copyright notice must appear in any copy, modification, disclosure,
 transmission or distribution of the software. Vitesse retains all ownership,
 copyright, trade secret and proprietary rights in the software.

 THIS SOFTWARE HAS BEEN PROVIDED "AS IS," WITHOUT EXPRESS OR IMPLIED WARRANTY
 INCLUDING, WITHOUT LIMITATION, IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR USE AND NON-INFRINGEMENT.

-->
<html>

<head>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <title>Stack Status</title>
 <link href="lib/normal.css" rel="stylesheet" type="text/css">
 <script type="text/javascript" src="lib/config.js"></script>
 <script type="text/javascript" src="lib/ajax.js"></script>
 <script type="text/javascript" src="lib/dynforms.js"></script>
 <script type="text/javascript">

// Help page magic
var help_page = "/help/help_stackstate.htm";

var State2Text = ["Back-to-Back", "Ring", "Chain"];
var Bool2Text  = ["No", "Yes", "-"];

var timerID;
var timeOut = settingsRefreshInterval();

function addListRow(index, frag, master, values) {
    var tr = CreateStyledElement("tr", index % 2 ? "display_odd" : "display_even");
    addTextCell(tr, values[1], master ? "cl mac emphasize" : "cl mac");
    addTextCell(tr, values[2] == "0" ? "-" : values[2], "c");
    addTextCell(tr, unescape(values[8]), "cl");
    addTextCell(tr, unescape(values[9]), "cl");
    addTextCell(tr, values[10], "c");
    addTextCell(tr, values[11], "cr");
    addTextCell(tr, a2s(Bool2Text, parseInt(values[12], 10)), "c");
    frag.appendChild(tr);       // Add row to fragment
}

function addFwdRow(index, frag, master, values) {
    var tr = CreateStyledElement("tr", index % 2 ? "display_odd" : "display_even");
    addTextCell(tr, values[1], master ? "cl mac emphasize" : "cl mac");
    addTextCell(tr, values[2] == "0" ? "-" : values[2], "c");
    addTextCell(tr, values[3], "c");
    addTextCell(tr, values[4], "c");
    addTextCell(tr, values[5], "c");
    addTextCell(tr, values[6], "c");
    addTextCell(tr, values[7], "c");
    frag.appendChild(tr);       // Add row to fragment
}

function processUpdate(req, ref)
{
    var i, j;
    // Format          : <general>[|<switch_state_1>|<switch_state_2>|...|<switch_state_N)] NOTE: <switch_state_X> is only present when stacking is enabled.
    // <general>       : cur_stack_enabled|conf_stack_enabled|dirty|topology|stack_member_cnt|last_topology_change|master_mac_addr|last_master_change|stack_port_0|stack_port_1
    // <switch_state_n>: 0/<device_state_0>[|1/<device_state_1>] NOTE: the second part is only present on 2-device switches.
    // <device_state_x>: mac_addr/usid/front_port_str/distance_0/distance_1/forward_0/forward_1/product_name/version_str/mst_elect_prio/mst_time/mst_reelect

    if (!req.responseText) {
        return;
    }

    var values = req.responseText.split("|");
    var cur_stack_enabled  = parseInt(values[0], 10);
    var conf_stack_enabled = parseInt(values[1], 10);
    var dirty              = parseInt(values[2], 10);

    if (cur_stack_enabled) {
        var curMbrs = parseInt(values[4], 10);
        UpdateId('state', curMbrs == 1 ? "Standalone" : a2s(State2Text, values[3]));
        UpdateId('status_0', (dirty || cur_stack_enabled != conf_stack_enabled) ? "Stacking Enabled. Reboot Required" : "Stacking Enabled");
        UpdateId('stackmbrcnt', curMbrs);
        UpdateId('topo_change', values[5]);
        UpdateId('master', values[6]);
        UpdateId('master_change', values[7]);
        for (i = 0; i < 4; i++) {
            UpdateId("stack_port_" + i, "Port " + values[8 + (i & 1)]);
        }

        var lstbody = document.getElementById('stackList');
        var fwdbody = document.getElementById('stackFwd');
        clearChildNodes(lstbody);
        clearChildNodes(fwdbody);
        var lstfrag = document.createDocumentFragment();
        var fwdfrag = document.createDocumentFragment();
        var list_row_idx = 0;
        for (i = 10, j = 0; i < values.length; i++) {
            if (values[i]) {
                var data = values[i].split("/");
                var master = (data[1] == values[6]);
                if (parseInt(data[0], 10) === 0) {
                    // Only show one row for two-device boards.
                    addListRow(list_row_idx++, lstfrag, master, data);
                }
                addFwdRow(j, fwdfrag, master, data);
                j++;
            }
        }
        lstbody.appendChild(lstfrag);
        fwdbody.appendChild(fwdfrag);

        var autorefresh = document.getElementById('autorefresh');
        if (autorefresh.checked) {
            if (timerID) {
                clearTimeout(timerID);
            }
            timerID = setTimeout('requestUpdate()', timeOut);
        }
    } else {
        UpdateId('status_1', (cur_stack_enabled != conf_stack_enabled) ? "Stacking Disabled. Reboot Required" : "Stacking Disabled");
    }

   SetVisible('div_stacking_enabled',   cur_stack_enabled);
   SetVisible('div_stacking_disabled', !cur_stack_enabled);
   document.getElementById("update_0").style.visibility = "hidden";
   document.getElementById("update_1").style.visibility = "hidden";
}

function requestUpdate() {
    document.getElementById("update_0").style.visibility = "visible";
    document.getElementById("update_1").style.visibility = "visible";
    loadXMLDoc("/stat/topo", processUpdate, null);
}

function chkRefresh(fld)
{
    if (!fld.checked) {
        if (timerID) {
            clearTimeout(timerID);
        }
        timerID = null;
    } else {
        requestUpdate();
    }
}

function setAuto()
{
    var autorefresh = document.getElementById('autorefresh');
    autorefresh.checked = false;
    chkRefresh(autorefresh);
    var newTimeOut = prompt("Please enter timeout (in msec)", timeOut);
    if (newTimeOut === null) {
        return;
    }
    if (isNaN(newTimeOut) || newTimeOut < 100) {
        alert("Invalid timeout, must be >= 100 msec");
    } else {
        timeOut = newTimeOut;
    }
    autorefresh.checked = true;
    chkRefresh(autorefresh);
}

function doHeaders()
{
    var head, tr;

    // Fwd Table
    head = document.getElementById('fwdhead');
    tr = CreateStyledElement("tr", "display_header");
    addTextHeaderCell(tr, "Stack Member").setAttribute("rowSpan", 2);
    addTextHeaderCell(tr, "Switch ID").setAttribute("rowSpan", 2);
    addTextHeaderCell(tr, "Ports").setAttribute("rowSpan", 2);
    addTextHeaderCell(tr, "Distance", "", 2);
    addTextHeaderCell(tr, "Forwarding", "", 2);
    head.appendChild(tr);

    tr = CreateStyledElement("tr", "display_header");
    for (var i = 0; i < 4; i++) {
        addTextHeaderCell(tr, "").id = ("stack_port_" + i);
    }
    head.appendChild(tr);
}

 </script>
</head>

<body class="content" onload="doHeaders(); requestUpdate();">

<div id="div_stacking_enabled" style="display:none;">

  <h1>Stack Topology</h1>

  <div class="refreshbar">
    <form action="#">
      <a href="#" onclick="setAuto();">Auto-refresh</a>
      <input type="checkbox" name="autorefresh" id="autorefresh" onclick="chkRefresh(this);">
      <input type="button" value="Refresh" onclick="requestUpdate(); this.blur();">
      <img id="update_0" alt="" src="images/updating.gif">
    </form>
  </div>

  <table summary="Topology Information" class="display">
    <tr class="display_even">
      <td class="param_label">State</td>
      <td class="cr" id="status_0"></td>
    </tr>
    <tr class="display_odd">
      <td class="param_label">Topology</td>
      <td class="cr" id="state"></td>
    </tr>
    <tr class="display_even">
      <td class="param_label">Member Count</td>
      <td class="cr" id="stackmbrcnt">N/A</td>
    </tr>
    <tr class="display_odd">
      <td class="param_label">Last Topology Change</td>
      <td class="cr" id="topo_change">N/A</td>
    </tr>
    <tr class="display_even">
      <td class="param_label">Master Switch</td>
      <td class="cr" id="master">N/A</td>
    </tr>
    <tr class="display_odd">
      <td class="param_label">Last Master Change</td>
      <td class="cr" id="master_change">N/A</td>
    </tr>
  </table>

  <h1>Stack List</h1>

  <table summary="Stack List Table" class="display">
    <thead>
      <tr class="display_header">
        <th rowspan="2">Stack Member</th>
        <th rowspan="2">Switch ID</th>
        <th colspan="2">Product</th>
        <th colspan="3">Master</th>
      </tr>
      <tr class="display_header">
        <th>Name</th>
        <th>Version</th>
        <th>Priority</th>
        <th>Time</th>
        <th>Reelect</th>
      </tr>
    </thead>
    <tbody id="stackList"></tbody>
  </table>

  <h1>Master Forwarding Table</h1>

  <table summary="Forwarding Table" class="display">
    <thead id="fwdhead"></thead>
    <tbody id="stackFwd"></tbody>
  </table>
</div>

<div id="div_stacking_disabled" style="display:none;">

  <h1>Stack Status</h1>
  <div class="refreshbar">
    <input type="button" value="Refresh" onclick="requestUpdate(); this.blur();">
    <img id="update_1" alt="" src="images/updating.gif">
  </div>

  <table summary="Stack Status" class="display">
    <tr class="display_even">
      <td class="param_label">State</td>
      <td class="cr" id="status_1"></td>
    </tr>
  </table>
</div>

</body>
</html>

<!--
    local variables:
    mode: java
    c-basic-offset: 4
    tab-width: 8
    c-comment-only-line-offset: 0
    end:
-->
